{"ast":null,"code":"import React, { useEffect } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport StructTreeItem from './StructTreeItem.js';\nimport usePageContext from './shared/hooks/usePageContext.js';\nimport useResolver from './shared/hooks/useResolver.js';\nimport { cancelRunningTask } from './shared/utils.js';\nexport default function StructTree() {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const {\n    onGetStructTreeError: onGetStructTreeErrorProps,\n    onGetStructTreeSuccess: onGetStructTreeSuccessProps\n  } = pageContext;\n  const [structTreeState, structTreeDispatch] = useResolver();\n  const {\n    value: structTree,\n    error: structTreeError\n  } = structTreeState;\n  const {\n    customTextRenderer,\n    page\n  } = pageContext;\n\n  function onLoadSuccess() {\n    if (!structTree) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    if (onGetStructTreeSuccessProps) {\n      onGetStructTreeSuccessProps(structTree);\n    }\n  }\n\n  function onLoadError() {\n    if (!structTreeError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    warning(false, structTreeError.toString());\n\n    if (onGetStructTreeErrorProps) {\n      onGetStructTreeErrorProps(structTreeError);\n    }\n  }\n\n  function resetAnnotations() {\n    structTreeDispatch({\n      type: 'RESET'\n    });\n  }\n\n  useEffect(resetAnnotations, [structTreeDispatch, page]);\n\n  function loadStructTree() {\n    if (customTextRenderer) {\n      // TODO: Document why this is necessary\n      return;\n    }\n\n    if (!page) {\n      return;\n    }\n\n    const cancellable = makeCancellable(page.getStructTree());\n    const runningTask = cancellable;\n    cancellable.promise.then(nextStructTree => {\n      structTreeDispatch({\n        type: 'RESOLVE',\n        value: nextStructTree\n      });\n    }).catch(error => {\n      structTreeDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(runningTask);\n  }\n\n  useEffect(loadStructTree, [customTextRenderer, page, structTreeDispatch]);\n  useEffect(() => {\n    if (structTree === undefined) {\n      return;\n    }\n\n    if (structTree === false) {\n      onLoadError();\n      return;\n    }\n\n    onLoadSuccess();\n  }, // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [structTree]);\n\n  if (!structTree) {\n    return null;\n  }\n\n  return React.createElement(StructTreeItem, {\n    className: \"react-pdf__Page__structTree structTree\",\n    node: structTree\n  });\n}","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/node_modules/react-pdf/dist/esm/StructTree.js"],"names":["React","useEffect","makeCancellable","invariant","warning","StructTreeItem","usePageContext","useResolver","cancelRunningTask","StructTree","pageContext","onGetStructTreeError","onGetStructTreeErrorProps","onGetStructTreeSuccess","onGetStructTreeSuccessProps","structTreeState","structTreeDispatch","value","structTree","error","structTreeError","customTextRenderer","page","onLoadSuccess","onLoadError","toString","resetAnnotations","type","loadStructTree","cancellable","getStructTree","runningTask","promise","then","nextStructTree","catch","undefined","createElement","className","node"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport StructTreeItem from './StructTreeItem.js';\nimport usePageContext from './shared/hooks/usePageContext.js';\nimport useResolver from './shared/hooks/useResolver.js';\nimport { cancelRunningTask } from './shared/utils.js';\nexport default function StructTree() {\n    const pageContext = usePageContext();\n    invariant(pageContext, 'Unable to find Page context.');\n    const { onGetStructTreeError: onGetStructTreeErrorProps, onGetStructTreeSuccess: onGetStructTreeSuccessProps, } = pageContext;\n    const [structTreeState, structTreeDispatch] = useResolver();\n    const { value: structTree, error: structTreeError } = structTreeState;\n    const { customTextRenderer, page } = pageContext;\n    function onLoadSuccess() {\n        if (!structTree) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        if (onGetStructTreeSuccessProps) {\n            onGetStructTreeSuccessProps(structTree);\n        }\n    }\n    function onLoadError() {\n        if (!structTreeError) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        warning(false, structTreeError.toString());\n        if (onGetStructTreeErrorProps) {\n            onGetStructTreeErrorProps(structTreeError);\n        }\n    }\n    function resetAnnotations() {\n        structTreeDispatch({ type: 'RESET' });\n    }\n    useEffect(resetAnnotations, [structTreeDispatch, page]);\n    function loadStructTree() {\n        if (customTextRenderer) {\n            // TODO: Document why this is necessary\n            return;\n        }\n        if (!page) {\n            return;\n        }\n        const cancellable = makeCancellable(page.getStructTree());\n        const runningTask = cancellable;\n        cancellable.promise\n            .then((nextStructTree) => {\n            structTreeDispatch({ type: 'RESOLVE', value: nextStructTree });\n        })\n            .catch((error) => {\n            structTreeDispatch({ type: 'REJECT', error });\n        });\n        return () => cancelRunningTask(runningTask);\n    }\n    useEffect(loadStructTree, [customTextRenderer, page, structTreeDispatch]);\n    useEffect(() => {\n        if (structTree === undefined) {\n            return;\n        }\n        if (structTree === false) {\n            onLoadError();\n            return;\n        }\n        onLoadSuccess();\n    }, \n    // Ommitted callbacks so they are not called every time they change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [structTree]);\n    if (!structTree) {\n        return null;\n    }\n    return React.createElement(StructTreeItem, { className: \"react-pdf__Page__structTree structTree\", node: structTree });\n}\n"]},"metadata":{},"sourceType":"module"}