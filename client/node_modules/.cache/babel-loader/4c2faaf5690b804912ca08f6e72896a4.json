{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishn\\\\Desktop\\\\AuthInMern\\\\client\\\\src\\\\components\\\\Message\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const [pdfFileData, setPdfFileData] = useState();\n\n  async function readFileAsync(file) {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n\n      if (arrayBuffer) {\n        return new Uint8Array(arrayBuffer);\n      } else {\n        console.error(\"Error reading file: Array buffer is undefined.\");\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error reading file:\", error);\n      return null;\n    }\n  }\n\n  async function renderPdf(uint8array) {\n    try {\n      if (!uint8array) {\n        throw new Error('Uint8Array is undefined or empty.');\n      }\n\n      const pdfDoc = await PDFDocument.load(uint8array);\n\n      if (!pdfDoc) {\n        throw new Error('PDFDocument is undefined.');\n      } // Create a new PDF document\n\n\n      const newPdfDoc = await PDFDocument.create(); // Copy pages from the source PDF document\n\n      const copiedPages = await newPdfDoc.copyPages(pdfDoc, [0]); // Add the copied pages to the new PDF document\n\n      copiedPages.forEach(page => newPdfDoc.addPage(page)); // Save the new PDF\n\n      const newPdfBytes = await newPdfDoc.save();\n\n      if (!newPdfBytes) {\n        throw new Error('New PDF bytes are undefined.');\n      }\n\n      setPdfFileData(newPdfBytes);\n    } catch (error) {\n      console.error(\"Error rendering PDF:\", error);\n    }\n  } // Execute when the user selects a file\n\n\n  const onFileSelected = async e => {\n    const fileList = e.target.files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      const pdfFile = fileList[0];\n      const pdfArrayBuffer = await readFileAsync(pdfFile);\n      renderPdf(pdfArrayBuffer);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-selector\",\n      accept: \".pdf\",\n      onChange: onFileSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: \"PdfFrame\",\n      src: pdfFileData ? `data:application/pdf;base64,${pdfFileData.toString(\"base64\")}` : null,\n      frameBorder: \"0\",\n      type: \"application/pdf\",\n      style: {\n        display: \"block\",\n        width: \"100%\",\n        height: \"90vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Home, \"lRhz6fD0rFJSUl+g5b2LfCpzvnQ=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/src/components/Message/index.jsx"],"names":["useState","PDFDocument","Home","pdfFileData","setPdfFileData","readFileAsync","file","arrayBuffer","Uint8Array","console","error","renderPdf","uint8array","Error","pdfDoc","load","newPdfDoc","create","copiedPages","copyPages","forEach","page","addPage","newPdfBytes","save","onFileSelected","e","fileList","target","files","length","pdfFile","pdfArrayBuffer","toString","display","width","height"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\n\r\nexport default function Home() {\r\n  const [pdfFileData, setPdfFileData] = useState();\r\n\r\n  async function readFileAsync(file) {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      if (arrayBuffer) {\r\n        return new Uint8Array(arrayBuffer);\r\n      } else {\r\n        console.error(\"Error reading file: Array buffer is undefined.\");\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading file:\", error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n\r\n  async function renderPdf(uint8array) {\r\n    try {\r\n      if (!uint8array) {\r\n        throw new Error('Uint8Array is undefined or empty.');\r\n      }\r\n  \r\n      const pdfDoc = await PDFDocument.load(uint8array);\r\n  \r\n      if (!pdfDoc) {\r\n        throw new Error('PDFDocument is undefined.');\r\n      }\r\n  \r\n      // Create a new PDF document\r\n      const newPdfDoc = await PDFDocument.create();\r\n  \r\n      // Copy pages from the source PDF document\r\n      const copiedPages = await newPdfDoc.copyPages(pdfDoc, [0]);\r\n  \r\n      // Add the copied pages to the new PDF document\r\n      copiedPages.forEach((page) => newPdfDoc.addPage(page));\r\n  \r\n      // Save the new PDF\r\n      const newPdfBytes = await newPdfDoc.save();\r\n  \r\n      if (!newPdfBytes) {\r\n        throw new Error('New PDF bytes are undefined.');\r\n      }\r\n  \r\n      setPdfFileData(newPdfBytes);\r\n    } catch (error) {\r\n      console.error(\"Error rendering PDF:\", error);\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n  // Execute when the user selects a file\r\n  const onFileSelected = async (e) => {\r\n    const fileList = e.target.files;\r\n    if (fileList?.length > 0) {\r\n      const pdfFile = fileList[0];\r\n      const pdfArrayBuffer = await readFileAsync(pdfFile);\r\n      renderPdf(pdfArrayBuffer);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      \r\n\r\n      <input\r\n        type=\"file\"\r\n        id=\"file-selector\"\r\n        accept=\".pdf\"\r\n        onChange={onFileSelected}\r\n      />\r\n      <iframe\r\n  title=\"PdfFrame\"\r\n  src={pdfFileData ? `data:application/pdf;base64,${pdfFileData.toString(\"base64\")}` : null}\r\n  frameBorder=\"0\" \r\n  type=\"application/pdf\"\r\n  style={{ display: \"block\", width: \"100%\", height: \"90vh\" }}\r\n></iframe>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}