{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishn\\\\Desktop\\\\AuthInMern\\\\client\\\\src\\\\components\\\\pdfViewer\\\\pdfViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [pdfFileData, setPdfFileData] = useState();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [pageRange, setPageRange] = useState(\"2-3\"); // Default page range\n\n  const readFileAsync = file => {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  const renderPdf = uint8array => {\n    const tempblob = new Blob([uint8array], {\n      type: \"application/pdf\"\n    });\n    const docUrl = URL.createObjectURL(tempblob);\n    setPdfFileData(docUrl);\n  };\n\n  const extractPdfPage = async (arrayBuff, pageRange) => {\n    try {\n      const [start, end] = pageRange.split(\"-\").map(Number);\n      const pdfSrcDoc = await PDFDocument.load(arrayBuff);\n      const pdfNewDoc = await PDFDocument.create();\n      const pages = await pdfNewDoc.copyPages(pdfSrcDoc, range(start, end));\n      pages.forEach(page => pdfNewDoc.addPage(page));\n      const newpdf = await pdfNewDoc.save();\n      return newpdf;\n    } catch (error) {\n      setErrorMessage(\"Error extracting PDF pages.\");\n      console.error(error);\n      return null;\n    }\n  };\n\n  const onFileSelected = async e => {\n    setErrorMessage(\"\"); // Clear any previous error messages\n\n    const fileList = e.target.files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      try {\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\n        const newPdfDoc = await extractPdfPage(pdfArrayBuffer, pageRange);\n\n        if (newPdfDoc) {\n          renderPdf(newPdfDoc);\n        }\n      } catch (error) {\n        setErrorMessage(\"Error loading or processing the selected PDF file.\");\n        console.error(error);\n      }\n    }\n  };\n\n  const onPageRangeChange = e => {\n    setPageRange(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-selector\",\n      accept: \".pdf\",\n      onChange: onFileSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"page-range\",\n        children: \"Page Range (e.g., 2-5):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"page-range\",\n        value: pageRange,\n        onChange: onPageRangeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFileSelected,\n      children: \"Extract Pages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      style: {\n        display: \"block\",\n        width: \"100vw\",\n        height: \"90vh\"\n      },\n      title: \"PdfFrame\",\n      src: pdfFileData,\n      frameBorder: \"0\",\n      type: \"application/pdf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"vQJqSytvKqiNUz8CXC9imEyol4o=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/src/components/pdfViewer/pdfViewer.js"],"names":["React","useState","PDFDocument","Home","pdfFileData","setPdfFileData","errorMessage","setErrorMessage","pageRange","setPageRange","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","renderPdf","uint8array","tempblob","Blob","type","docUrl","URL","createObjectURL","extractPdfPage","arrayBuff","start","end","split","map","Number","pdfSrcDoc","load","pdfNewDoc","create","pages","copyPages","range","forEach","page","addPage","newpdf","save","error","console","onFileSelected","e","fileList","target","files","length","pdfArrayBuffer","newPdfDoc","onPageRangeChange","value","color","display","width","height"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\n\r\nconst Home = () => {\r\n  const [pdfFileData, setPdfFileData] = useState();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [pageRange, setPageRange] = useState(\"2-3\"); // Default page range\r\n\r\n  const readFileAsync = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      let reader = new FileReader();\r\n      reader.onload = () => {\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  };\r\n\r\n  const renderPdf = (uint8array) => {\r\n    const tempblob = new Blob([uint8array], { type: \"application/pdf\" });\r\n    const docUrl = URL.createObjectURL(tempblob);\r\n    setPdfFileData(docUrl);\r\n  };\r\n\r\n  const extractPdfPage = async (arrayBuff, pageRange) => {\r\n    try {\r\n      const [start, end] = pageRange.split(\"-\").map(Number);\r\n      const pdfSrcDoc = await PDFDocument.load(arrayBuff);\r\n      const pdfNewDoc = await PDFDocument.create();\r\n      const pages = await pdfNewDoc.copyPages(pdfSrcDoc, range(start, end));\r\n      pages.forEach((page) => pdfNewDoc.addPage(page));\r\n      const newpdf = await pdfNewDoc.save();\r\n      return newpdf;\r\n    } catch (error) {\r\n      setErrorMessage(\"Error extracting PDF pages.\");\r\n      console.error(error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const onFileSelected = async (e) => {\r\n    setErrorMessage(\"\"); // Clear any previous error messages\r\n    const fileList = e.target.files;\r\n    if (fileList?.length > 0) {\r\n      try {\r\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\r\n        const newPdfDoc = await extractPdfPage(pdfArrayBuffer, pageRange);\r\n        if (newPdfDoc) {\r\n          renderPdf(newPdfDoc);\r\n        }\r\n      } catch (error) {\r\n        setErrorMessage(\"Error loading or processing the selected PDF file.\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onPageRangeChange = (e) => {\r\n    setPageRange(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello world</h1>\r\n      <input type=\"file\" id=\"file-selector\" accept=\".pdf\" onChange={onFileSelected} />\r\n      <div>\r\n        <label htmlFor=\"page-range\">Page Range (e.g., 2-5):</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"page-range\"\r\n          value={pageRange}\r\n          onChange={onPageRangeChange}\r\n        />\r\n      </div>\r\n      <button onClick={onFileSelected}>Extract Pages</button>\r\n      {errorMessage && <p style={{ color: \"red\" }}>{errorMessage}</p>}\r\n      <iframe\r\n        style={{ display: \"block\", width: \"100vw\", height: \"90vh\" }}\r\n        title=\"PdfFrame\"\r\n        src={pdfFileData}\r\n        frameBorder=\"0\"\r\n        type=\"application/pdf\"\r\n      ></iframe>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}