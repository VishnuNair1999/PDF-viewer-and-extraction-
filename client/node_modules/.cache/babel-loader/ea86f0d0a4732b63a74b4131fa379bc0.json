{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishn\\\\Desktop\\\\AuthInMern\\\\client\\\\src\\\\components\\\\Message\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const [pdfFileData, setPdfFileData] = useState();\n\n  function readFileAsync(file) {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  }\n\n  async function renderPdf(uint8array) {\n    try {\n      if (!uint8array) {\n        throw new Error('Uint8Array is undefined or empty.');\n      }\n\n      const pdfDoc = await PDFDocument.load(uint8array);\n\n      if (!pdfDoc) {\n        throw new Error('PDFDocument is undefined.');\n      }\n\n      const newPdfDoc = await PDFDocument.create();\n      const copiedPages = await newPdfDoc.copyPages(pdfDoc, [0]);\n      copiedPages.forEach(page => newPdfDoc.addPage(page));\n      const newPdfBytes = await newPdfDoc.save();\n\n      if (!newPdfBytes) {\n        throw new Error('New PDF bytes are undefined.');\n      }\n\n      setPdfFileData(newPdfBytes);\n    } catch (error) {\n      console.error(\"Error rendering PDF:\", error);\n    }\n  }\n\n  function range(start, end) {\n    let length = end - start + 1;\n    return Array.from({\n      length\n    }, (_, i) => start + i - 1);\n  }\n\n  async function extractPdfPage(arrayBuff) {\n    const pdfSrcDoc = await PDFDocument.load(arrayBuff);\n    const pdfNewDoc = await PDFDocument.create();\n    const pages = await pdfNewDoc.copyPages(pdfSrcDoc, range(2, 3));\n    pages.forEach(page => pdfNewDoc.addPage(page));\n    const newpdf = await pdfNewDoc.save();\n    return newpdf;\n  } // Execute when user select a file\n\n\n  const onFileSelected = async e => {\n    const fileList = e.target.files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      const pdfArrayBuffer = await readFileAsync(fileList[0]);\n      const newPdfDoc = await extractPdfPage(pdfArrayBuffer);\n      renderPdf(newPdfDoc);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-selector\",\n      accept: \".pdf\",\n      onChange: onFileSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      style: {\n        display: \"block\",\n        width: \"100vw\",\n        height: \"90vh\"\n      },\n      title: \"PdfFrame\",\n      src: pdfFileData,\n      frameborder: \"0\",\n      type: \"application/pdf\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"lRhz6fD0rFJSUl+g5b2LfCpzvnQ=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/src/components/Message/index.jsx"],"names":["useState","PDFDocument","Home","pdfFileData","setPdfFileData","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","renderPdf","uint8array","Error","pdfDoc","load","newPdfDoc","create","copiedPages","copyPages","forEach","page","addPage","newPdfBytes","save","error","console","range","start","end","length","Array","from","_","i","extractPdfPage","arrayBuff","pdfSrcDoc","pdfNewDoc","pages","newpdf","onFileSelected","e","fileList","target","files","pdfArrayBuffer","display","width","height"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\n\r\nexport default function Home() {\r\n  const [pdfFileData, setPdfFileData] = useState();\r\n\r\n  function readFileAsync(file) {\r\n    return new Promise((resolve, reject) => {\r\n      let reader = new FileReader();\r\n      reader.onload = () => {\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  }\r\n\r\n  async function renderPdf(uint8array) {\r\n    try {\r\n      if (!uint8array) {\r\n        throw new Error('Uint8Array is undefined or empty.');\r\n      }\r\n  \r\n      const pdfDoc = await PDFDocument.load(uint8array);\r\n  \r\n      if (!pdfDoc) {\r\n        throw new Error('PDFDocument is undefined.');\r\n      }\r\n  \r\n      const newPdfDoc = await PDFDocument.create();\r\n      const copiedPages = await newPdfDoc.copyPages(pdfDoc, [0]);\r\n      copiedPages.forEach((page) => newPdfDoc.addPage(page));\r\n  \r\n      const newPdfBytes = await newPdfDoc.save();\r\n  \r\n      if (!newPdfBytes) {\r\n        throw new Error('New PDF bytes are undefined.');\r\n      }\r\n  \r\n      setPdfFileData(newPdfBytes);\r\n    } catch (error) {\r\n      console.error(\"Error rendering PDF:\", error);\r\n    }\r\n  }\r\n  \r\n\r\n  function range(start, end) {\r\n    let length = end - start + 1;\r\n    return Array.from({ length }, (_, i) => start + i - 1);\r\n  }\r\n\r\n  async function extractPdfPage(arrayBuff) {\r\n    const pdfSrcDoc = await PDFDocument.load(arrayBuff);\r\n    const pdfNewDoc = await PDFDocument.create();\r\n    const pages = await pdfNewDoc.copyPages(pdfSrcDoc, range(2, 3));\r\n    pages.forEach((page) => pdfNewDoc.addPage(page));\r\n    const newpdf = await pdfNewDoc.save();\r\n    return newpdf;\r\n  }\r\n\r\n  // Execute when user select a file\r\n  const onFileSelected = async (e) => {\r\n    const fileList = e.target.files;\r\n    if (fileList?.length > 0) {\r\n      const pdfArrayBuffer = await readFileAsync(fileList[0]);\r\n      const newPdfDoc = await extractPdfPage(pdfArrayBuffer);\r\n      renderPdf(newPdfDoc);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n     \r\n      <input\r\n        type=\"file\"\r\n        id=\"file-selector\"\r\n        accept=\".pdf\"\r\n        onChange={onFileSelected}\r\n      />\r\n      <iframe\r\n        style={{ display: \"block\", width: \"100vw\", height: \"90vh\" }}\r\n        title=\"PdfFrame\"\r\n        src={pdfFileData}\r\n        frameborder=\"0\"\r\n        type=\"application/pdf\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}