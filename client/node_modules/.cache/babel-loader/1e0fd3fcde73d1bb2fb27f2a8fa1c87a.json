{"ast":null,"code":"/**\n * A function that merges React refs into one.\n * Supports both functions and ref objects created using createRef() and useRef().\n *\n * Usage:\n * ```tsx\n * <div ref={mergeRefs(ref1, ref2, ref3)} />\n * ```\n *\n * @param {(React.Ref<T> | undefined)[]} inputRefs Array of refs\n * @returns {React.Ref<T> | React.RefCallback<T>} Merged refs\n */\nexport default function mergeRefs() {\n  var inputRefs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    inputRefs[_i] = arguments[_i];\n  }\n\n  var filteredInputRefs = inputRefs.filter(Boolean);\n\n  if (filteredInputRefs.length <= 1) {\n    var firstRef = filteredInputRefs[0];\n    return firstRef || null;\n  }\n\n  return function mergedRefs(ref) {\n    filteredInputRefs.forEach(function (inputRef) {\n      if (typeof inputRef === 'function') {\n        inputRef(ref);\n      } else if (inputRef) {\n        inputRef.current = ref;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/node_modules/merge-refs/dist/esm/index.js"],"names":["mergeRefs","inputRefs","_i","arguments","length","filteredInputRefs","filter","Boolean","firstRef","mergedRefs","ref","forEach","inputRef","current"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,SAAT,GAAqB;AAChC,MAAIC,SAAS,GAAG,EAAhB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,SAAS,CAACC,EAAD,CAAT,GAAgBC,SAAS,CAACD,EAAD,CAAzB;AACH;;AACD,MAAIG,iBAAiB,GAAGJ,SAAS,CAACK,MAAV,CAAiBC,OAAjB,CAAxB;;AACA,MAAIF,iBAAiB,CAACD,MAAlB,IAA4B,CAAhC,EAAmC;AAC/B,QAAII,QAAQ,GAAGH,iBAAiB,CAAC,CAAD,CAAhC;AACA,WAAOG,QAAQ,IAAI,IAAnB;AACH;;AACD,SAAO,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAC5BL,IAAAA,iBAAiB,CAACM,OAAlB,CAA0B,UAAUC,QAAV,EAAoB;AAC1C,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAChCA,QAAAA,QAAQ,CAACF,GAAD,CAAR;AACH,OAFD,MAGK,IAAIE,QAAJ,EAAc;AACfA,QAAAA,QAAQ,CAACC,OAAT,GAAmBH,GAAnB;AACH;AACJ,KAPD;AAQH,GATD;AAUH","sourcesContent":["/**\n * A function that merges React refs into one.\n * Supports both functions and ref objects created using createRef() and useRef().\n *\n * Usage:\n * ```tsx\n * <div ref={mergeRefs(ref1, ref2, ref3)} />\n * ```\n *\n * @param {(React.Ref<T> | undefined)[]} inputRefs Array of refs\n * @returns {React.Ref<T> | React.RefCallback<T>} Merged refs\n */\nexport default function mergeRefs() {\n    var inputRefs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        inputRefs[_i] = arguments[_i];\n    }\n    var filteredInputRefs = inputRefs.filter(Boolean);\n    if (filteredInputRefs.length <= 1) {\n        var firstRef = filteredInputRefs[0];\n        return firstRef || null;\n    }\n    return function mergedRefs(ref) {\n        filteredInputRefs.forEach(function (inputRef) {\n            if (typeof inputRef === 'function') {\n                inputRef(ref);\n            }\n            else if (inputRef) {\n                inputRef.current = ref;\n            }\n        });\n    };\n}\n"]},"metadata":{},"sourceType":"module"}