{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * JavaScript code in this page\n *\n * Copyright 2023 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * JavaScript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = root.pdfjsLib = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf\", [], () => {\n    return root.pdfjsLib = factory();\n  });else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();else root[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();\n})(globalThis, () => {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = [\n        /* 0 */\n      ,\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.VerbosityLevel = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.RenderingIntentFlag = exports.PromiseCapability = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.MAX_IMAGE_SIZE_TO_CACHE = exports.LINE_FACTOR = exports.LINE_DESCENT_FACTOR = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FeatureTest = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.BASELINE_FACTOR = exports.AnnotationType = exports.AnnotationReplyType = exports.AnnotationPrefix = exports.AnnotationMode = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationEditorType = exports.AnnotationEditorPrefix = exports.AnnotationEditorParamsType = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.getModificationDate = getModificationDate;\n        exports.getUuid = getUuid;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isNodeJS = void 0;\n        exports.normalizeUnicode = normalizeUnicode;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n        const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        const MAX_IMAGE_SIZE_TO_CACHE = 10e6;\n        exports.MAX_IMAGE_SIZE_TO_CACHE = MAX_IMAGE_SIZE_TO_CACHE;\n        const LINE_FACTOR = 1.35;\n        exports.LINE_FACTOR = LINE_FACTOR;\n        const LINE_DESCENT_FACTOR = 0.35;\n        exports.LINE_DESCENT_FACTOR = LINE_DESCENT_FACTOR;\n        const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\n        exports.BASELINE_FACTOR = BASELINE_FACTOR;\n        const RenderingIntentFlag = {\n          ANY: 0x01,\n          DISPLAY: 0x02,\n          PRINT: 0x04,\n          SAVE: 0x08,\n          ANNOTATIONS_FORMS: 0x10,\n          ANNOTATIONS_STORAGE: 0x20,\n          ANNOTATIONS_DISABLE: 0x40,\n          OPLIST: 0x100\n        };\n        exports.RenderingIntentFlag = RenderingIntentFlag;\n        const AnnotationMode = {\n          DISABLE: 0,\n          ENABLE: 1,\n          ENABLE_FORMS: 2,\n          ENABLE_STORAGE: 3\n        };\n        exports.AnnotationMode = AnnotationMode;\n        const AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n        exports.AnnotationEditorPrefix = AnnotationEditorPrefix;\n        const AnnotationEditorType = {\n          DISABLE: -1,\n          NONE: 0,\n          FREETEXT: 3,\n          STAMP: 13,\n          INK: 15\n        };\n        exports.AnnotationEditorType = AnnotationEditorType;\n        const AnnotationEditorParamsType = {\n          RESIZE: 1,\n          CREATE: 2,\n          FREETEXT_SIZE: 11,\n          FREETEXT_COLOR: 12,\n          FREETEXT_OPACITY: 13,\n          INK_COLOR: 21,\n          INK_THICKNESS: 22,\n          INK_OPACITY: 23\n        };\n        exports.AnnotationEditorParamsType = AnnotationEditorParamsType;\n        const PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        const TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        const ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        const AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        const AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        const AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        const AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        const AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        const AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        const DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        const PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        const VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        const CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        const OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        const PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        let verbosity = VerbosityLevel.WARNINGS;\n\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(`Info: ${msg}`);\n          }\n        }\n\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(`Warning: ${msg}`);\n          }\n        }\n\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n\n        function _isValidProtocol(url) {\n          switch (url?.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function createValidAbsoluteUrl(url) {\n          let baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n          if (!url) {\n            return null;\n          }\n\n          try {\n            if (options && typeof url === \"string\") {\n              if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n                const dots = url.match(/\\./g);\n\n                if (dots?.length >= 2) {\n                  url = `http://${url}`;\n                }\n              }\n\n              if (options.tryConvertEncoding) {\n                try {\n                  url = stringToUTF8String(url);\n                } catch {}\n              }\n            }\n\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch {}\n\n          return null;\n        }\n\n        function shadow(obj, prop, value) {\n          let nonSerializable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n          Object.defineProperty(obj, prop, {\n            value,\n            enumerable: !nonSerializable,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n\n        const BaseException = function BaseExceptionClosure() {\n          function BaseException(message, name) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n\n            this.message = message;\n            this.name = name;\n          }\n\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n\n        exports.BaseException = BaseException;\n\n        class PasswordException extends BaseException {\n          constructor(msg, code) {\n            super(msg, \"PasswordException\");\n            this.code = code;\n          }\n\n        }\n\n        exports.PasswordException = PasswordException;\n\n        class UnknownErrorException extends BaseException {\n          constructor(msg, details) {\n            super(msg, \"UnknownErrorException\");\n            this.details = details;\n          }\n\n        }\n\n        exports.UnknownErrorException = UnknownErrorException;\n\n        class InvalidPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"InvalidPDFException\");\n          }\n\n        }\n\n        exports.InvalidPDFException = InvalidPDFException;\n\n        class MissingPDFException extends BaseException {\n          constructor(msg) {\n            super(msg, \"MissingPDFException\");\n          }\n\n        }\n\n        exports.MissingPDFException = MissingPDFException;\n\n        class UnexpectedResponseException extends BaseException {\n          constructor(msg, status) {\n            super(msg, \"UnexpectedResponseException\");\n            this.status = status;\n          }\n\n        }\n\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n\n        class FormatError extends BaseException {\n          constructor(msg) {\n            super(msg, \"FormatError\");\n          }\n\n        }\n\n        exports.FormatError = FormatError;\n\n        class AbortException extends BaseException {\n          constructor(msg) {\n            super(msg, \"AbortException\");\n          }\n\n        }\n\n        exports.AbortException = AbortException;\n\n        function bytesToString(bytes) {\n          if (typeof bytes !== \"object\" || bytes?.length === undefined) {\n            unreachable(\"Invalid argument for bytesToString\");\n          }\n\n          const length = bytes.length;\n          const MAX_ARGUMENT_COUNT = 8192;\n\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n\n          const strBuf = [];\n\n          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            const chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToBytes(str) {\n          if (typeof str !== \"string\") {\n            unreachable(\"Invalid argument for stringToBytes\");\n          }\n\n          const length = str.length;\n          const bytes = new Uint8Array(length);\n\n          for (let i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n\n          return bytes;\n        }\n\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n\n        function objectFromMap(map) {\n          const obj = Object.create(null);\n\n          for (const [key, value] of map) {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function isLittleEndian() {\n          const buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch {\n            return false;\n          }\n        }\n\n        class FeatureTest {\n          static get isLittleEndian() {\n            return shadow(this, \"isLittleEndian\", isLittleEndian());\n          }\n\n          static get isEvalSupported() {\n            return shadow(this, \"isEvalSupported\", isEvalSupported());\n          }\n\n          static get isOffscreenCanvasSupported() {\n            return shadow(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\n          }\n\n          static get platform() {\n            if (typeof navigator === \"undefined\") {\n              return shadow(this, \"platform\", {\n                isWin: false,\n                isMac: false\n              });\n            }\n\n            return shadow(this, \"platform\", {\n              isWin: navigator.platform.includes(\"Win\"),\n              isMac: navigator.platform.includes(\"Mac\")\n            });\n          }\n\n          static get isCSSRoundSupported() {\n            return shadow(this, \"isCSSRoundSupported\", globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\"));\n          }\n\n        }\n\n        exports.FeatureTest = FeatureTest;\n        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n        class Util {\n          static makeHexColor(r, g, b) {\n            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n          }\n\n          static scaleMinMax(transform, minMax) {\n            let temp;\n\n            if (transform[0]) {\n              if (transform[0] < 0) {\n                temp = minMax[0];\n                minMax[0] = minMax[1];\n                minMax[1] = temp;\n              }\n\n              minMax[0] *= transform[0];\n              minMax[1] *= transform[0];\n\n              if (transform[3] < 0) {\n                temp = minMax[2];\n                minMax[2] = minMax[3];\n                minMax[3] = temp;\n              }\n\n              minMax[2] *= transform[3];\n              minMax[3] *= transform[3];\n            } else {\n              temp = minMax[0];\n              minMax[0] = minMax[2];\n              minMax[2] = temp;\n              temp = minMax[1];\n              minMax[1] = minMax[3];\n              minMax[3] = temp;\n\n              if (transform[1] < 0) {\n                temp = minMax[2];\n                minMax[2] = minMax[3];\n                minMax[3] = temp;\n              }\n\n              minMax[2] *= transform[1];\n              minMax[3] *= transform[1];\n\n              if (transform[2] < 0) {\n                temp = minMax[0];\n                minMax[0] = minMax[1];\n                minMax[1] = temp;\n              }\n\n              minMax[0] *= transform[2];\n              minMax[1] *= transform[2];\n            }\n\n            minMax[0] += transform[4];\n            minMax[1] += transform[4];\n            minMax[2] += transform[5];\n            minMax[3] += transform[5];\n          }\n\n          static transform(m1, m2) {\n            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n          }\n\n          static applyTransform(p, m) {\n            const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n            const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n            return [xt, yt];\n          }\n\n          static applyInverseTransform(p, m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n            return [xt, yt];\n          }\n\n          static getAxialAlignedBoundingBox(r, m) {\n            const p1 = this.applyTransform(r, m);\n            const p2 = this.applyTransform(r.slice(2, 4), m);\n            const p3 = this.applyTransform([r[0], r[3]], m);\n            const p4 = this.applyTransform([r[2], r[1]], m);\n            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n          }\n\n          static inverseTransform(m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n          }\n\n          static singularValueDecompose2dScale(m) {\n            const transpose = [m[0], m[2], m[1], m[3]];\n            const a = m[0] * transpose[0] + m[1] * transpose[2];\n            const b = m[0] * transpose[1] + m[1] * transpose[3];\n            const c = m[2] * transpose[0] + m[3] * transpose[2];\n            const d = m[2] * transpose[1] + m[3] * transpose[3];\n            const first = (a + d) / 2;\n            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n            const sx = first + second || 1;\n            const sy = first - second || 1;\n            return [Math.sqrt(sx), Math.sqrt(sy)];\n          }\n\n          static normalizeRect(rect) {\n            const r = rect.slice(0);\n\n            if (rect[0] > rect[2]) {\n              r[0] = rect[2];\n              r[2] = rect[0];\n            }\n\n            if (rect[1] > rect[3]) {\n              r[1] = rect[3];\n              r[3] = rect[1];\n            }\n\n            return r;\n          }\n\n          static intersect(rect1, rect2) {\n            const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));\n            const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));\n\n            if (xLow > xHigh) {\n              return null;\n            }\n\n            const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));\n            const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));\n\n            if (yLow > yHigh) {\n              return null;\n            }\n\n            return [xLow, yLow, xHigh, yHigh];\n          }\n\n          static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n            const tvalues = [],\n                  bounds = [[], []];\n            let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n\n            for (let i = 0; i < 2; ++i) {\n              if (i === 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n              } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n              }\n\n              if (Math.abs(a) < 1e-12) {\n                if (Math.abs(b) < 1e-12) {\n                  continue;\n                }\n\n                t = -c / b;\n\n                if (0 < t && t < 1) {\n                  tvalues.push(t);\n                }\n\n                continue;\n              }\n\n              b2ac = b * b - 4 * c * a;\n              sqrtb2ac = Math.sqrt(b2ac);\n\n              if (b2ac < 0) {\n                continue;\n              }\n\n              t1 = (-b + sqrtb2ac) / (2 * a);\n\n              if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n              }\n\n              t2 = (-b - sqrtb2ac) / (2 * a);\n\n              if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n              }\n            }\n\n            let j = tvalues.length,\n                mt;\n            const jlen = j;\n\n            while (j--) {\n              t = tvalues[j];\n              mt = 1 - t;\n              bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n              bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n            }\n\n            bounds[0][jlen] = x0;\n            bounds[1][jlen] = y0;\n            bounds[0][jlen + 1] = x3;\n            bounds[1][jlen + 1] = y3;\n            bounds[0].length = bounds[1].length = jlen + 2;\n            return [Math.min(...bounds[0]), Math.min(...bounds[1]), Math.max(...bounds[0]), Math.max(...bounds[1])];\n          }\n\n        }\n\n        exports.Util = Util;\n        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\n\n        function stringToPDFString(str) {\n          if (str[0] >= \"\\xEF\") {\n            let encoding;\n\n            if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n              encoding = \"utf-16be\";\n            } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n              encoding = \"utf-16le\";\n            } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\n              encoding = \"utf-8\";\n            }\n\n            if (encoding) {\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const buffer = stringToBytes(str);\n                return decoder.decode(buffer);\n              } catch (ex) {\n                warn(`stringToPDFString: \"${ex}\".`);\n              }\n            }\n          }\n\n          const strBuf = [];\n\n          for (let i = 0, ii = str.length; i < ii; i++) {\n            const code = PDFStringTranslateTable[str.charCodeAt(i)];\n            strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v?.byteLength !== undefined;\n        }\n\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n\n          for (let i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function getModificationDate() {\n          let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n\n        class PromiseCapability {\n          #settled = false;\n\n          constructor() {\n            this.promise = new Promise((resolve, reject) => {\n              this.resolve = data => {\n                this.#settled = true;\n                resolve(data);\n              };\n\n              this.reject = reason => {\n                this.#settled = true;\n                reject(reason);\n              };\n            });\n          }\n\n          get settled() {\n            return this.#settled;\n          }\n\n        }\n\n        exports.PromiseCapability = PromiseCapability;\n        let NormalizeRegex = null;\n        let NormalizationMap = null;\n\n        function normalizeUnicode(str) {\n          if (!NormalizeRegex) {\n            NormalizeRegex = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n            NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\n          }\n\n          return str.replaceAll(NormalizeRegex, (_, p1, p2) => {\n            return p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2);\n          });\n        }\n\n        function getUuid() {\n          if (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\") {\n            return crypto.randomUUID();\n          }\n\n          const buf = new Uint8Array(32);\n\n          if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues === \"function\") {\n            crypto.getRandomValues(buf);\n          } else {\n            for (let i = 0; i < 32; i++) {\n              buf[i] = Math.floor(Math.random() * 255);\n            }\n          }\n\n          return bytesToString(buf);\n        }\n\n        const AnnotationPrefix = \"pdfjs_internal_id_\";\n        exports.AnnotationPrefix = AnnotationPrefix;\n        /***/\n      },\n      /* 2 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultFilterFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _displaySvg.SVGGraphics;\n          }\n        });\n        exports.build = void 0;\n        exports.getDocument = getDocument;\n        exports.version = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _annotation_storage = __w_pdfjs_require__(3);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _font_loader = __w_pdfjs_require__(9);\n\n        var _displayNode_utils = __w_pdfjs_require__(10);\n\n        var _canvas = __w_pdfjs_require__(11);\n\n        var _worker_options = __w_pdfjs_require__(14);\n\n        var _message_handler = __w_pdfjs_require__(15);\n\n        var _metadata = __w_pdfjs_require__(16);\n\n        var _optional_content_config = __w_pdfjs_require__(17);\n\n        var _transport_stream = __w_pdfjs_require__(18);\n\n        var _displayFetch_stream = __w_pdfjs_require__(19);\n\n        var _displayNetwork = __w_pdfjs_require__(22);\n\n        var _displayNode_stream = __w_pdfjs_require__(23);\n\n        var _displaySvg = __w_pdfjs_require__(24);\n\n        var _xfa_text = __w_pdfjs_require__(25);\n\n        const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n        const RENDERING_CANCELLED_TIMEOUT = 100;\n        const DELAYED_CLEANUP_TIMEOUT = 5000;\n        const DefaultCanvasFactory = _util.isNodeJS ? _displayNode_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n        exports.DefaultCanvasFactory = DefaultCanvasFactory;\n        const DefaultCMapReaderFactory = _util.isNodeJS ? _displayNode_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n        const DefaultFilterFactory = _util.isNodeJS ? _displayNode_utils.NodeFilterFactory : _display_utils.DOMFilterFactory;\n        exports.DefaultFilterFactory = DefaultFilterFactory;\n        const DefaultStandardFontDataFactory = _util.isNodeJS ? _displayNode_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;\n        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;\n\n        function getDocument(src) {\n          if (typeof src === \"string\" || src instanceof URL) {\n            src = {\n              url: src\n            };\n          } else if ((0, _util.isArrayBuffer)(src)) {\n            src = {\n              data: src\n            };\n          }\n\n          if (typeof src !== \"object\") {\n            throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\n          }\n\n          if (!src.url && !src.data && !src.range) {\n            throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n          }\n\n          const task = new PDFDocumentLoadingTask();\n          const {\n            docId\n          } = task;\n          const url = src.url ? getUrlProp(src.url) : null;\n          const data = src.data ? getDataProp(src.data) : null;\n          const httpHeaders = src.httpHeaders || null;\n          const withCredentials = src.withCredentials === true;\n          const password = src.password ?? null;\n          const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;\n          const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;\n          let worker = src.worker instanceof PDFWorker ? src.worker : null;\n          const verbosity = src.verbosity;\n          const docBaseUrl = typeof src.docBaseUrl === \"string\" && !(0, _display_utils.isDataScheme)(src.docBaseUrl) ? src.docBaseUrl : null;\n          const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n          const cMapPacked = src.cMapPacked !== false;\n          const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n          const standardFontDataUrl = typeof src.standardFontDataUrl === \"string\" ? src.standardFontDataUrl : null;\n          const StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n          const ignoreErrors = src.stopAtErrors !== true;\n          const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;\n          const isEvalSupported = src.isEvalSupported !== false;\n          const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === \"boolean\" ? src.isOffscreenCanvasSupported : !_util.isNodeJS;\n          const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;\n          const disableFontFace = typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : _util.isNodeJS;\n          const fontExtraProperties = src.fontExtraProperties === true;\n          const enableXfa = src.enableXfa === true;\n          const ownerDocument = src.ownerDocument || globalThis.document;\n          const disableRange = src.disableRange === true;\n          const disableStream = src.disableStream === true;\n          const disableAutoFetch = src.disableAutoFetch === true;\n          const pdfBug = src.pdfBug === true;\n          const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\n          const useSystemFonts = typeof src.useSystemFonts === \"boolean\" ? src.useSystemFonts : !_util.isNodeJS && !disableFontFace;\n          const useWorkerFetch = typeof src.useWorkerFetch === \"boolean\" ? src.useWorkerFetch : CMapReaderFactory === _display_utils.DOMCMapReaderFactory && StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory && cMapUrl && standardFontDataUrl && (0, _display_utils.isValidFetchUrl)(cMapUrl, document.baseURI) && (0, _display_utils.isValidFetchUrl)(standardFontDataUrl, document.baseURI);\n          const canvasFactory = src.canvasFactory || new DefaultCanvasFactory({\n            ownerDocument\n          });\n          const filterFactory = src.filterFactory || new DefaultFilterFactory({\n            docId,\n            ownerDocument\n          });\n          const styleElement = null;\n          (0, _util.setVerbosityLevel)(verbosity);\n          const transportFactory = {\n            canvasFactory,\n            filterFactory\n          };\n\n          if (!useWorkerFetch) {\n            transportFactory.cMapReaderFactory = new CMapReaderFactory({\n              baseUrl: cMapUrl,\n              isCompressed: cMapPacked\n            });\n            transportFactory.standardFontDataFactory = new StandardFontDataFactory({\n              baseUrl: standardFontDataUrl\n            });\n          }\n\n          if (!worker) {\n            const workerParams = {\n              verbosity,\n              port: _worker_options.GlobalWorkerOptions.workerPort\n            };\n            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n            task._worker = worker;\n          }\n\n          const fetchDocParams = {\n            docId,\n            apiVersion: '3.11.174',\n            data,\n            password,\n            disableAutoFetch,\n            rangeChunkSize,\n            length,\n            docBaseUrl,\n            enableXfa,\n            evaluatorOptions: {\n              maxImageSize,\n              disableFontFace,\n              ignoreErrors,\n              isEvalSupported,\n              isOffscreenCanvasSupported,\n              canvasMaxAreaInBytes,\n              fontExtraProperties,\n              useSystemFonts,\n              cMapUrl: useWorkerFetch ? cMapUrl : null,\n              standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null\n            }\n          };\n          const transportParams = {\n            ignoreErrors,\n            isEvalSupported,\n            disableFontFace,\n            fontExtraProperties,\n            enableXfa,\n            ownerDocument,\n            disableAutoFetch,\n            pdfBug,\n            styleElement\n          };\n          worker.promise.then(function () {\n            if (task.destroyed) {\n              throw new Error(\"Loading aborted\");\n            }\n\n            const workerIdPromise = _fetchDocument(worker, fetchDocParams);\n\n            const networkStreamPromise = new Promise(function (resolve) {\n              let networkStream;\n\n              if (rangeTransport) {\n                networkStream = new _transport_stream.PDFDataTransportStream({\n                  length,\n                  initialData: rangeTransport.initialData,\n                  progressiveDone: rangeTransport.progressiveDone,\n                  contentDispositionFilename: rangeTransport.contentDispositionFilename,\n                  disableRange,\n                  disableStream\n                }, rangeTransport);\n              } else if (!data) {\n                const createPDFNetworkStream = params => {\n                  if (_util.isNodeJS) {\n                    return new _displayNode_stream.PDFNodeStream(params);\n                  }\n\n                  return (0, _display_utils.isValidFetchUrl)(params.url) ? new _displayFetch_stream.PDFFetchStream(params) : new _displayNetwork.PDFNetworkStream(params);\n                };\n\n                networkStream = createPDFNetworkStream({\n                  url,\n                  length,\n                  httpHeaders,\n                  withCredentials,\n                  rangeChunkSize,\n                  disableRange,\n                  disableStream\n                });\n              }\n\n              resolve(networkStream);\n            });\n            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref) {\n              let [workerId, networkStream] = _ref;\n\n              if (task.destroyed) {\n                throw new Error(\"Loading aborted\");\n              }\n\n              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n              const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);\n              task._transport = transport;\n              messageHandler.send(\"Ready\", null);\n            });\n          }).catch(task._capability.reject);\n          return task;\n        }\n\n        async function _fetchDocument(worker, source) {\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          const workerId = await worker.messageHandler.sendWithPromise(\"GetDocRequest\", source, source.data ? [source.data.buffer] : null);\n\n          if (worker.destroyed) {\n            throw new Error(\"Worker was destroyed\");\n          }\n\n          return workerId;\n        }\n\n        function getUrlProp(val) {\n          if (val instanceof URL) {\n            return val.href;\n          }\n\n          try {\n            return new URL(val, window.location).href;\n          } catch {\n            if (_util.isNodeJS && typeof val === \"string\") {\n              return val;\n            }\n          }\n\n          throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n        }\n\n        function getDataProp(val) {\n          if (_util.isNodeJS && typeof Buffer !== \"undefined\" && val instanceof Buffer) {\n            throw new Error(\"Please provide binary data as `Uint8Array`, rather than `Buffer`.\");\n          }\n\n          if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n            return val;\n          }\n\n          if (typeof val === \"string\") {\n            return (0, _util.stringToBytes)(val);\n          }\n\n          if (typeof val === \"object\" && !isNaN(val?.length) || (0, _util.isArrayBuffer)(val)) {\n            return new Uint8Array(val);\n          }\n\n          throw new Error(\"Invalid PDF binary data: either TypedArray, \" + \"string, or array-like object is expected in the data property.\");\n        }\n\n        class PDFDocumentLoadingTask {\n          static #docId = 0;\n\n          constructor() {\n            this._capability = new _util.PromiseCapability();\n            this._transport = null;\n            this._worker = null;\n            this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n            this.destroyed = false;\n            this.onPassword = null;\n            this.onProgress = null;\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          async destroy() {\n            this.destroyed = true;\n\n            try {\n              if (this._worker?.port) {\n                this._worker._pendingDestroy = true;\n              }\n\n              await this._transport?.destroy();\n            } catch (ex) {\n              if (this._worker?.port) {\n                delete this._worker._pendingDestroy;\n              }\n\n              throw ex;\n            }\n\n            this._transport = null;\n\n            if (this._worker) {\n              this._worker.destroy();\n\n              this._worker = null;\n            }\n          }\n\n        }\n\n        exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;\n\n        class PDFDataRangeTransport {\n          constructor(length, initialData) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this.length = length;\n            this.initialData = initialData;\n            this.progressiveDone = progressiveDone;\n            this.contentDispositionFilename = contentDispositionFilename;\n            this._rangeListeners = [];\n            this._progressListeners = [];\n            this._progressiveReadListeners = [];\n            this._progressiveDoneListeners = [];\n            this._readyCapability = new _util.PromiseCapability();\n          }\n\n          addRangeListener(listener) {\n            this._rangeListeners.push(listener);\n          }\n\n          addProgressListener(listener) {\n            this._progressListeners.push(listener);\n          }\n\n          addProgressiveReadListener(listener) {\n            this._progressiveReadListeners.push(listener);\n          }\n\n          addProgressiveDoneListener(listener) {\n            this._progressiveDoneListeners.push(listener);\n          }\n\n          onDataRange(begin, chunk) {\n            for (const listener of this._rangeListeners) {\n              listener(begin, chunk);\n            }\n          }\n\n          onDataProgress(loaded, total) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressListeners) {\n                listener(loaded, total);\n              }\n            });\n          }\n\n          onDataProgressiveRead(chunk) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveReadListeners) {\n                listener(chunk);\n              }\n            });\n          }\n\n          onDataProgressiveDone() {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveDoneListeners) {\n                listener();\n              }\n            });\n          }\n\n          transportReady() {\n            this._readyCapability.resolve();\n          }\n\n          requestDataRange(begin, end) {\n            (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n          }\n\n          abort() {}\n\n        }\n\n        exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n        class PDFDocumentProxy {\n          constructor(pdfInfo, transport) {\n            this._pdfInfo = pdfInfo;\n            this._transport = transport;\n            Object.defineProperty(this, \"getJavaScript\", {\n              value: () => {\n                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.getJavaScript`, \" + \"please use `PDFDocumentProxy.getJSActions` instead.\");\n                return this.getJSActions().then(js => {\n                  if (!js) {\n                    return js;\n                  }\n\n                  const jsArr = [];\n\n                  for (const name in js) {\n                    jsArr.push(...js[name]);\n                  }\n\n                  return jsArr;\n                });\n              }\n            });\n          }\n\n          get annotationStorage() {\n            return this._transport.annotationStorage;\n          }\n\n          get filterFactory() {\n            return this._transport.filterFactory;\n          }\n\n          get numPages() {\n            return this._pdfInfo.numPages;\n          }\n\n          get fingerprints() {\n            return this._pdfInfo.fingerprints;\n          }\n\n          get isPureXfa() {\n            return (0, _util.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n          }\n\n          get allXfaHtml() {\n            return this._transport._htmlForXfa;\n          }\n\n          getPage(pageNumber) {\n            return this._transport.getPage(pageNumber);\n          }\n\n          getPageIndex(ref) {\n            return this._transport.getPageIndex(ref);\n          }\n\n          getDestinations() {\n            return this._transport.getDestinations();\n          }\n\n          getDestination(id) {\n            return this._transport.getDestination(id);\n          }\n\n          getPageLabels() {\n            return this._transport.getPageLabels();\n          }\n\n          getPageLayout() {\n            return this._transport.getPageLayout();\n          }\n\n          getPageMode() {\n            return this._transport.getPageMode();\n          }\n\n          getViewerPreferences() {\n            return this._transport.getViewerPreferences();\n          }\n\n          getOpenAction() {\n            return this._transport.getOpenAction();\n          }\n\n          getAttachments() {\n            return this._transport.getAttachments();\n          }\n\n          getJSActions() {\n            return this._transport.getDocJSActions();\n          }\n\n          getOutline() {\n            return this._transport.getOutline();\n          }\n\n          getOptionalContentConfig() {\n            return this._transport.getOptionalContentConfig();\n          }\n\n          getPermissions() {\n            return this._transport.getPermissions();\n          }\n\n          getMetadata() {\n            return this._transport.getMetadata();\n          }\n\n          getMarkInfo() {\n            return this._transport.getMarkInfo();\n          }\n\n          getData() {\n            return this._transport.getData();\n          }\n\n          saveDocument() {\n            return this._transport.saveDocument();\n          }\n\n          getDownloadInfo() {\n            return this._transport.downloadInfoCapability.promise;\n          }\n\n          cleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n          }\n\n          destroy() {\n            return this.loadingTask.destroy();\n          }\n\n          get loadingParams() {\n            return this._transport.loadingParams;\n          }\n\n          get loadingTask() {\n            return this._transport.loadingTask;\n          }\n\n          getFieldObjects() {\n            return this._transport.getFieldObjects();\n          }\n\n          hasJSActions() {\n            return this._transport.hasJSActions();\n          }\n\n          getCalculationOrderIds() {\n            return this._transport.getCalculationOrderIds();\n          }\n\n        }\n\n        exports.PDFDocumentProxy = PDFDocumentProxy;\n\n        class PDFPageProxy {\n          #delayedCleanupTimeout = null;\n          #pendingCleanup = false;\n\n          constructor(pageIndex, pageInfo, transport) {\n            let pdfBug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            this._pageIndex = pageIndex;\n            this._pageInfo = pageInfo;\n            this._transport = transport;\n            this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n            this._pdfBug = pdfBug;\n            this.commonObjs = transport.commonObjs;\n            this.objs = new PDFObjects();\n            this._maybeCleanupAfterRender = false;\n            this._intentStates = new Map();\n            this.destroyed = false;\n          }\n\n          get pageNumber() {\n            return this._pageIndex + 1;\n          }\n\n          get rotate() {\n            return this._pageInfo.rotate;\n          }\n\n          get ref() {\n            return this._pageInfo.ref;\n          }\n\n          get userUnit() {\n            return this._pageInfo.userUnit;\n          }\n\n          get view() {\n            return this._pageInfo.view;\n          }\n\n          getViewport() {\n            let {\n              scale,\n              rotation = this.rotate,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new _display_utils.PageViewport({\n              viewBox: this.view,\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          getAnnotations() {\n            let {\n              intent = \"display\"\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            const intentArgs = this._transport.getRenderingIntent(intent);\n\n            return this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);\n          }\n\n          getJSActions() {\n            return this._transport.getPageJSActions(this._pageIndex);\n          }\n\n          get filterFactory() {\n            return this._transport.filterFactory;\n          }\n\n          get isPureXfa() {\n            return (0, _util.shadow)(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n          }\n\n          async getXfa() {\n            return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n          }\n\n          render(_ref2) {\n            let {\n              canvasContext,\n              viewport,\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE,\n              transform = null,\n              background = null,\n              optionalContentConfigPromise = null,\n              annotationCanvasMap = null,\n              pageColors = null,\n              printAnnotationStorage = null\n            } = _ref2;\n            this._stats?.time(\"Overall\");\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage);\n\n            this.#pendingCleanup = false;\n            this.#abortDelayedCleanup();\n\n            if (!optionalContentConfigPromise) {\n              optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n            }\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            const intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);\n\n            if (!intentState.displayReadyCapability) {\n              intentState.displayReadyCapability = new _util.PromiseCapability();\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false,\n                separateAnnots: null\n              };\n              this._stats?.time(\"Page Request\");\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            const complete = error => {\n              intentState.renderTasks.delete(internalRenderTask);\n\n              if (this._maybeCleanupAfterRender || intentPrint) {\n                this.#pendingCleanup = true;\n              }\n\n              this.#tryCleanup(!intentPrint);\n\n              if (error) {\n                internalRenderTask.capability.reject(error);\n\n                this._abortOperatorList({\n                  intentState,\n                  reason: error instanceof Error ? error : new Error(error)\n                });\n              } else {\n                internalRenderTask.capability.resolve();\n              }\n\n              this._stats?.timeEnd(\"Rendering\");\n              this._stats?.timeEnd(\"Overall\");\n            };\n\n            const internalRenderTask = new InternalRenderTask({\n              callback: complete,\n              params: {\n                canvasContext,\n                viewport,\n                transform,\n                background\n              },\n              objs: this.objs,\n              commonObjs: this.commonObjs,\n              annotationCanvasMap,\n              operatorList: intentState.operatorList,\n              pageIndex: this._pageIndex,\n              canvasFactory: this._transport.canvasFactory,\n              filterFactory: this._transport.filterFactory,\n              useRequestAnimationFrame: !intentPrint,\n              pdfBug: this._pdfBug,\n              pageColors\n            });\n            (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n            const renderTask = internalRenderTask.task;\n            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(_ref3 => {\n              let [transparency, optionalContentConfig] = _ref3;\n\n              if (this.destroyed) {\n                complete();\n                return;\n              }\n\n              this._stats?.time(\"Rendering\");\n              internalRenderTask.initializeGraphics({\n                transparency,\n                optionalContentConfig\n              });\n              internalRenderTask.operatorListChanged();\n            }).catch(complete);\n            return renderTask;\n          }\n\n          getOperatorList() {\n            let {\n              intent = \"display\",\n              annotationMode = _util.AnnotationMode.ENABLE,\n              printAnnotationStorage = null\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            function operatorListChanged() {\n              if (intentState.operatorList.lastChunk) {\n                intentState.opListReadCapability.resolve(intentState.operatorList);\n                intentState.renderTasks.delete(opListTask);\n              }\n            }\n\n            const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, true);\n\n            let intentState = this._intentStates.get(intentArgs.cacheKey);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(intentArgs.cacheKey, intentState);\n            }\n\n            let opListTask;\n\n            if (!intentState.opListReadCapability) {\n              opListTask = Object.create(null);\n              opListTask.operatorListChanged = operatorListChanged;\n              intentState.opListReadCapability = new _util.PromiseCapability();\n              (intentState.renderTasks ||= new Set()).add(opListTask);\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false,\n                separateAnnots: null\n              };\n              this._stats?.time(\"Page Request\");\n\n              this._pumpOperatorList(intentArgs);\n            }\n\n            return intentState.opListReadCapability.promise;\n          }\n\n          streamTextContent() {\n            let {\n              includeMarkedContent = false,\n              disableNormalization = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const TEXT_CONTENT_CHUNK_SIZE = 100;\n            return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n              pageIndex: this._pageIndex,\n              includeMarkedContent: includeMarkedContent === true,\n              disableNormalization: disableNormalization === true\n            }, {\n              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n              size(textContent) {\n                return textContent.items.length;\n              }\n\n            });\n          }\n\n          getTextContent() {\n            let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            if (this._transport._htmlForXfa) {\n              return this.getXfa().then(xfa => {\n                return _xfa_text.XfaText.textContent(xfa);\n              });\n            }\n\n            const readableStream = this.streamTextContent(params);\n            return new Promise(function (resolve, reject) {\n              function pump() {\n                reader.read().then(function (_ref4) {\n                  let {\n                    value,\n                    done\n                  } = _ref4;\n\n                  if (done) {\n                    resolve(textContent);\n                    return;\n                  }\n\n                  Object.assign(textContent.styles, value.styles);\n                  textContent.items.push(...value.items);\n                  pump();\n                }, reject);\n              }\n\n              const reader = readableStream.getReader();\n              const textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              pump();\n            });\n          }\n\n          getStructTree() {\n            return this._transport.getStructTree(this._pageIndex);\n          }\n\n          _destroy() {\n            this.destroyed = true;\n            const waitOn = [];\n\n            for (const intentState of this._intentStates.values()) {\n              this._abortOperatorList({\n                intentState,\n                reason: new Error(\"Page was destroyed.\"),\n                force: true\n              });\n\n              if (intentState.opListReadCapability) {\n                continue;\n              }\n\n              for (const internalRenderTask of intentState.renderTasks) {\n                waitOn.push(internalRenderTask.completed);\n                internalRenderTask.cancel();\n              }\n            }\n\n            this.objs.clear();\n            this.#pendingCleanup = false;\n            this.#abortDelayedCleanup();\n            return Promise.all(waitOn);\n          }\n\n          cleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.#pendingCleanup = true;\n            const success = this.#tryCleanup(false);\n\n            if (resetStats && success) {\n              this._stats &&= new _display_utils.StatTimer();\n            }\n\n            return success;\n          }\n\n          #tryCleanup() {\n            let delayed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.#abortDelayedCleanup();\n\n            if (!this.#pendingCleanup || this.destroyed) {\n              return false;\n            }\n\n            if (delayed) {\n              this.#delayedCleanupTimeout = setTimeout(() => {\n                this.#delayedCleanupTimeout = null;\n                this.#tryCleanup(false);\n              }, DELAYED_CLEANUP_TIMEOUT);\n              return false;\n            }\n\n            for (const {\n              renderTasks,\n              operatorList\n            } of this._intentStates.values()) {\n              if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                return false;\n              }\n            }\n\n            this._intentStates.clear();\n\n            this.objs.clear();\n            this.#pendingCleanup = false;\n            return true;\n          }\n\n          #abortDelayedCleanup() {\n            if (this.#delayedCleanupTimeout) {\n              clearTimeout(this.#delayedCleanupTimeout);\n              this.#delayedCleanupTimeout = null;\n            }\n          }\n\n          _startRenderPage(transparency, cacheKey) {\n            const intentState = this._intentStates.get(cacheKey);\n\n            if (!intentState) {\n              return;\n            }\n\n            this._stats?.timeEnd(\"Page Request\");\n            intentState.displayReadyCapability?.resolve(transparency);\n          }\n\n          _renderPageChunk(operatorListChunk, intentState) {\n            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n            }\n\n            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n            intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n\n            if (operatorListChunk.lastChunk) {\n              this.#tryCleanup(true);\n            }\n          }\n\n          _pumpOperatorList(_ref5) {\n            let {\n              renderingIntent,\n              cacheKey,\n              annotationStorageSerializable\n            } = _ref5;\n            const {\n              map,\n              transfers\n            } = annotationStorageSerializable;\n\n            const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n              pageIndex: this._pageIndex,\n              intent: renderingIntent,\n              cacheKey,\n              annotationStorage: map\n            }, transfers);\n\n            const reader = readableStream.getReader();\n\n            const intentState = this._intentStates.get(cacheKey);\n\n            intentState.streamReader = reader;\n\n            const pump = () => {\n              reader.read().then(_ref6 => {\n                let {\n                  value,\n                  done\n                } = _ref6;\n\n                if (done) {\n                  intentState.streamReader = null;\n                  return;\n                }\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                this._renderPageChunk(value, intentState);\n\n                pump();\n              }, reason => {\n                intentState.streamReader = null;\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                if (intentState.operatorList) {\n                  intentState.operatorList.lastChunk = true;\n\n                  for (const internalRenderTask of intentState.renderTasks) {\n                    internalRenderTask.operatorListChanged();\n                  }\n\n                  this.#tryCleanup(true);\n                }\n\n                if (intentState.displayReadyCapability) {\n                  intentState.displayReadyCapability.reject(reason);\n                } else if (intentState.opListReadCapability) {\n                  intentState.opListReadCapability.reject(reason);\n                } else {\n                  throw reason;\n                }\n              });\n            };\n\n            pump();\n          }\n\n          _abortOperatorList(_ref7) {\n            let {\n              intentState,\n              reason,\n              force = false\n            } = _ref7;\n\n            if (!intentState.streamReader) {\n              return;\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            if (!force) {\n              if (intentState.renderTasks.size > 0) {\n                return;\n              }\n\n              if (reason instanceof _display_utils.RenderingCancelledException) {\n                let delay = RENDERING_CANCELLED_TIMEOUT;\n\n                if (reason.extraDelay > 0 && reason.extraDelay < 1000) {\n                  delay += reason.extraDelay;\n                }\n\n                intentState.streamReaderCancelTimeout = setTimeout(() => {\n                  intentState.streamReaderCancelTimeout = null;\n\n                  this._abortOperatorList({\n                    intentState,\n                    reason,\n                    force: true\n                  });\n                }, delay);\n                return;\n              }\n            }\n\n            intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(() => {});\n            intentState.streamReader = null;\n\n            if (this._transport.destroyed) {\n              return;\n            }\n\n            for (const [curCacheKey, curIntentState] of this._intentStates) {\n              if (curIntentState === intentState) {\n                this._intentStates.delete(curCacheKey);\n\n                break;\n              }\n            }\n\n            this.cleanup();\n          }\n\n          get stats() {\n            return this._stats;\n          }\n\n        }\n\n        exports.PDFPageProxy = PDFPageProxy;\n\n        class LoopbackPort {\n          #listeners = new Set();\n          #deferred = Promise.resolve();\n\n          postMessage(obj, transfer) {\n            const event = {\n              data: structuredClone(obj, transfer ? {\n                transfer\n              } : null)\n            };\n            this.#deferred.then(() => {\n              for (const listener of this.#listeners) {\n                listener.call(this, event);\n              }\n            });\n          }\n\n          addEventListener(name, listener) {\n            this.#listeners.add(listener);\n          }\n\n          removeEventListener(name, listener) {\n            this.#listeners.delete(listener);\n          }\n\n          terminate() {\n            this.#listeners.clear();\n          }\n\n        }\n\n        exports.LoopbackPort = LoopbackPort;\n        const PDFWorkerUtil = {\n          isWorkerDisabled: false,\n          fallbackWorkerSrc: null,\n          fakeWorkerId: 0\n        };\n        exports.PDFWorkerUtil = PDFWorkerUtil;\n        {\n          if (_util.isNodeJS && typeof require === \"function\") {\n            PDFWorkerUtil.isWorkerDisabled = true;\n            PDFWorkerUtil.fallbackWorkerSrc = \"./pdf.worker.js\";\n          } else if (typeof document === \"object\") {\n            const pdfjsFilePath = document?.currentScript?.src;\n\n            if (pdfjsFilePath) {\n              PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n            }\n          }\n\n          PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {\n            let base;\n\n            try {\n              base = new URL(baseUrl);\n\n              if (!base.origin || base.origin === \"null\") {\n                return false;\n              }\n            } catch {\n              return false;\n            }\n\n            const other = new URL(otherUrl, base);\n            return base.origin === other.origin;\n          };\n\n          PDFWorkerUtil.createCDNWrapper = function (url) {\n            const wrapper = `importScripts(\"${url}\");`;\n            return URL.createObjectURL(new Blob([wrapper]));\n          };\n        }\n\n        class PDFWorker {\n          static #workerPorts;\n\n          constructor() {\n            let {\n              name = null,\n              port = null,\n              verbosity = (0, _util.getVerbosityLevel)()\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            this.name = name;\n            this.destroyed = false;\n            this.verbosity = verbosity;\n            this._readyCapability = new _util.PromiseCapability();\n            this._port = null;\n            this._webWorker = null;\n            this._messageHandler = null;\n\n            if (port) {\n              if (PDFWorker.#workerPorts?.has(port)) {\n                throw new Error(\"Cannot use more than one PDFWorker per port.\");\n              }\n\n              (PDFWorker.#workerPorts ||= new WeakMap()).set(port, this);\n\n              this._initializeFromPort(port);\n\n              return;\n            }\n\n            this._initialize();\n          }\n\n          get promise() {\n            return this._readyCapability.promise;\n          }\n\n          get port() {\n            return this._port;\n          }\n\n          get messageHandler() {\n            return this._messageHandler;\n          }\n\n          _initializeFromPort(port) {\n            this._port = port;\n            this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n            this._messageHandler.on(\"ready\", function () {});\n\n            this._readyCapability.resolve();\n\n            this._messageHandler.send(\"configure\", {\n              verbosity: this.verbosity\n            });\n          }\n\n          _initialize() {\n            if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {\n              let {\n                workerSrc\n              } = PDFWorker;\n\n              try {\n                if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)) {\n                  workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);\n                }\n\n                const worker = new Worker(workerSrc);\n                const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n                const terminateEarly = () => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n                  messageHandler.destroy();\n                  worker.terminate();\n\n                  if (this.destroyed) {\n                    this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                  } else {\n                    this._setupFakeWorker();\n                  }\n                };\n\n                const onWorkerError = () => {\n                  if (!this._webWorker) {\n                    terminateEarly();\n                  }\n                };\n\n                worker.addEventListener(\"error\", onWorkerError);\n                messageHandler.on(\"test\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  if (data) {\n                    this._messageHandler = messageHandler;\n                    this._port = worker;\n                    this._webWorker = worker;\n\n                    this._readyCapability.resolve();\n\n                    messageHandler.send(\"configure\", {\n                      verbosity: this.verbosity\n                    });\n                  } else {\n                    this._setupFakeWorker();\n\n                    messageHandler.destroy();\n                    worker.terminate();\n                  }\n                });\n                messageHandler.on(\"ready\", data => {\n                  worker.removeEventListener(\"error\", onWorkerError);\n\n                  if (this.destroyed) {\n                    terminateEarly();\n                    return;\n                  }\n\n                  try {\n                    sendTest();\n                  } catch {\n                    this._setupFakeWorker();\n                  }\n                });\n\n                const sendTest = () => {\n                  const testObj = new Uint8Array();\n                  messageHandler.send(\"test\", testObj, [testObj.buffer]);\n                };\n\n                sendTest();\n                return;\n              } catch {\n                (0, _util.info)(\"The worker has been disabled.\");\n              }\n            }\n\n            this._setupFakeWorker();\n          }\n\n          _setupFakeWorker() {\n            if (!PDFWorkerUtil.isWorkerDisabled) {\n              (0, _util.warn)(\"Setting up fake worker.\");\n              PDFWorkerUtil.isWorkerDisabled = true;\n            }\n\n            PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\n              if (this.destroyed) {\n                this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n                return;\n              }\n\n              const port = new LoopbackPort();\n              this._port = port;\n              const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n              const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n              WorkerMessageHandler.setup(workerHandler, port);\n              const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n              this._messageHandler = messageHandler;\n\n              this._readyCapability.resolve();\n\n              messageHandler.send(\"configure\", {\n                verbosity: this.verbosity\n              });\n            }).catch(reason => {\n              this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n            });\n          }\n\n          destroy() {\n            this.destroyed = true;\n\n            if (this._webWorker) {\n              this._webWorker.terminate();\n\n              this._webWorker = null;\n            }\n\n            PDFWorker.#workerPorts?.delete(this._port);\n            this._port = null;\n\n            if (this._messageHandler) {\n              this._messageHandler.destroy();\n\n              this._messageHandler = null;\n            }\n          }\n\n          static fromPort(params) {\n            if (!params?.port) {\n              throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n            }\n\n            const cachedPort = this.#workerPorts?.get(params.port);\n\n            if (cachedPort) {\n              if (cachedPort._pendingDestroy) {\n                throw new Error(\"PDFWorker.fromPort - the worker is being destroyed.\\n\" + \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\");\n              }\n\n              return cachedPort;\n            }\n\n            return new PDFWorker(params);\n          }\n\n          static get workerSrc() {\n            if (_worker_options.GlobalWorkerOptions.workerSrc) {\n              return _worker_options.GlobalWorkerOptions.workerSrc;\n            }\n\n            if (PDFWorkerUtil.fallbackWorkerSrc !== null) {\n              if (!_util.isNodeJS) {\n                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n              }\n\n              return PDFWorkerUtil.fallbackWorkerSrc;\n            }\n\n            throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n          }\n\n          static get _mainThreadWorkerMessageHandler() {\n            try {\n              return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n            } catch {\n              return null;\n            }\n          }\n\n          static get _setupFakeWorkerGlobal() {\n            const loader = async () => {\n              const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n              if (mainWorkerMessageHandler) {\n                return mainWorkerMessageHandler;\n              }\n\n              if (_util.isNodeJS && typeof require === \"function\") {\n                const worker = eval(\"require\")(this.workerSrc);\n                return worker.WorkerMessageHandler;\n              }\n\n              await (0, _display_utils.loadScript)(this.workerSrc);\n              return window.pdfjsWorker.WorkerMessageHandler;\n            };\n\n            return (0, _util.shadow)(this, \"_setupFakeWorkerGlobal\", loader());\n          }\n\n        }\n\n        exports.PDFWorker = PDFWorker;\n\n        class WorkerTransport {\n          #methodPromises = new Map();\n          #pageCache = new Map();\n          #pagePromises = new Map();\n          #passwordCapability = null;\n\n          constructor(messageHandler, loadingTask, networkStream, params, factory) {\n            this.messageHandler = messageHandler;\n            this.loadingTask = loadingTask;\n            this.commonObjs = new PDFObjects();\n            this.fontLoader = new _font_loader.FontLoader({\n              ownerDocument: params.ownerDocument,\n              styleElement: params.styleElement\n            });\n            this._params = params;\n            this.canvasFactory = factory.canvasFactory;\n            this.filterFactory = factory.filterFactory;\n            this.cMapReaderFactory = factory.cMapReaderFactory;\n            this.standardFontDataFactory = factory.standardFontDataFactory;\n            this.destroyed = false;\n            this.destroyCapability = null;\n            this._networkStream = networkStream;\n            this._fullReader = null;\n            this._lastProgress = null;\n            this.downloadInfoCapability = new _util.PromiseCapability();\n            this.setupMessageHandler();\n          }\n\n          #cacheSimpleMethod(name) {\n            let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const cachedPromise = this.#methodPromises.get(name);\n\n            if (cachedPromise) {\n              return cachedPromise;\n            }\n\n            const promise = this.messageHandler.sendWithPromise(name, data);\n            this.#methodPromises.set(name, promise);\n            return promise;\n          }\n\n          get annotationStorage() {\n            return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n          }\n\n          getRenderingIntent(intent) {\n            let annotationMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _util.AnnotationMode.ENABLE;\n            let printAnnotationStorage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n            let isOpList = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let renderingIntent = _util.RenderingIntentFlag.DISPLAY;\n            let annotationStorageSerializable = _annotation_storage.SerializableEmpty;\n\n            switch (intent) {\n              case \"any\":\n                renderingIntent = _util.RenderingIntentFlag.ANY;\n                break;\n\n              case \"display\":\n                break;\n\n              case \"print\":\n                renderingIntent = _util.RenderingIntentFlag.PRINT;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid intent: ${intent}`);\n            }\n\n            switch (annotationMode) {\n              case _util.AnnotationMode.DISABLE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;\n                break;\n\n              case _util.AnnotationMode.ENABLE:\n                break;\n\n              case _util.AnnotationMode.ENABLE_FORMS:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;\n                break;\n\n              case _util.AnnotationMode.ENABLE_STORAGE:\n                renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;\n                const annotationStorage = renderingIntent & _util.RenderingIntentFlag.PRINT && printAnnotationStorage instanceof _annotation_storage.PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;\n                annotationStorageSerializable = annotationStorage.serializable;\n                break;\n\n              default:\n                (0, _util.warn)(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n            }\n\n            if (isOpList) {\n              renderingIntent += _util.RenderingIntentFlag.OPLIST;\n            }\n\n            return {\n              renderingIntent,\n              cacheKey: `${renderingIntent}_${annotationStorageSerializable.hash}`,\n              annotationStorageSerializable\n            };\n          }\n\n          destroy() {\n            if (this.destroyCapability) {\n              return this.destroyCapability.promise;\n            }\n\n            this.destroyed = true;\n            this.destroyCapability = new _util.PromiseCapability();\n            this.#passwordCapability?.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n            const waitOn = [];\n\n            for (const page of this.#pageCache.values()) {\n              waitOn.push(page._destroy());\n            }\n\n            this.#pageCache.clear();\n            this.#pagePromises.clear();\n\n            if (this.hasOwnProperty(\"annotationStorage\")) {\n              this.annotationStorage.resetModified();\n            }\n\n            const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n            waitOn.push(terminated);\n            Promise.all(waitOn).then(() => {\n              this.commonObjs.clear();\n              this.fontLoader.clear();\n              this.#methodPromises.clear();\n              this.filterFactory.destroy();\n              this._networkStream?.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n\n              if (this.messageHandler) {\n                this.messageHandler.destroy();\n                this.messageHandler = null;\n              }\n\n              this.destroyCapability.resolve();\n            }, this.destroyCapability.reject);\n            return this.destroyCapability.promise;\n          }\n\n          setupMessageHandler() {\n            const {\n              messageHandler,\n              loadingTask\n            } = this;\n            messageHandler.on(\"GetReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n              this._fullReader = this._networkStream.getFullReader();\n\n              this._fullReader.onProgress = evt => {\n                this._lastProgress = {\n                  loaded: evt.loaded,\n                  total: evt.total\n                };\n              };\n\n              sink.onPull = () => {\n                this._fullReader.read().then(function (_ref8) {\n                  let {\n                    value,\n                    done\n                  } = _ref8;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)(value instanceof ArrayBuffer, \"GetReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                this._fullReader.cancel(reason);\n\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"ReaderHeadersReady\", data => {\n              const headersCapability = new _util.PromiseCapability();\n              const fullReader = this._fullReader;\n              fullReader.headersReady.then(() => {\n                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                  if (this._lastProgress) {\n                    loadingTask.onProgress?.(this._lastProgress);\n                  }\n\n                  fullReader.onProgress = evt => {\n                    loadingTask.onProgress?.({\n                      loaded: evt.loaded,\n                      total: evt.total\n                    });\n                  };\n                }\n\n                headersCapability.resolve({\n                  isStreamingSupported: fullReader.isStreamingSupported,\n                  isRangeSupported: fullReader.isRangeSupported,\n                  contentLength: fullReader.contentLength\n                });\n              }, headersCapability.reject);\n              return headersCapability.promise;\n            });\n            messageHandler.on(\"GetRangeReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n              if (!rangeReader) {\n                sink.close();\n                return;\n              }\n\n              sink.onPull = () => {\n                rangeReader.read().then(function (_ref9) {\n                  let {\n                    value,\n                    done\n                  } = _ref9;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)(value instanceof ArrayBuffer, \"GetRangeReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                rangeReader.cancel(reason);\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"GetDoc\", _ref10 => {\n              let {\n                pdfInfo\n              } = _ref10;\n              this._numPages = pdfInfo.numPages;\n              this._htmlForXfa = pdfInfo.htmlForXfa;\n              delete pdfInfo.htmlForXfa;\n\n              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n            });\n            messageHandler.on(\"DocException\", function (ex) {\n              let reason;\n\n              switch (ex.name) {\n                case \"PasswordException\":\n                  reason = new _util.PasswordException(ex.message, ex.code);\n                  break;\n\n                case \"InvalidPDFException\":\n                  reason = new _util.InvalidPDFException(ex.message);\n                  break;\n\n                case \"MissingPDFException\":\n                  reason = new _util.MissingPDFException(ex.message);\n                  break;\n\n                case \"UnexpectedResponseException\":\n                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                  break;\n\n                case \"UnknownErrorException\":\n                  reason = new _util.UnknownErrorException(ex.message, ex.details);\n                  break;\n\n                default:\n                  (0, _util.unreachable)(\"DocException - expected a valid Error.\");\n              }\n\n              loadingTask._capability.reject(reason);\n            });\n            messageHandler.on(\"PasswordRequest\", exception => {\n              this.#passwordCapability = new _util.PromiseCapability();\n\n              if (loadingTask.onPassword) {\n                const updatePassword = password => {\n                  if (password instanceof Error) {\n                    this.#passwordCapability.reject(password);\n                  } else {\n                    this.#passwordCapability.resolve({\n                      password\n                    });\n                  }\n                };\n\n                try {\n                  loadingTask.onPassword(updatePassword, exception.code);\n                } catch (ex) {\n                  this.#passwordCapability.reject(ex);\n                }\n              } else {\n                this.#passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n              }\n\n              return this.#passwordCapability.promise;\n            });\n            messageHandler.on(\"DataLoaded\", data => {\n              loadingTask.onProgress?.({\n                loaded: data.length,\n                total: data.length\n              });\n              this.downloadInfoCapability.resolve(data);\n            });\n            messageHandler.on(\"StartRenderPage\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const page = this.#pageCache.get(data.pageIndex);\n\n              page._startRenderPage(data.transparency, data.cacheKey);\n            });\n            messageHandler.on(\"commonobj\", _ref11 => {\n              let [id, type, exportedData] = _ref11;\n\n              if (this.destroyed) {\n                return;\n              }\n\n              if (this.commonObjs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Font\":\n                  const params = this._params;\n\n                  if (\"error\" in exportedData) {\n                    const exportedError = exportedData.error;\n                    (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                    this.commonObjs.resolve(id, exportedError);\n                    break;\n                  }\n\n                  const inspectFont = params.pdfBug && globalThis.FontInspector?.enabled ? (font, url) => globalThis.FontInspector.fontAdded(font, url) : null;\n                  const font = new _font_loader.FontFaceObject(exportedData, {\n                    isEvalSupported: params.isEvalSupported,\n                    disableFontFace: params.disableFontFace,\n                    ignoreErrors: params.ignoreErrors,\n                    inspectFont\n                  });\n                  this.fontLoader.bind(font).catch(reason => {\n                    return messageHandler.sendWithPromise(\"FontFallback\", {\n                      id\n                    });\n                  }).finally(() => {\n                    if (!params.fontExtraProperties && font.data) {\n                      font.data = null;\n                    }\n\n                    this.commonObjs.resolve(id, font);\n                  });\n                  break;\n\n                case \"FontPath\":\n                case \"Image\":\n                case \"Pattern\":\n                  this.commonObjs.resolve(id, exportedData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown common object type ${type}`);\n              }\n            });\n            messageHandler.on(\"obj\", _ref12 => {\n              let [id, pageIndex, type, imageData] = _ref12;\n\n              if (this.destroyed) {\n                return;\n              }\n\n              const pageProxy = this.#pageCache.get(pageIndex);\n\n              if (pageProxy.objs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Image\":\n                  pageProxy.objs.resolve(id, imageData);\n\n                  if (imageData) {\n                    let length;\n\n                    if (imageData.bitmap) {\n                      const {\n                        width,\n                        height\n                      } = imageData;\n                      length = width * height * 4;\n                    } else {\n                      length = imageData.data?.length || 0;\n                    }\n\n                    if (length > _util.MAX_IMAGE_SIZE_TO_CACHE) {\n                      pageProxy._maybeCleanupAfterRender = true;\n                    }\n                  }\n\n                  break;\n\n                case \"Pattern\":\n                  pageProxy.objs.resolve(id, imageData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown object type ${type}`);\n              }\n            });\n            messageHandler.on(\"DocProgress\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              loadingTask.onProgress?.({\n                loaded: data.loaded,\n                total: data.total\n              });\n            });\n            messageHandler.on(\"FetchBuiltInCMap\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.cMapReaderFactory) {\n                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.cMapReaderFactory.fetch(data);\n            });\n            messageHandler.on(\"FetchStandardFontData\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.standardFontDataFactory) {\n                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.standardFontDataFactory.fetch(data);\n            });\n          }\n\n          getData() {\n            return this.messageHandler.sendWithPromise(\"GetData\", null);\n          }\n\n          saveDocument() {\n            if (this.annotationStorage.size <= 0) {\n              (0, _util.warn)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n            }\n\n            const {\n              map,\n              transfers\n            } = this.annotationStorage.serializable;\n            return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n              isPureXfa: !!this._htmlForXfa,\n              numPages: this._numPages,\n              annotationStorage: map,\n              filename: this._fullReader?.filename ?? null\n            }, transfers).finally(() => {\n              this.annotationStorage.resetModified();\n            });\n          }\n\n          getPage(pageNumber) {\n            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n              return Promise.reject(new Error(\"Invalid page request.\"));\n            }\n\n            const pageIndex = pageNumber - 1,\n                  cachedPromise = this.#pagePromises.get(pageIndex);\n\n            if (cachedPromise) {\n              return cachedPromise;\n            }\n\n            const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n              pageIndex\n            }).then(pageInfo => {\n              if (this.destroyed) {\n                throw new Error(\"Transport destroyed\");\n              }\n\n              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);\n              this.#pageCache.set(pageIndex, page);\n              return page;\n            });\n            this.#pagePromises.set(pageIndex, promise);\n            return promise;\n          }\n\n          getPageIndex(ref) {\n            if (typeof ref !== \"object\" || ref === null || !Number.isInteger(ref.num) || ref.num < 0 || !Number.isInteger(ref.gen) || ref.gen < 0) {\n              return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n              num: ref.num,\n              gen: ref.gen\n            });\n          }\n\n          getAnnotations(pageIndex, intent) {\n            return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n              pageIndex,\n              intent\n            });\n          }\n\n          getFieldObjects() {\n            return this.#cacheSimpleMethod(\"GetFieldObjects\");\n          }\n\n          hasJSActions() {\n            return this.#cacheSimpleMethod(\"HasJSActions\");\n          }\n\n          getCalculationOrderIds() {\n            return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n          }\n\n          getDestinations() {\n            return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n          }\n\n          getDestination(id) {\n            if (typeof id !== \"string\") {\n              return Promise.reject(new Error(\"Invalid destination request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetDestination\", {\n              id\n            });\n          }\n\n          getPageLabels() {\n            return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n          }\n\n          getPageLayout() {\n            return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n          }\n\n          getPageMode() {\n            return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n          }\n\n          getViewerPreferences() {\n            return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n          }\n\n          getOpenAction() {\n            return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n          }\n\n          getAttachments() {\n            return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n          }\n\n          getDocJSActions() {\n            return this.#cacheSimpleMethod(\"GetDocJSActions\");\n          }\n\n          getPageJSActions(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n              pageIndex\n            });\n          }\n\n          getStructTree(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n              pageIndex\n            });\n          }\n\n          getOutline() {\n            return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n          }\n\n          getOptionalContentConfig() {\n            return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n              return new _optional_content_config.OptionalContentConfig(results);\n            });\n          }\n\n          getPermissions() {\n            return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n          }\n\n          getMetadata() {\n            const name = \"GetMetadata\",\n                  cachedPromise = this.#methodPromises.get(name);\n\n            if (cachedPromise) {\n              return cachedPromise;\n            }\n\n            const promise = this.messageHandler.sendWithPromise(name, null).then(results => {\n              return {\n                info: results[0],\n                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n                contentDispositionFilename: this._fullReader?.filename ?? null,\n                contentLength: this._fullReader?.contentLength ?? null\n              };\n            });\n            this.#methodPromises.set(name, promise);\n            return promise;\n          }\n\n          getMarkInfo() {\n            return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n          }\n\n          async startCleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (this.destroyed) {\n              return;\n            }\n\n            await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n            for (const page of this.#pageCache.values()) {\n              const cleanupSuccessful = page.cleanup();\n\n              if (!cleanupSuccessful) {\n                throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);\n              }\n            }\n\n            this.commonObjs.clear();\n\n            if (!keepLoadedFonts) {\n              this.fontLoader.clear();\n            }\n\n            this.#methodPromises.clear();\n            this.filterFactory.destroy(true);\n          }\n\n          get loadingParams() {\n            const {\n              disableAutoFetch,\n              enableXfa\n            } = this._params;\n            return (0, _util.shadow)(this, \"loadingParams\", {\n              disableAutoFetch,\n              enableXfa\n            });\n          }\n\n        }\n\n        class PDFObjects {\n          #objs = Object.create(null);\n\n          #ensureObj(objId) {\n            return this.#objs[objId] ||= {\n              capability: new _util.PromiseCapability(),\n              data: null\n            };\n          }\n\n          get(objId) {\n            let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (callback) {\n              const obj = this.#ensureObj(objId);\n              obj.capability.promise.then(() => callback(obj.data));\n              return null;\n            }\n\n            const obj = this.#objs[objId];\n\n            if (!obj?.capability.settled) {\n              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n            }\n\n            return obj.data;\n          }\n\n          has(objId) {\n            const obj = this.#objs[objId];\n            return obj?.capability.settled || false;\n          }\n\n          resolve(objId) {\n            let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const obj = this.#ensureObj(objId);\n            obj.data = data;\n            obj.capability.resolve();\n          }\n\n          clear() {\n            for (const objId in this.#objs) {\n              const {\n                data\n              } = this.#objs[objId];\n              data?.bitmap?.close();\n            }\n\n            this.#objs = Object.create(null);\n          }\n\n        }\n\n        class RenderTask {\n          #internalRenderTask = null;\n\n          constructor(internalRenderTask) {\n            this.#internalRenderTask = internalRenderTask;\n            this.onContinue = null;\n          }\n\n          get promise() {\n            return this.#internalRenderTask.capability.promise;\n          }\n\n          cancel() {\n            let extraDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            this.#internalRenderTask.cancel(null, extraDelay);\n          }\n\n          get separateAnnots() {\n            const {\n              separateAnnots\n            } = this.#internalRenderTask.operatorList;\n\n            if (!separateAnnots) {\n              return false;\n            }\n\n            const {\n              annotationCanvasMap\n            } = this.#internalRenderTask;\n            return separateAnnots.form || separateAnnots.canvas && annotationCanvasMap?.size > 0;\n          }\n\n        }\n\n        exports.RenderTask = RenderTask;\n\n        class InternalRenderTask {\n          static #canvasInUse = new WeakSet();\n\n          constructor(_ref13) {\n            let {\n              callback,\n              params,\n              objs,\n              commonObjs,\n              annotationCanvasMap,\n              operatorList,\n              pageIndex,\n              canvasFactory,\n              filterFactory,\n              useRequestAnimationFrame = false,\n              pdfBug = false,\n              pageColors = null\n            } = _ref13;\n            this.callback = callback;\n            this.params = params;\n            this.objs = objs;\n            this.commonObjs = commonObjs;\n            this.annotationCanvasMap = annotationCanvasMap;\n            this.operatorListIdx = null;\n            this.operatorList = operatorList;\n            this._pageIndex = pageIndex;\n            this.canvasFactory = canvasFactory;\n            this.filterFactory = filterFactory;\n            this._pdfBug = pdfBug;\n            this.pageColors = pageColors;\n            this.running = false;\n            this.graphicsReadyCallback = null;\n            this.graphicsReady = false;\n            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n            this.cancelled = false;\n            this.capability = new _util.PromiseCapability();\n            this.task = new RenderTask(this);\n            this._cancelBound = this.cancel.bind(this);\n            this._continueBound = this._continue.bind(this);\n            this._scheduleNextBound = this._scheduleNext.bind(this);\n            this._nextBound = this._next.bind(this);\n            this._canvas = params.canvasContext.canvas;\n          }\n\n          get completed() {\n            return this.capability.promise.catch(function () {});\n          }\n\n          initializeGraphics(_ref14) {\n            let {\n              transparency = false,\n              optionalContentConfig\n            } = _ref14;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this._canvas) {\n              if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n                throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n              }\n\n              InternalRenderTask.#canvasInUse.add(this._canvas);\n            }\n\n            if (this._pdfBug && globalThis.StepperManager?.enabled) {\n              this.stepper = globalThis.StepperManager.create(this._pageIndex);\n              this.stepper.init(this.operatorList);\n              this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n            }\n\n            const {\n              canvasContext,\n              viewport,\n              transform,\n              background\n            } = this.params;\n            this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n              optionalContentConfig\n            }, this.annotationCanvasMap, this.pageColors);\n            this.gfx.beginDrawing({\n              transform,\n              viewport,\n              transparency,\n              background\n            });\n            this.operatorListIdx = 0;\n            this.graphicsReady = true;\n            this.graphicsReadyCallback?.();\n          }\n\n          cancel() {\n            let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n            let extraDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            this.running = false;\n            this.cancelled = true;\n            this.gfx?.endDrawing();\n            InternalRenderTask.#canvasInUse.delete(this._canvas);\n            this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay));\n          }\n\n          operatorListChanged() {\n            if (!this.graphicsReady) {\n              this.graphicsReadyCallback ||= this._continueBound;\n              return;\n            }\n\n            this.stepper?.updateOperatorList(this.operatorList);\n\n            if (this.running) {\n              return;\n            }\n\n            this._continue();\n          }\n\n          _continue() {\n            this.running = true;\n\n            if (this.cancelled) {\n              return;\n            }\n\n            if (this.task.onContinue) {\n              this.task.onContinue(this._scheduleNextBound);\n            } else {\n              this._scheduleNext();\n            }\n          }\n\n          _scheduleNext() {\n            if (this._useRequestAnimationFrame) {\n              window.requestAnimationFrame(() => {\n                this._nextBound().catch(this._cancelBound);\n              });\n            } else {\n              Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n            }\n          }\n\n          async _next() {\n            if (this.cancelled) {\n              return;\n            }\n\n            this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n            if (this.operatorListIdx === this.operatorList.argsArray.length) {\n              this.running = false;\n\n              if (this.operatorList.lastChunk) {\n                this.gfx.endDrawing();\n                InternalRenderTask.#canvasInUse.delete(this._canvas);\n                this.callback();\n              }\n            }\n          }\n\n        }\n\n        const version = '3.11.174';\n        exports.version = version;\n        const build = 'ce8716743';\n        exports.build = build;\n        /***/\n      },\n      /* 3 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SerializableEmpty = exports.PrintAnnotationStorage = exports.AnnotationStorage = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _editor = __w_pdfjs_require__(4);\n\n        var _murmurhash = __w_pdfjs_require__(8);\n\n        const SerializableEmpty = Object.freeze({\n          map: null,\n          hash: \"\",\n          transfers: undefined\n        });\n        exports.SerializableEmpty = SerializableEmpty;\n\n        class AnnotationStorage {\n          #modified = false;\n          #storage = new Map();\n\n          constructor() {\n            this.onSetModified = null;\n            this.onResetModified = null;\n            this.onAnnotationEditor = null;\n          }\n\n          getValue(key, defaultValue) {\n            const value = this.#storage.get(key);\n\n            if (value === undefined) {\n              return defaultValue;\n            }\n\n            return Object.assign(defaultValue, value);\n          }\n\n          getRawValue(key) {\n            return this.#storage.get(key);\n          }\n\n          remove(key) {\n            this.#storage.delete(key);\n\n            if (this.#storage.size === 0) {\n              this.resetModified();\n            }\n\n            if (typeof this.onAnnotationEditor === \"function\") {\n              for (const value of this.#storage.values()) {\n                if (value instanceof _editor.AnnotationEditor) {\n                  return;\n                }\n              }\n\n              this.onAnnotationEditor(null);\n            }\n          }\n\n          setValue(key, value) {\n            const obj = this.#storage.get(key);\n            let modified = false;\n\n            if (obj !== undefined) {\n              for (const [entry, val] of Object.entries(value)) {\n                if (obj[entry] !== val) {\n                  modified = true;\n                  obj[entry] = val;\n                }\n              }\n            } else {\n              modified = true;\n              this.#storage.set(key, value);\n            }\n\n            if (modified) {\n              this.#setModified();\n            }\n\n            if (value instanceof _editor.AnnotationEditor && typeof this.onAnnotationEditor === \"function\") {\n              this.onAnnotationEditor(value.constructor._type);\n            }\n          }\n\n          has(key) {\n            return this.#storage.has(key);\n          }\n\n          getAll() {\n            return this.#storage.size > 0 ? (0, _util.objectFromMap)(this.#storage) : null;\n          }\n\n          setAll(obj) {\n            for (const [key, val] of Object.entries(obj)) {\n              this.setValue(key, val);\n            }\n          }\n\n          get size() {\n            return this.#storage.size;\n          }\n\n          #setModified() {\n            if (!this.#modified) {\n              this.#modified = true;\n\n              if (typeof this.onSetModified === \"function\") {\n                this.onSetModified();\n              }\n            }\n          }\n\n          resetModified() {\n            if (this.#modified) {\n              this.#modified = false;\n\n              if (typeof this.onResetModified === \"function\") {\n                this.onResetModified();\n              }\n            }\n          }\n\n          get print() {\n            return new PrintAnnotationStorage(this);\n          }\n\n          get serializable() {\n            if (this.#storage.size === 0) {\n              return SerializableEmpty;\n            }\n\n            const map = new Map(),\n                  hash = new _murmurhash.MurmurHash3_64(),\n                  transfers = [];\n            const context = Object.create(null);\n            let hasBitmap = false;\n\n            for (const [key, val] of this.#storage) {\n              const serialized = val instanceof _editor.AnnotationEditor ? val.serialize(false, context) : val;\n\n              if (serialized) {\n                map.set(key, serialized);\n                hash.update(`${key}:${JSON.stringify(serialized)}`);\n                hasBitmap ||= !!serialized.bitmap;\n              }\n            }\n\n            if (hasBitmap) {\n              for (const value of map.values()) {\n                if (value.bitmap) {\n                  transfers.push(value.bitmap);\n                }\n              }\n            }\n\n            return map.size > 0 ? {\n              map,\n              hash: hash.hexdigest(),\n              transfers\n            } : SerializableEmpty;\n          }\n\n        }\n\n        exports.AnnotationStorage = AnnotationStorage;\n\n        class PrintAnnotationStorage extends AnnotationStorage {\n          #serializable;\n\n          constructor(parent) {\n            super();\n            const {\n              map,\n              hash,\n              transfers\n            } = parent.serializable;\n            const clone = structuredClone(map, transfers ? {\n              transfer: transfers\n            } : null);\n            this.#serializable = {\n              map: clone,\n              hash,\n              transfers\n            };\n          }\n\n          get print() {\n            (0, _util.unreachable)(\"Should not call PrintAnnotationStorage.print\");\n          }\n\n          get serializable() {\n            return this.#serializable;\n          }\n\n        }\n\n        exports.PrintAnnotationStorage = PrintAnnotationStorage;\n        /***/\n      },\n      /* 4 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationEditor = void 0;\n\n        var _tools = __w_pdfjs_require__(5);\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        class AnnotationEditor {\n          #altText = \"\";\n          #altTextDecorative = false;\n          #altTextButton = null;\n          #altTextTooltip = null;\n          #altTextTooltipTimeout = null;\n          #keepAspectRatio = false;\n          #resizersDiv = null;\n          #boundFocusin = this.focusin.bind(this);\n          #boundFocusout = this.focusout.bind(this);\n          #hasBeenClicked = false;\n          #isEditing = false;\n          #isInEditMode = false;\n          _initialOptions = Object.create(null);\n          _uiManager = null;\n          _focusEventsAllowed = true;\n          _l10nPromise = null;\n          #isDraggable = false;\n          #zIndex = AnnotationEditor._zIndex++;\n          static _borderLineWidth = -1;\n          static _colorManager = new _tools.ColorManager();\n          static _zIndex = 1;\n          static SMALL_EDITOR_SIZE = 0;\n\n          constructor(parameters) {\n            if (this.constructor === AnnotationEditor) {\n              (0, _util.unreachable)(\"Cannot initialize AnnotationEditor.\");\n            }\n\n            this.parent = parameters.parent;\n            this.id = parameters.id;\n            this.width = this.height = null;\n            this.pageIndex = parameters.parent.pageIndex;\n            this.name = parameters.name;\n            this.div = null;\n            this._uiManager = parameters.uiManager;\n            this.annotationElementId = null;\n            this._willKeepAspectRatio = false;\n            this._initialOptions.isCentered = parameters.isCentered;\n            this._structTreeParentId = null;\n            const {\n              rotation,\n              rawDims: {\n                pageWidth,\n                pageHeight,\n                pageX,\n                pageY\n              }\n            } = this.parent.viewport;\n            this.rotation = rotation;\n            this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\n            this.pageDimensions = [pageWidth, pageHeight];\n            this.pageTranslation = [pageX, pageY];\n            const [width, height] = this.parentDimensions;\n            this.x = parameters.x / width;\n            this.y = parameters.y / height;\n            this.isAttachedToDOM = false;\n            this.deleted = false;\n          }\n\n          get editorType() {\n            return Object.getPrototypeOf(this).constructor._type;\n          }\n\n          static get _defaultLineColor() {\n            return (0, _util.shadow)(this, \"_defaultLineColor\", this._colorManager.getHexCode(\"CanvasText\"));\n          }\n\n          static deleteAnnotationElement(editor) {\n            const fakeEditor = new FakeEditor({\n              id: editor.parent.getNextId(),\n              parent: editor.parent,\n              uiManager: editor._uiManager\n            });\n            fakeEditor.annotationElementId = editor.annotationElementId;\n            fakeEditor.deleted = true;\n\n            fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\n          }\n\n          static initialize(l10n) {\n            let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            AnnotationEditor._l10nPromise ||= new Map([\"editor_alt_text_button_label\", \"editor_alt_text_edit_button_label\", \"editor_alt_text_decorative_tooltip\"].map(str => [str, l10n.get(str)]));\n\n            if (options?.strings) {\n              for (const str of options.strings) {\n                AnnotationEditor._l10nPromise.set(str, l10n.get(str));\n              }\n            }\n\n            if (AnnotationEditor._borderLineWidth !== -1) {\n              return;\n            }\n\n            const style = getComputedStyle(document.documentElement);\n            AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\n          }\n\n          static updateDefaultParams(_type, _value) {}\n\n          static get defaultPropertiesToUpdate() {\n            return [];\n          }\n\n          static isHandlingMimeForPasting(mime) {\n            return false;\n          }\n\n          static paste(item, parent) {\n            (0, _util.unreachable)(\"Not implemented\");\n          }\n\n          get propertiesToUpdate() {\n            return [];\n          }\n\n          get _isDraggable() {\n            return this.#isDraggable;\n          }\n\n          set _isDraggable(value) {\n            this.#isDraggable = value;\n            this.div?.classList.toggle(\"draggable\", value);\n          }\n\n          center() {\n            const [pageWidth, pageHeight] = this.pageDimensions;\n\n            switch (this.parentRotation) {\n              case 90:\n                this.x -= this.height * pageHeight / (pageWidth * 2);\n                this.y += this.width * pageWidth / (pageHeight * 2);\n                break;\n\n              case 180:\n                this.x += this.width / 2;\n                this.y += this.height / 2;\n                break;\n\n              case 270:\n                this.x += this.height * pageHeight / (pageWidth * 2);\n                this.y -= this.width * pageWidth / (pageHeight * 2);\n                break;\n\n              default:\n                this.x -= this.width / 2;\n                this.y -= this.height / 2;\n                break;\n            }\n\n            this.fixAndSetPosition();\n          }\n\n          addCommands(params) {\n            this._uiManager.addCommands(params);\n          }\n\n          get currentLayer() {\n            return this._uiManager.currentLayer;\n          }\n\n          setInBackground() {\n            this.div.style.zIndex = 0;\n          }\n\n          setInForeground() {\n            this.div.style.zIndex = this.#zIndex;\n          }\n\n          setParent(parent) {\n            if (parent !== null) {\n              this.pageIndex = parent.pageIndex;\n              this.pageDimensions = parent.pageDimensions;\n            }\n\n            this.parent = parent;\n          }\n\n          focusin(event) {\n            if (!this._focusEventsAllowed) {\n              return;\n            }\n\n            if (!this.#hasBeenClicked) {\n              this.parent.setSelected(this);\n            } else {\n              this.#hasBeenClicked = false;\n            }\n          }\n\n          focusout(event) {\n            if (!this._focusEventsAllowed) {\n              return;\n            }\n\n            if (!this.isAttachedToDOM) {\n              return;\n            }\n\n            const target = event.relatedTarget;\n\n            if (target?.closest(`#${this.id}`)) {\n              return;\n            }\n\n            event.preventDefault();\n\n            if (!this.parent?.isMultipleSelection) {\n              this.commitOrRemove();\n            }\n          }\n\n          commitOrRemove() {\n            if (this.isEmpty()) {\n              this.remove();\n            } else {\n              this.commit();\n            }\n          }\n\n          commit() {\n            this.addToAnnotationStorage();\n          }\n\n          addToAnnotationStorage() {\n            this._uiManager.addToAnnotationStorage(this);\n          }\n\n          setAt(x, y, tx, ty) {\n            const [width, height] = this.parentDimensions;\n            [tx, ty] = this.screenToPageTranslation(tx, ty);\n            this.x = (x + tx) / width;\n            this.y = (y + ty) / height;\n            this.fixAndSetPosition();\n          }\n\n          #translate(_ref15, x, y) {\n            let [width, height] = _ref15;\n            [x, y] = this.screenToPageTranslation(x, y);\n            this.x += x / width;\n            this.y += y / height;\n            this.fixAndSetPosition();\n          }\n\n          translate(x, y) {\n            this.#translate(this.parentDimensions, x, y);\n          }\n\n          translateInPage(x, y) {\n            this.#translate(this.pageDimensions, x, y);\n            this.div.scrollIntoView({\n              block: \"nearest\"\n            });\n          }\n\n          drag(tx, ty) {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.x += tx / parentWidth;\n            this.y += ty / parentHeight;\n\n            if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n              const {\n                x,\n                y\n              } = this.div.getBoundingClientRect();\n\n              if (this.parent.findNewParent(this, x, y)) {\n                this.x -= Math.floor(this.x);\n                this.y -= Math.floor(this.y);\n              }\n            }\n\n            let {\n              x,\n              y\n            } = this;\n            const [bx, by] = this.#getBaseTranslation();\n            x += bx;\n            y += by;\n            this.div.style.left = `${(100 * x).toFixed(2)}%`;\n            this.div.style.top = `${(100 * y).toFixed(2)}%`;\n            this.div.scrollIntoView({\n              block: \"nearest\"\n            });\n          }\n\n          #getBaseTranslation() {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            const {\n              _borderLineWidth\n            } = AnnotationEditor;\n            const x = _borderLineWidth / parentWidth;\n            const y = _borderLineWidth / parentHeight;\n\n            switch (this.rotation) {\n              case 90:\n                return [-x, y];\n\n              case 180:\n                return [x, y];\n\n              case 270:\n                return [x, -y];\n\n              default:\n                return [-x, -y];\n            }\n          }\n\n          fixAndSetPosition() {\n            const [pageWidth, pageHeight] = this.pageDimensions;\n            let {\n              x,\n              y,\n              width,\n              height\n            } = this;\n            width *= pageWidth;\n            height *= pageHeight;\n            x *= pageWidth;\n            y *= pageHeight;\n\n            switch (this.rotation) {\n              case 0:\n                x = Math.max(0, Math.min(pageWidth - width, x));\n                y = Math.max(0, Math.min(pageHeight - height, y));\n                break;\n\n              case 90:\n                x = Math.max(0, Math.min(pageWidth - height, x));\n                y = Math.min(pageHeight, Math.max(width, y));\n                break;\n\n              case 180:\n                x = Math.min(pageWidth, Math.max(width, x));\n                y = Math.min(pageHeight, Math.max(height, y));\n                break;\n\n              case 270:\n                x = Math.min(pageWidth, Math.max(height, x));\n                y = Math.max(0, Math.min(pageHeight - width, y));\n                break;\n            }\n\n            this.x = x /= pageWidth;\n            this.y = y /= pageHeight;\n            const [bx, by] = this.#getBaseTranslation();\n            x += bx;\n            y += by;\n            const {\n              style\n            } = this.div;\n            style.left = `${(100 * x).toFixed(2)}%`;\n            style.top = `${(100 * y).toFixed(2)}%`;\n            this.moveInDOM();\n          }\n\n          static #rotatePoint(x, y, angle) {\n            switch (angle) {\n              case 90:\n                return [y, -x];\n\n              case 180:\n                return [-x, -y];\n\n              case 270:\n                return [-y, x];\n\n              default:\n                return [x, y];\n            }\n          }\n\n          screenToPageTranslation(x, y) {\n            return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);\n          }\n\n          pageTranslationToScreen(x, y) {\n            return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);\n          }\n\n          #getRotationMatrix(rotation) {\n            switch (rotation) {\n              case 90:\n                {\n                  const [pageWidth, pageHeight] = this.pageDimensions;\n                  return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];\n                }\n\n              case 180:\n                return [-1, 0, 0, -1];\n\n              case 270:\n                {\n                  const [pageWidth, pageHeight] = this.pageDimensions;\n                  return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];\n                }\n\n              default:\n                return [1, 0, 0, 1];\n            }\n          }\n\n          get parentScale() {\n            return this._uiManager.viewParameters.realScale;\n          }\n\n          get parentRotation() {\n            return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n          }\n\n          get parentDimensions() {\n            const {\n              parentScale,\n              pageDimensions: [pageWidth, pageHeight]\n            } = this;\n            const scaledWidth = pageWidth * parentScale;\n            const scaledHeight = pageHeight * parentScale;\n            return _util.FeatureTest.isCSSRoundSupported ? [Math.round(scaledWidth), Math.round(scaledHeight)] : [scaledWidth, scaledHeight];\n          }\n\n          setDims(width, height) {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.div.style.width = `${(100 * width / parentWidth).toFixed(2)}%`;\n\n            if (!this.#keepAspectRatio) {\n              this.div.style.height = `${(100 * height / parentHeight).toFixed(2)}%`;\n            }\n\n            this.#altTextButton?.classList.toggle(\"small\", width < AnnotationEditor.SMALL_EDITOR_SIZE || height < AnnotationEditor.SMALL_EDITOR_SIZE);\n          }\n\n          fixDims() {\n            const {\n              style\n            } = this.div;\n            const {\n              height,\n              width\n            } = style;\n            const widthPercent = width.endsWith(\"%\");\n            const heightPercent = !this.#keepAspectRatio && height.endsWith(\"%\");\n\n            if (widthPercent && heightPercent) {\n              return;\n            }\n\n            const [parentWidth, parentHeight] = this.parentDimensions;\n\n            if (!widthPercent) {\n              style.width = `${(100 * parseFloat(width) / parentWidth).toFixed(2)}%`;\n            }\n\n            if (!this.#keepAspectRatio && !heightPercent) {\n              style.height = `${(100 * parseFloat(height) / parentHeight).toFixed(2)}%`;\n            }\n          }\n\n          getInitialTranslation() {\n            return [0, 0];\n          }\n\n          #createResizers() {\n            if (this.#resizersDiv) {\n              return;\n            }\n\n            this.#resizersDiv = document.createElement(\"div\");\n            this.#resizersDiv.classList.add(\"resizers\");\n            const classes = [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"];\n\n            if (!this._willKeepAspectRatio) {\n              classes.push(\"topMiddle\", \"middleRight\", \"bottomMiddle\", \"middleLeft\");\n            }\n\n            for (const name of classes) {\n              const div = document.createElement(\"div\");\n              this.#resizersDiv.append(div);\n              div.classList.add(\"resizer\", name);\n              div.addEventListener(\"pointerdown\", this.#resizerPointerdown.bind(this, name));\n              div.addEventListener(\"contextmenu\", _display_utils.noContextMenu);\n            }\n\n            this.div.prepend(this.#resizersDiv);\n          }\n\n          #resizerPointerdown(name, event) {\n            event.preventDefault();\n            const {\n              isMac\n            } = _util.FeatureTest.platform;\n\n            if (event.button !== 0 || event.ctrlKey && isMac) {\n              return;\n            }\n\n            const boundResizerPointermove = this.#resizerPointermove.bind(this, name);\n            const savedDraggable = this._isDraggable;\n            this._isDraggable = false;\n            const pointerMoveOptions = {\n              passive: true,\n              capture: true\n            };\n            window.addEventListener(\"pointermove\", boundResizerPointermove, pointerMoveOptions);\n            const savedX = this.x;\n            const savedY = this.y;\n            const savedWidth = this.width;\n            const savedHeight = this.height;\n            const savedParentCursor = this.parent.div.style.cursor;\n            const savedCursor = this.div.style.cursor;\n            this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;\n\n            const pointerUpCallback = () => {\n              this._isDraggable = savedDraggable;\n              window.removeEventListener(\"pointerup\", pointerUpCallback);\n              window.removeEventListener(\"blur\", pointerUpCallback);\n              window.removeEventListener(\"pointermove\", boundResizerPointermove, pointerMoveOptions);\n              this.parent.div.style.cursor = savedParentCursor;\n              this.div.style.cursor = savedCursor;\n              const newX = this.x;\n              const newY = this.y;\n              const newWidth = this.width;\n              const newHeight = this.height;\n\n              if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {\n                return;\n              }\n\n              this.addCommands({\n                cmd: () => {\n                  this.width = newWidth;\n                  this.height = newHeight;\n                  this.x = newX;\n                  this.y = newY;\n                  const [parentWidth, parentHeight] = this.parentDimensions;\n                  this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n                  this.fixAndSetPosition();\n                },\n                undo: () => {\n                  this.width = savedWidth;\n                  this.height = savedHeight;\n                  this.x = savedX;\n                  this.y = savedY;\n                  const [parentWidth, parentHeight] = this.parentDimensions;\n                  this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\n                  this.fixAndSetPosition();\n                },\n                mustExec: true\n              });\n            };\n\n            window.addEventListener(\"pointerup\", pointerUpCallback);\n            window.addEventListener(\"blur\", pointerUpCallback);\n          }\n\n          #resizerPointermove(name, event) {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            const savedX = this.x;\n            const savedY = this.y;\n            const savedWidth = this.width;\n            const savedHeight = this.height;\n            const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;\n            const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;\n\n            const round = x => Math.round(x * 10000) / 10000;\n\n            const rotationMatrix = this.#getRotationMatrix(this.rotation);\n\n            const transf = (x, y) => [rotationMatrix[0] * x + rotationMatrix[2] * y, rotationMatrix[1] * x + rotationMatrix[3] * y];\n\n            const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);\n\n            const invTransf = (x, y) => [invRotationMatrix[0] * x + invRotationMatrix[2] * y, invRotationMatrix[1] * x + invRotationMatrix[3] * y];\n\n            let getPoint;\n            let getOpposite;\n            let isDiagonal = false;\n            let isHorizontal = false;\n\n            switch (name) {\n              case \"topLeft\":\n                isDiagonal = true;\n\n                getPoint = (w, h) => [0, 0];\n\n                getOpposite = (w, h) => [w, h];\n\n                break;\n\n              case \"topMiddle\":\n                getPoint = (w, h) => [w / 2, 0];\n\n                getOpposite = (w, h) => [w / 2, h];\n\n                break;\n\n              case \"topRight\":\n                isDiagonal = true;\n\n                getPoint = (w, h) => [w, 0];\n\n                getOpposite = (w, h) => [0, h];\n\n                break;\n\n              case \"middleRight\":\n                isHorizontal = true;\n\n                getPoint = (w, h) => [w, h / 2];\n\n                getOpposite = (w, h) => [0, h / 2];\n\n                break;\n\n              case \"bottomRight\":\n                isDiagonal = true;\n\n                getPoint = (w, h) => [w, h];\n\n                getOpposite = (w, h) => [0, 0];\n\n                break;\n\n              case \"bottomMiddle\":\n                getPoint = (w, h) => [w / 2, h];\n\n                getOpposite = (w, h) => [w / 2, 0];\n\n                break;\n\n              case \"bottomLeft\":\n                isDiagonal = true;\n\n                getPoint = (w, h) => [0, h];\n\n                getOpposite = (w, h) => [w, 0];\n\n                break;\n\n              case \"middleLeft\":\n                isHorizontal = true;\n\n                getPoint = (w, h) => [0, h / 2];\n\n                getOpposite = (w, h) => [w, h / 2];\n\n                break;\n            }\n\n            const point = getPoint(savedWidth, savedHeight);\n            const oppositePoint = getOpposite(savedWidth, savedHeight);\n            let transfOppositePoint = transf(...oppositePoint);\n            const oppositeX = round(savedX + transfOppositePoint[0]);\n            const oppositeY = round(savedY + transfOppositePoint[1]);\n            let ratioX = 1;\n            let ratioY = 1;\n            let [deltaX, deltaY] = this.screenToPageTranslation(event.movementX, event.movementY);\n            [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);\n\n            if (isDiagonal) {\n              const oldDiag = Math.hypot(savedWidth, savedHeight);\n              ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);\n            } else if (isHorizontal) {\n              ratioX = Math.max(minWidth, Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))) / savedWidth;\n            } else {\n              ratioY = Math.max(minHeight, Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))) / savedHeight;\n            }\n\n            const newWidth = round(savedWidth * ratioX);\n            const newHeight = round(savedHeight * ratioY);\n            transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\n            const newX = oppositeX - transfOppositePoint[0];\n            const newY = oppositeY - transfOppositePoint[1];\n            this.width = newWidth;\n            this.height = newHeight;\n            this.x = newX;\n            this.y = newY;\n            this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n            this.fixAndSetPosition();\n          }\n\n          async addAltTextButton() {\n            if (this.#altTextButton) {\n              return;\n            }\n\n            const altText = this.#altTextButton = document.createElement(\"button\");\n            altText.className = \"altText\";\n            const msg = await AnnotationEditor._l10nPromise.get(\"editor_alt_text_button_label\");\n            altText.textContent = msg;\n            altText.setAttribute(\"aria-label\", msg);\n            altText.tabIndex = \"0\";\n            altText.addEventListener(\"contextmenu\", _display_utils.noContextMenu);\n            altText.addEventListener(\"pointerdown\", event => event.stopPropagation());\n            altText.addEventListener(\"click\", event => {\n              event.preventDefault();\n\n              this._uiManager.editAltText(this);\n            }, {\n              capture: true\n            });\n            altText.addEventListener(\"keydown\", event => {\n              if (event.target === altText && event.key === \"Enter\") {\n                event.preventDefault();\n\n                this._uiManager.editAltText(this);\n              }\n            });\n            this.#setAltTextButtonState();\n            this.div.append(altText);\n\n            if (!AnnotationEditor.SMALL_EDITOR_SIZE) {\n              const PERCENT = 40;\n              AnnotationEditor.SMALL_EDITOR_SIZE = Math.min(128, Math.round(altText.getBoundingClientRect().width * (1 + PERCENT / 100)));\n            }\n          }\n\n          async #setAltTextButtonState() {\n            const button = this.#altTextButton;\n\n            if (!button) {\n              return;\n            }\n\n            if (!this.#altText && !this.#altTextDecorative) {\n              button.classList.remove(\"done\");\n              this.#altTextTooltip?.remove();\n              return;\n            }\n\n            AnnotationEditor._l10nPromise.get(\"editor_alt_text_edit_button_label\").then(msg => {\n              button.setAttribute(\"aria-label\", msg);\n            });\n\n            let tooltip = this.#altTextTooltip;\n\n            if (!tooltip) {\n              this.#altTextTooltip = tooltip = document.createElement(\"span\");\n              tooltip.className = \"tooltip\";\n              tooltip.setAttribute(\"role\", \"tooltip\");\n              const id = tooltip.id = `alt-text-tooltip-${this.id}`;\n              button.setAttribute(\"aria-describedby\", id);\n              const DELAY_TO_SHOW_TOOLTIP = 100;\n              button.addEventListener(\"mouseenter\", () => {\n                this.#altTextTooltipTimeout = setTimeout(() => {\n                  this.#altTextTooltipTimeout = null;\n                  this.#altTextTooltip.classList.add(\"show\");\n\n                  this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n                    source: this,\n                    details: {\n                      type: \"editing\",\n                      subtype: this.editorType,\n                      data: {\n                        action: \"alt_text_tooltip\"\n                      }\n                    }\n                  });\n                }, DELAY_TO_SHOW_TOOLTIP);\n              });\n              button.addEventListener(\"mouseleave\", () => {\n                clearTimeout(this.#altTextTooltipTimeout);\n                this.#altTextTooltipTimeout = null;\n                this.#altTextTooltip?.classList.remove(\"show\");\n              });\n            }\n\n            button.classList.add(\"done\");\n            tooltip.innerText = this.#altTextDecorative ? await AnnotationEditor._l10nPromise.get(\"editor_alt_text_decorative_tooltip\") : this.#altText;\n\n            if (!tooltip.parentNode) {\n              button.append(tooltip);\n            }\n          }\n\n          getClientDimensions() {\n            return this.div.getBoundingClientRect();\n          }\n\n          get altTextData() {\n            return {\n              altText: this.#altText,\n              decorative: this.#altTextDecorative\n            };\n          }\n\n          set altTextData(_ref16) {\n            let {\n              altText,\n              decorative\n            } = _ref16;\n\n            if (this.#altText === altText && this.#altTextDecorative === decorative) {\n              return;\n            }\n\n            this.#altText = altText;\n            this.#altTextDecorative = decorative;\n            this.#setAltTextButtonState();\n          }\n\n          render() {\n            this.div = document.createElement(\"div\");\n            this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n            this.div.className = this.name;\n            this.div.setAttribute(\"id\", this.id);\n            this.div.setAttribute(\"tabIndex\", 0);\n            this.setInForeground();\n            this.div.addEventListener(\"focusin\", this.#boundFocusin);\n            this.div.addEventListener(\"focusout\", this.#boundFocusout);\n            const [parentWidth, parentHeight] = this.parentDimensions;\n\n            if (this.parentRotation % 180 !== 0) {\n              this.div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;\n              this.div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;\n            }\n\n            const [tx, ty] = this.getInitialTranslation();\n            this.translate(tx, ty);\n            (0, _tools.bindEvents)(this, this.div, [\"pointerdown\"]);\n            return this.div;\n          }\n\n          pointerdown(event) {\n            const {\n              isMac\n            } = _util.FeatureTest.platform;\n\n            if (event.button !== 0 || event.ctrlKey && isMac) {\n              event.preventDefault();\n              return;\n            }\n\n            this.#hasBeenClicked = true;\n            this.#setUpDragSession(event);\n          }\n\n          #setUpDragSession(event) {\n            if (!this._isDraggable) {\n              return;\n            }\n\n            const isSelected = this._uiManager.isSelected(this);\n\n            this._uiManager.setUpDragSession();\n\n            let pointerMoveOptions, pointerMoveCallback;\n\n            if (isSelected) {\n              pointerMoveOptions = {\n                passive: true,\n                capture: true\n              };\n\n              pointerMoveCallback = e => {\n                const [tx, ty] = this.screenToPageTranslation(e.movementX, e.movementY);\n\n                this._uiManager.dragSelectedEditors(tx, ty);\n              };\n\n              window.addEventListener(\"pointermove\", pointerMoveCallback, pointerMoveOptions);\n            }\n\n            const pointerUpCallback = () => {\n              window.removeEventListener(\"pointerup\", pointerUpCallback);\n              window.removeEventListener(\"blur\", pointerUpCallback);\n\n              if (isSelected) {\n                window.removeEventListener(\"pointermove\", pointerMoveCallback, pointerMoveOptions);\n              }\n\n              this.#hasBeenClicked = false;\n\n              if (!this._uiManager.endDragSession()) {\n                const {\n                  isMac\n                } = _util.FeatureTest.platform;\n\n                if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {\n                  this.parent.toggleSelected(this);\n                } else {\n                  this.parent.setSelected(this);\n                }\n              }\n            };\n\n            window.addEventListener(\"pointerup\", pointerUpCallback);\n            window.addEventListener(\"blur\", pointerUpCallback);\n          }\n\n          moveInDOM() {\n            this.parent?.moveEditorInDOM(this);\n          }\n\n          _setParentAndPosition(parent, x, y) {\n            parent.changeParent(this);\n            this.x = x;\n            this.y = y;\n            this.fixAndSetPosition();\n          }\n\n          getRect(tx, ty) {\n            const scale = this.parentScale;\n            const [pageWidth, pageHeight] = this.pageDimensions;\n            const [pageX, pageY] = this.pageTranslation;\n            const shiftX = tx / scale;\n            const shiftY = ty / scale;\n            const x = this.x * pageWidth;\n            const y = this.y * pageHeight;\n            const width = this.width * pageWidth;\n            const height = this.height * pageHeight;\n\n            switch (this.rotation) {\n              case 0:\n                return [x + shiftX + pageX, pageHeight - y - shiftY - height + pageY, x + shiftX + width + pageX, pageHeight - y - shiftY + pageY];\n\n              case 90:\n                return [x + shiftY + pageX, pageHeight - y + shiftX + pageY, x + shiftY + height + pageX, pageHeight - y + shiftX + width + pageY];\n\n              case 180:\n                return [x - shiftX - width + pageX, pageHeight - y + shiftY + pageY, x - shiftX + pageX, pageHeight - y + shiftY + height + pageY];\n\n              case 270:\n                return [x - shiftY - height + pageX, pageHeight - y - shiftX - width + pageY, x - shiftY + pageX, pageHeight - y - shiftX + pageY];\n\n              default:\n                throw new Error(\"Invalid rotation\");\n            }\n          }\n\n          getRectInCurrentCoords(rect, pageHeight) {\n            const [x1, y1, x2, y2] = rect;\n            const width = x2 - x1;\n            const height = y2 - y1;\n\n            switch (this.rotation) {\n              case 0:\n                return [x1, pageHeight - y2, width, height];\n\n              case 90:\n                return [x1, pageHeight - y1, height, width];\n\n              case 180:\n                return [x2, pageHeight - y1, width, height];\n\n              case 270:\n                return [x2, pageHeight - y2, height, width];\n\n              default:\n                throw new Error(\"Invalid rotation\");\n            }\n          }\n\n          onceAdded() {}\n\n          isEmpty() {\n            return false;\n          }\n\n          enableEditMode() {\n            this.#isInEditMode = true;\n          }\n\n          disableEditMode() {\n            this.#isInEditMode = false;\n          }\n\n          isInEditMode() {\n            return this.#isInEditMode;\n          }\n\n          shouldGetKeyboardEvents() {\n            return false;\n          }\n\n          needsToBeRebuilt() {\n            return this.div && !this.isAttachedToDOM;\n          }\n\n          rebuild() {\n            this.div?.addEventListener(\"focusin\", this.#boundFocusin);\n            this.div?.addEventListener(\"focusout\", this.#boundFocusout);\n          }\n\n          serialize() {\n            let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            (0, _util.unreachable)(\"An editor must be serializable\");\n          }\n\n          static deserialize(data, parent, uiManager) {\n            const editor = new this.prototype.constructor({\n              parent,\n              id: parent.getNextId(),\n              uiManager\n            });\n            editor.rotation = data.rotation;\n            const [pageWidth, pageHeight] = editor.pageDimensions;\n            const [x, y, width, height] = editor.getRectInCurrentCoords(data.rect, pageHeight);\n            editor.x = x / pageWidth;\n            editor.y = y / pageHeight;\n            editor.width = width / pageWidth;\n            editor.height = height / pageHeight;\n            return editor;\n          }\n\n          remove() {\n            this.div.removeEventListener(\"focusin\", this.#boundFocusin);\n            this.div.removeEventListener(\"focusout\", this.#boundFocusout);\n\n            if (!this.isEmpty()) {\n              this.commit();\n            }\n\n            if (this.parent) {\n              this.parent.remove(this);\n            } else {\n              this._uiManager.removeEditor(this);\n            }\n\n            this.#altTextButton?.remove();\n            this.#altTextButton = null;\n            this.#altTextTooltip = null;\n          }\n\n          get isResizable() {\n            return false;\n          }\n\n          makeResizable() {\n            if (this.isResizable) {\n              this.#createResizers();\n              this.#resizersDiv.classList.remove(\"hidden\");\n            }\n          }\n\n          select() {\n            this.makeResizable();\n            this.div?.classList.add(\"selectedEditor\");\n          }\n\n          unselect() {\n            this.#resizersDiv?.classList.add(\"hidden\");\n            this.div?.classList.remove(\"selectedEditor\");\n\n            if (this.div?.contains(document.activeElement)) {\n              this._uiManager.currentLayer.div.focus();\n            }\n          }\n\n          updateParams(type, value) {}\n\n          disableEditing() {\n            if (this.#altTextButton) {\n              this.#altTextButton.hidden = true;\n            }\n          }\n\n          enableEditing() {\n            if (this.#altTextButton) {\n              this.#altTextButton.hidden = false;\n            }\n          }\n\n          enterInEditMode() {}\n\n          get contentDiv() {\n            return this.div;\n          }\n\n          get isEditing() {\n            return this.#isEditing;\n          }\n\n          set isEditing(value) {\n            this.#isEditing = value;\n\n            if (!this.parent) {\n              return;\n            }\n\n            if (value) {\n              this.parent.setSelected(this);\n              this.parent.setActiveEditor(this);\n            } else {\n              this.parent.setActiveEditor(null);\n            }\n          }\n\n          setAspectRatio(width, height) {\n            this.#keepAspectRatio = true;\n            const aspectRatio = width / height;\n            const {\n              style\n            } = this.div;\n            style.aspectRatio = aspectRatio;\n            style.height = \"auto\";\n          }\n\n          static get MIN_SIZE() {\n            return 16;\n          }\n\n        }\n\n        exports.AnnotationEditor = AnnotationEditor;\n\n        class FakeEditor extends AnnotationEditor {\n          constructor(params) {\n            super(params);\n            this.annotationElementId = params.annotationElementId;\n            this.deleted = true;\n          }\n\n          serialize() {\n            return {\n              id: this.annotationElementId,\n              deleted: true,\n              pageIndex: this.pageIndex\n            };\n          }\n\n        }\n        /***/\n\n      },\n      /* 5 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.KeyboardManager = exports.CommandManager = exports.ColorManager = exports.AnnotationEditorUIManager = void 0;\n        exports.bindEvents = bindEvents;\n        exports.opacityToHex = opacityToHex;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        function bindEvents(obj, element, names) {\n          for (const name of names) {\n            element.addEventListener(name, obj[name].bind(obj));\n          }\n        }\n\n        function opacityToHex(opacity) {\n          return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, \"0\");\n        }\n\n        class IdManager {\n          #id = 0;\n\n          getId() {\n            return `${_util.AnnotationEditorPrefix}${this.#id++}`;\n          }\n\n        }\n\n        class ImageManager {\n          #baseId = (0, _util.getUuid)();\n          #id = 0;\n          #cache = null;\n\n          static get _isSVGFittingCanvas() {\n            const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n            const canvas = new OffscreenCanvas(1, 3);\n            const ctx = canvas.getContext(\"2d\");\n            const image = new Image();\n            image.src = svg;\n            const promise = image.decode().then(() => {\n              ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\n              return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n            });\n            return (0, _util.shadow)(this, \"_isSVGFittingCanvas\", promise);\n          }\n\n          async #get(key, rawData) {\n            this.#cache ||= new Map();\n            let data = this.#cache.get(key);\n\n            if (data === null) {\n              return null;\n            }\n\n            if (data?.bitmap) {\n              data.refCounter += 1;\n              return data;\n            }\n\n            try {\n              data ||= {\n                bitmap: null,\n                id: `image_${this.#baseId}_${this.#id++}`,\n                refCounter: 0,\n                isSvg: false\n              };\n              let image;\n\n              if (typeof rawData === \"string\") {\n                data.url = rawData;\n                const response = await fetch(rawData);\n\n                if (!response.ok) {\n                  throw new Error(response.statusText);\n                }\n\n                image = await response.blob();\n              } else {\n                image = data.file = rawData;\n              }\n\n              if (image.type === \"image/svg+xml\") {\n                const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;\n                const fileReader = new FileReader();\n                const imageElement = new Image();\n                const imagePromise = new Promise((resolve, reject) => {\n                  imageElement.onload = () => {\n                    data.bitmap = imageElement;\n                    data.isSvg = true;\n                    resolve();\n                  };\n\n                  fileReader.onload = async () => {\n                    const url = data.svgUrl = fileReader.result;\n                    imageElement.src = (await mustRemoveAspectRatioPromise) ? `${url}#svgView(preserveAspectRatio(none))` : url;\n                  };\n\n                  imageElement.onerror = fileReader.onerror = reject;\n                });\n                fileReader.readAsDataURL(image);\n                await imagePromise;\n              } else {\n                data.bitmap = await createImageBitmap(image);\n              }\n\n              data.refCounter = 1;\n            } catch (e) {\n              console.error(e);\n              data = null;\n            }\n\n            this.#cache.set(key, data);\n\n            if (data) {\n              this.#cache.set(data.id, data);\n            }\n\n            return data;\n          }\n\n          async getFromFile(file) {\n            const {\n              lastModified,\n              name,\n              size,\n              type\n            } = file;\n            return this.#get(`${lastModified}_${name}_${size}_${type}`, file);\n          }\n\n          async getFromUrl(url) {\n            return this.#get(url, url);\n          }\n\n          async getFromId(id) {\n            this.#cache ||= new Map();\n            const data = this.#cache.get(id);\n\n            if (!data) {\n              return null;\n            }\n\n            if (data.bitmap) {\n              data.refCounter += 1;\n              return data;\n            }\n\n            if (data.file) {\n              return this.getFromFile(data.file);\n            }\n\n            return this.getFromUrl(data.url);\n          }\n\n          getSvgUrl(id) {\n            const data = this.#cache.get(id);\n\n            if (!data?.isSvg) {\n              return null;\n            }\n\n            return data.svgUrl;\n          }\n\n          deleteId(id) {\n            this.#cache ||= new Map();\n            const data = this.#cache.get(id);\n\n            if (!data) {\n              return;\n            }\n\n            data.refCounter -= 1;\n\n            if (data.refCounter !== 0) {\n              return;\n            }\n\n            data.bitmap = null;\n          }\n\n          isValidId(id) {\n            return id.startsWith(`image_${this.#baseId}_`);\n          }\n\n        }\n\n        class CommandManager {\n          #commands = [];\n          #locked = false;\n          #maxSize;\n          #position = -1;\n\n          constructor() {\n            let maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n            this.#maxSize = maxSize;\n          }\n\n          add(_ref17) {\n            let {\n              cmd,\n              undo,\n              mustExec,\n              type = NaN,\n              overwriteIfSameType = false,\n              keepUndo = false\n            } = _ref17;\n\n            if (mustExec) {\n              cmd();\n            }\n\n            if (this.#locked) {\n              return;\n            }\n\n            const save = {\n              cmd,\n              undo,\n              type\n            };\n\n            if (this.#position === -1) {\n              if (this.#commands.length > 0) {\n                this.#commands.length = 0;\n              }\n\n              this.#position = 0;\n              this.#commands.push(save);\n              return;\n            }\n\n            if (overwriteIfSameType && this.#commands[this.#position].type === type) {\n              if (keepUndo) {\n                save.undo = this.#commands[this.#position].undo;\n              }\n\n              this.#commands[this.#position] = save;\n              return;\n            }\n\n            const next = this.#position + 1;\n\n            if (next === this.#maxSize) {\n              this.#commands.splice(0, 1);\n            } else {\n              this.#position = next;\n\n              if (next < this.#commands.length) {\n                this.#commands.splice(next);\n              }\n            }\n\n            this.#commands.push(save);\n          }\n\n          undo() {\n            if (this.#position === -1) {\n              return;\n            }\n\n            this.#locked = true;\n            this.#commands[this.#position].undo();\n            this.#locked = false;\n            this.#position -= 1;\n          }\n\n          redo() {\n            if (this.#position < this.#commands.length - 1) {\n              this.#position += 1;\n              this.#locked = true;\n              this.#commands[this.#position].cmd();\n              this.#locked = false;\n            }\n          }\n\n          hasSomethingToUndo() {\n            return this.#position !== -1;\n          }\n\n          hasSomethingToRedo() {\n            return this.#position < this.#commands.length - 1;\n          }\n\n          destroy() {\n            this.#commands = null;\n          }\n\n        }\n\n        exports.CommandManager = CommandManager;\n\n        class KeyboardManager {\n          constructor(callbacks) {\n            this.buffer = [];\n            this.callbacks = new Map();\n            this.allKeys = new Set();\n            const {\n              isMac\n            } = _util.FeatureTest.platform;\n\n            for (const [keys, callback, options = {}] of callbacks) {\n              for (const key of keys) {\n                const isMacKey = key.startsWith(\"mac+\");\n\n                if (isMac && isMacKey) {\n                  this.callbacks.set(key.slice(4), {\n                    callback,\n                    options\n                  });\n                  this.allKeys.add(key.split(\"+\").at(-1));\n                } else if (!isMac && !isMacKey) {\n                  this.callbacks.set(key, {\n                    callback,\n                    options\n                  });\n                  this.allKeys.add(key.split(\"+\").at(-1));\n                }\n              }\n            }\n          }\n\n          #serialize(event) {\n            if (event.altKey) {\n              this.buffer.push(\"alt\");\n            }\n\n            if (event.ctrlKey) {\n              this.buffer.push(\"ctrl\");\n            }\n\n            if (event.metaKey) {\n              this.buffer.push(\"meta\");\n            }\n\n            if (event.shiftKey) {\n              this.buffer.push(\"shift\");\n            }\n\n            this.buffer.push(event.key);\n            const str = this.buffer.join(\"+\");\n            this.buffer.length = 0;\n            return str;\n          }\n\n          exec(self, event) {\n            if (!this.allKeys.has(event.key)) {\n              return;\n            }\n\n            const info = this.callbacks.get(this.#serialize(event));\n\n            if (!info) {\n              return;\n            }\n\n            const {\n              callback,\n              options: {\n                bubbles = false,\n                args = [],\n                checker = null\n              }\n            } = info;\n\n            if (checker && !checker(self, event)) {\n              return;\n            }\n\n            callback.bind(self, ...args)();\n\n            if (!bubbles) {\n              event.stopPropagation();\n              event.preventDefault();\n            }\n          }\n\n        }\n\n        exports.KeyboardManager = KeyboardManager;\n\n        class ColorManager {\n          static _colorsMapping = new Map([[\"CanvasText\", [0, 0, 0]], [\"Canvas\", [255, 255, 255]]]);\n\n          get _colors() {\n            const colors = new Map([[\"CanvasText\", null], [\"Canvas\", null]]);\n            (0, _display_utils.getColorValues)(colors);\n            return (0, _util.shadow)(this, \"_colors\", colors);\n          }\n\n          convert(color) {\n            const rgb = (0, _display_utils.getRGB)(color);\n\n            if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n              return rgb;\n            }\n\n            for (const [name, RGB] of this._colors) {\n              if (RGB.every((x, i) => x === rgb[i])) {\n                return ColorManager._colorsMapping.get(name);\n              }\n            }\n\n            return rgb;\n          }\n\n          getHexCode(name) {\n            const rgb = this._colors.get(name);\n\n            if (!rgb) {\n              return name;\n            }\n\n            return _util.Util.makeHexColor(...rgb);\n          }\n\n        }\n\n        exports.ColorManager = ColorManager;\n\n        class AnnotationEditorUIManager {\n          #activeEditor = null;\n          #allEditors = new Map();\n          #allLayers = new Map();\n          #altTextManager = null;\n          #annotationStorage = null;\n          #commandManager = new CommandManager();\n          #currentPageIndex = 0;\n          #deletedAnnotationsElementIds = new Set();\n          #draggingEditors = null;\n          #editorTypes = null;\n          #editorsToRescale = new Set();\n          #filterFactory = null;\n          #idManager = new IdManager();\n          #isEnabled = false;\n          #isWaiting = false;\n          #lastActiveElement = null;\n          #mode = _util.AnnotationEditorType.NONE;\n          #selectedEditors = new Set();\n          #pageColors = null;\n          #boundBlur = this.blur.bind(this);\n          #boundFocus = this.focus.bind(this);\n          #boundCopy = this.copy.bind(this);\n          #boundCut = this.cut.bind(this);\n          #boundPaste = this.paste.bind(this);\n          #boundKeydown = this.keydown.bind(this);\n          #boundOnEditingAction = this.onEditingAction.bind(this);\n          #boundOnPageChanging = this.onPageChanging.bind(this);\n          #boundOnScaleChanging = this.onScaleChanging.bind(this);\n          #boundOnRotationChanging = this.onRotationChanging.bind(this);\n          #previousStates = {\n            isEditing: false,\n            isEmpty: true,\n            hasSomethingToUndo: false,\n            hasSomethingToRedo: false,\n            hasSelectedEditor: false\n          };\n          #translation = [0, 0];\n          #translationTimeoutId = null;\n          #container = null;\n          #viewer = null;\n          static TRANSLATE_SMALL = 1;\n          static TRANSLATE_BIG = 10;\n\n          static get _keyboardManager() {\n            const proto = AnnotationEditorUIManager.prototype;\n\n            const arrowChecker = self => {\n              const {\n                activeElement\n              } = document;\n              return activeElement && self.#container.contains(activeElement) && self.hasSomethingToControl();\n            };\n\n            const small = this.TRANSLATE_SMALL;\n            const big = this.TRANSLATE_BIG;\n            return (0, _util.shadow)(this, \"_keyboardManager\", new KeyboardManager([[[\"ctrl+a\", \"mac+meta+a\"], proto.selectAll], [[\"ctrl+z\", \"mac+meta+z\"], proto.undo], [[\"ctrl+y\", \"ctrl+shift+z\", \"mac+meta+shift+z\", \"ctrl+shift+Z\", \"mac+meta+shift+Z\"], proto.redo], [[\"Backspace\", \"alt+Backspace\", \"ctrl+Backspace\", \"shift+Backspace\", \"mac+Backspace\", \"mac+alt+Backspace\", \"mac+ctrl+Backspace\", \"Delete\", \"ctrl+Delete\", \"shift+Delete\", \"mac+Delete\"], proto.delete], [[\"Escape\", \"mac+Escape\"], proto.unselectAll], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto.translateSelectedEditors, {\n              args: [-small, 0],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto.translateSelectedEditors, {\n              args: [-big, 0],\n              checker: arrowChecker\n            }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto.translateSelectedEditors, {\n              args: [small, 0],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto.translateSelectedEditors, {\n              args: [big, 0],\n              checker: arrowChecker\n            }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto.translateSelectedEditors, {\n              args: [0, -small],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto.translateSelectedEditors, {\n              args: [0, -big],\n              checker: arrowChecker\n            }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto.translateSelectedEditors, {\n              args: [0, small],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto.translateSelectedEditors, {\n              args: [0, big],\n              checker: arrowChecker\n            }]]));\n          }\n\n          constructor(container, viewer, altTextManager, eventBus, pdfDocument, pageColors) {\n            this.#container = container;\n            this.#viewer = viewer;\n            this.#altTextManager = altTextManager;\n            this._eventBus = eventBus;\n\n            this._eventBus._on(\"editingaction\", this.#boundOnEditingAction);\n\n            this._eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\n\n            this._eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\n\n            this._eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\n\n            this.#annotationStorage = pdfDocument.annotationStorage;\n            this.#filterFactory = pdfDocument.filterFactory;\n            this.#pageColors = pageColors;\n            this.viewParameters = {\n              realScale: _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS,\n              rotation: 0\n            };\n          }\n\n          destroy() {\n            this.#removeKeyboardManager();\n            this.#removeFocusManager();\n\n            this._eventBus._off(\"editingaction\", this.#boundOnEditingAction);\n\n            this._eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\n\n            this._eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\n\n            this._eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\n\n            for (const layer of this.#allLayers.values()) {\n              layer.destroy();\n            }\n\n            this.#allLayers.clear();\n            this.#allEditors.clear();\n            this.#editorsToRescale.clear();\n            this.#activeEditor = null;\n            this.#selectedEditors.clear();\n            this.#commandManager.destroy();\n            this.#altTextManager.destroy();\n          }\n\n          get hcmFilter() {\n            return (0, _util.shadow)(this, \"hcmFilter\", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : \"none\");\n          }\n\n          get direction() {\n            return (0, _util.shadow)(this, \"direction\", getComputedStyle(this.#container).direction);\n          }\n\n          editAltText(editor) {\n            this.#altTextManager?.editAltText(this, editor);\n          }\n\n          onPageChanging(_ref18) {\n            let {\n              pageNumber\n            } = _ref18;\n            this.#currentPageIndex = pageNumber - 1;\n          }\n\n          focusMainContainer() {\n            this.#container.focus();\n          }\n\n          findParent(x, y) {\n            for (const layer of this.#allLayers.values()) {\n              const {\n                x: layerX,\n                y: layerY,\n                width,\n                height\n              } = layer.div.getBoundingClientRect();\n\n              if (x >= layerX && x <= layerX + width && y >= layerY && y <= layerY + height) {\n                return layer;\n              }\n            }\n\n            return null;\n          }\n\n          disableUserSelect() {\n            let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.#viewer.classList.toggle(\"noUserSelect\", value);\n          }\n\n          addShouldRescale(editor) {\n            this.#editorsToRescale.add(editor);\n          }\n\n          removeShouldRescale(editor) {\n            this.#editorsToRescale.delete(editor);\n          }\n\n          onScaleChanging(_ref19) {\n            let {\n              scale\n            } = _ref19;\n            this.commitOrRemove();\n            this.viewParameters.realScale = scale * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS;\n\n            for (const editor of this.#editorsToRescale) {\n              editor.onScaleChanging();\n            }\n          }\n\n          onRotationChanging(_ref20) {\n            let {\n              pagesRotation\n            } = _ref20;\n            this.commitOrRemove();\n            this.viewParameters.rotation = pagesRotation;\n          }\n\n          addToAnnotationStorage(editor) {\n            if (!editor.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor.id)) {\n              this.#annotationStorage.setValue(editor.id, editor);\n            }\n          }\n\n          #addFocusManager() {\n            window.addEventListener(\"focus\", this.#boundFocus);\n            window.addEventListener(\"blur\", this.#boundBlur);\n          }\n\n          #removeFocusManager() {\n            window.removeEventListener(\"focus\", this.#boundFocus);\n            window.removeEventListener(\"blur\", this.#boundBlur);\n          }\n\n          blur() {\n            if (!this.hasSelection) {\n              return;\n            }\n\n            const {\n              activeElement\n            } = document;\n\n            for (const editor of this.#selectedEditors) {\n              if (editor.div.contains(activeElement)) {\n                this.#lastActiveElement = [editor, activeElement];\n                editor._focusEventsAllowed = false;\n                break;\n              }\n            }\n          }\n\n          focus() {\n            if (!this.#lastActiveElement) {\n              return;\n            }\n\n            const [lastEditor, lastActiveElement] = this.#lastActiveElement;\n            this.#lastActiveElement = null;\n            lastActiveElement.addEventListener(\"focusin\", () => {\n              lastEditor._focusEventsAllowed = true;\n            }, {\n              once: true\n            });\n            lastActiveElement.focus();\n          }\n\n          #addKeyboardManager() {\n            window.addEventListener(\"keydown\", this.#boundKeydown, {\n              capture: true\n            });\n          }\n\n          #removeKeyboardManager() {\n            window.removeEventListener(\"keydown\", this.#boundKeydown, {\n              capture: true\n            });\n          }\n\n          #addCopyPasteListeners() {\n            document.addEventListener(\"copy\", this.#boundCopy);\n            document.addEventListener(\"cut\", this.#boundCut);\n            document.addEventListener(\"paste\", this.#boundPaste);\n          }\n\n          #removeCopyPasteListeners() {\n            document.removeEventListener(\"copy\", this.#boundCopy);\n            document.removeEventListener(\"cut\", this.#boundCut);\n            document.removeEventListener(\"paste\", this.#boundPaste);\n          }\n\n          addEditListeners() {\n            this.#addKeyboardManager();\n            this.#addCopyPasteListeners();\n          }\n\n          removeEditListeners() {\n            this.#removeKeyboardManager();\n            this.#removeCopyPasteListeners();\n          }\n\n          copy(event) {\n            event.preventDefault();\n            this.#activeEditor?.commitOrRemove();\n\n            if (!this.hasSelection) {\n              return;\n            }\n\n            const editors = [];\n\n            for (const editor of this.#selectedEditors) {\n              const serialized = editor.serialize(true);\n\n              if (serialized) {\n                editors.push(serialized);\n              }\n            }\n\n            if (editors.length === 0) {\n              return;\n            }\n\n            event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n          }\n\n          cut(event) {\n            this.copy(event);\n            this.delete();\n          }\n\n          paste(event) {\n            event.preventDefault();\n            const {\n              clipboardData\n            } = event;\n\n            for (const item of clipboardData.items) {\n              for (const editorType of this.#editorTypes) {\n                if (editorType.isHandlingMimeForPasting(item.type)) {\n                  editorType.paste(item, this.currentLayer);\n                  return;\n                }\n              }\n            }\n\n            let data = clipboardData.getData(\"application/pdfjs\");\n\n            if (!data) {\n              return;\n            }\n\n            try {\n              data = JSON.parse(data);\n            } catch (ex) {\n              (0, _util.warn)(`paste: \"${ex.message}\".`);\n              return;\n            }\n\n            if (!Array.isArray(data)) {\n              return;\n            }\n\n            this.unselectAll();\n            const layer = this.currentLayer;\n\n            try {\n              const newEditors = [];\n\n              for (const editor of data) {\n                const deserializedEditor = layer.deserialize(editor);\n\n                if (!deserializedEditor) {\n                  return;\n                }\n\n                newEditors.push(deserializedEditor);\n              }\n\n              const cmd = () => {\n                for (const editor of newEditors) {\n                  this.#addEditorToLayer(editor);\n                }\n\n                this.#selectEditors(newEditors);\n              };\n\n              const undo = () => {\n                for (const editor of newEditors) {\n                  editor.remove();\n                }\n              };\n\n              this.addCommands({\n                cmd,\n                undo,\n                mustExec: true\n              });\n            } catch (ex) {\n              (0, _util.warn)(`paste: \"${ex.message}\".`);\n            }\n          }\n\n          keydown(event) {\n            if (!this.getActive()?.shouldGetKeyboardEvents()) {\n              AnnotationEditorUIManager._keyboardManager.exec(this, event);\n            }\n          }\n\n          onEditingAction(details) {\n            if ([\"undo\", \"redo\", \"delete\", \"selectAll\"].includes(details.name)) {\n              this[details.name]();\n            }\n          }\n\n          #dispatchUpdateStates(details) {\n            const hasChanged = Object.entries(details).some(_ref21 => {\n              let [key, value] = _ref21;\n              return this.#previousStates[key] !== value;\n            });\n\n            if (hasChanged) {\n              this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n                source: this,\n                details: Object.assign(this.#previousStates, details)\n              });\n            }\n          }\n\n          #dispatchUpdateUI(details) {\n            this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n              source: this,\n              details\n            });\n          }\n\n          setEditingState(isEditing) {\n            if (isEditing) {\n              this.#addFocusManager();\n              this.#addKeyboardManager();\n              this.#addCopyPasteListeners();\n              this.#dispatchUpdateStates({\n                isEditing: this.#mode !== _util.AnnotationEditorType.NONE,\n                isEmpty: this.#isEmpty(),\n                hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n                hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n                hasSelectedEditor: false\n              });\n            } else {\n              this.#removeFocusManager();\n              this.#removeKeyboardManager();\n              this.#removeCopyPasteListeners();\n              this.#dispatchUpdateStates({\n                isEditing: false\n              });\n              this.disableUserSelect(false);\n            }\n          }\n\n          registerEditorTypes(types) {\n            if (this.#editorTypes) {\n              return;\n            }\n\n            this.#editorTypes = types;\n\n            for (const editorType of this.#editorTypes) {\n              this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\n            }\n          }\n\n          getId() {\n            return this.#idManager.getId();\n          }\n\n          get currentLayer() {\n            return this.#allLayers.get(this.#currentPageIndex);\n          }\n\n          getLayer(pageIndex) {\n            return this.#allLayers.get(pageIndex);\n          }\n\n          get currentPageIndex() {\n            return this.#currentPageIndex;\n          }\n\n          addLayer(layer) {\n            this.#allLayers.set(layer.pageIndex, layer);\n\n            if (this.#isEnabled) {\n              layer.enable();\n            } else {\n              layer.disable();\n            }\n          }\n\n          removeLayer(layer) {\n            this.#allLayers.delete(layer.pageIndex);\n          }\n\n          updateMode(mode) {\n            let editId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (this.#mode === mode) {\n              return;\n            }\n\n            this.#mode = mode;\n\n            if (mode === _util.AnnotationEditorType.NONE) {\n              this.setEditingState(false);\n              this.#disableAll();\n              return;\n            }\n\n            this.setEditingState(true);\n            this.#enableAll();\n            this.unselectAll();\n\n            for (const layer of this.#allLayers.values()) {\n              layer.updateMode(mode);\n            }\n\n            if (!editId) {\n              return;\n            }\n\n            for (const editor of this.#allEditors.values()) {\n              if (editor.annotationElementId === editId) {\n                this.setSelected(editor);\n                editor.enterInEditMode();\n                break;\n              }\n            }\n          }\n\n          updateToolbar(mode) {\n            if (mode === this.#mode) {\n              return;\n            }\n\n            this._eventBus.dispatch(\"switchannotationeditormode\", {\n              source: this,\n              mode\n            });\n          }\n\n          updateParams(type, value) {\n            if (!this.#editorTypes) {\n              return;\n            }\n\n            if (type === _util.AnnotationEditorParamsType.CREATE) {\n              this.currentLayer.addNewEditor(type);\n              return;\n            }\n\n            for (const editor of this.#selectedEditors) {\n              editor.updateParams(type, value);\n            }\n\n            for (const editorType of this.#editorTypes) {\n              editorType.updateDefaultParams(type, value);\n            }\n          }\n\n          enableWaiting() {\n            let mustWait = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (this.#isWaiting === mustWait) {\n              return;\n            }\n\n            this.#isWaiting = mustWait;\n\n            for (const layer of this.#allLayers.values()) {\n              if (mustWait) {\n                layer.disableClick();\n              } else {\n                layer.enableClick();\n              }\n\n              layer.div.classList.toggle(\"waiting\", mustWait);\n            }\n          }\n\n          #enableAll() {\n            if (!this.#isEnabled) {\n              this.#isEnabled = true;\n\n              for (const layer of this.#allLayers.values()) {\n                layer.enable();\n              }\n            }\n          }\n\n          #disableAll() {\n            this.unselectAll();\n\n            if (this.#isEnabled) {\n              this.#isEnabled = false;\n\n              for (const layer of this.#allLayers.values()) {\n                layer.disable();\n              }\n            }\n          }\n\n          getEditors(pageIndex) {\n            const editors = [];\n\n            for (const editor of this.#allEditors.values()) {\n              if (editor.pageIndex === pageIndex) {\n                editors.push(editor);\n              }\n            }\n\n            return editors;\n          }\n\n          getEditor(id) {\n            return this.#allEditors.get(id);\n          }\n\n          addEditor(editor) {\n            this.#allEditors.set(editor.id, editor);\n          }\n\n          removeEditor(editor) {\n            this.#allEditors.delete(editor.id);\n            this.unselect(editor);\n\n            if (!editor.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)) {\n              this.#annotationStorage?.remove(editor.id);\n            }\n          }\n\n          addDeletedAnnotationElement(editor) {\n            this.#deletedAnnotationsElementIds.add(editor.annotationElementId);\n            editor.deleted = true;\n          }\n\n          isDeletedAnnotationElement(annotationElementId) {\n            return this.#deletedAnnotationsElementIds.has(annotationElementId);\n          }\n\n          removeDeletedAnnotationElement(editor) {\n            this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);\n            editor.deleted = false;\n          }\n\n          #addEditorToLayer(editor) {\n            const layer = this.#allLayers.get(editor.pageIndex);\n\n            if (layer) {\n              layer.addOrRebuild(editor);\n            } else {\n              this.addEditor(editor);\n            }\n          }\n\n          setActiveEditor(editor) {\n            if (this.#activeEditor === editor) {\n              return;\n            }\n\n            this.#activeEditor = editor;\n\n            if (editor) {\n              this.#dispatchUpdateUI(editor.propertiesToUpdate);\n            }\n          }\n\n          toggleSelected(editor) {\n            if (this.#selectedEditors.has(editor)) {\n              this.#selectedEditors.delete(editor);\n              editor.unselect();\n              this.#dispatchUpdateStates({\n                hasSelectedEditor: this.hasSelection\n              });\n              return;\n            }\n\n            this.#selectedEditors.add(editor);\n            editor.select();\n            this.#dispatchUpdateUI(editor.propertiesToUpdate);\n            this.#dispatchUpdateStates({\n              hasSelectedEditor: true\n            });\n          }\n\n          setSelected(editor) {\n            for (const ed of this.#selectedEditors) {\n              if (ed !== editor) {\n                ed.unselect();\n              }\n            }\n\n            this.#selectedEditors.clear();\n            this.#selectedEditors.add(editor);\n            editor.select();\n            this.#dispatchUpdateUI(editor.propertiesToUpdate);\n            this.#dispatchUpdateStates({\n              hasSelectedEditor: true\n            });\n          }\n\n          isSelected(editor) {\n            return this.#selectedEditors.has(editor);\n          }\n\n          unselect(editor) {\n            editor.unselect();\n            this.#selectedEditors.delete(editor);\n            this.#dispatchUpdateStates({\n              hasSelectedEditor: this.hasSelection\n            });\n          }\n\n          get hasSelection() {\n            return this.#selectedEditors.size !== 0;\n          }\n\n          undo() {\n            this.#commandManager.undo();\n            this.#dispatchUpdateStates({\n              hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n              hasSomethingToRedo: true,\n              isEmpty: this.#isEmpty()\n            });\n          }\n\n          redo() {\n            this.#commandManager.redo();\n            this.#dispatchUpdateStates({\n              hasSomethingToUndo: true,\n              hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n              isEmpty: this.#isEmpty()\n            });\n          }\n\n          addCommands(params) {\n            this.#commandManager.add(params);\n            this.#dispatchUpdateStates({\n              hasSomethingToUndo: true,\n              hasSomethingToRedo: false,\n              isEmpty: this.#isEmpty()\n            });\n          }\n\n          #isEmpty() {\n            if (this.#allEditors.size === 0) {\n              return true;\n            }\n\n            if (this.#allEditors.size === 1) {\n              for (const editor of this.#allEditors.values()) {\n                return editor.isEmpty();\n              }\n            }\n\n            return false;\n          }\n\n          delete() {\n            this.commitOrRemove();\n\n            if (!this.hasSelection) {\n              return;\n            }\n\n            const editors = [...this.#selectedEditors];\n\n            const cmd = () => {\n              for (const editor of editors) {\n                editor.remove();\n              }\n            };\n\n            const undo = () => {\n              for (const editor of editors) {\n                this.#addEditorToLayer(editor);\n              }\n            };\n\n            this.addCommands({\n              cmd,\n              undo,\n              mustExec: true\n            });\n          }\n\n          commitOrRemove() {\n            this.#activeEditor?.commitOrRemove();\n          }\n\n          hasSomethingToControl() {\n            return this.#activeEditor || this.hasSelection;\n          }\n\n          #selectEditors(editors) {\n            this.#selectedEditors.clear();\n\n            for (const editor of editors) {\n              if (editor.isEmpty()) {\n                continue;\n              }\n\n              this.#selectedEditors.add(editor);\n              editor.select();\n            }\n\n            this.#dispatchUpdateStates({\n              hasSelectedEditor: true\n            });\n          }\n\n          selectAll() {\n            for (const editor of this.#selectedEditors) {\n              editor.commit();\n            }\n\n            this.#selectEditors(this.#allEditors.values());\n          }\n\n          unselectAll() {\n            if (this.#activeEditor) {\n              this.#activeEditor.commitOrRemove();\n              return;\n            }\n\n            if (!this.hasSelection) {\n              return;\n            }\n\n            for (const editor of this.#selectedEditors) {\n              editor.unselect();\n            }\n\n            this.#selectedEditors.clear();\n            this.#dispatchUpdateStates({\n              hasSelectedEditor: false\n            });\n          }\n\n          translateSelectedEditors(x, y) {\n            let noCommit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            if (!noCommit) {\n              this.commitOrRemove();\n            }\n\n            if (!this.hasSelection) {\n              return;\n            }\n\n            this.#translation[0] += x;\n            this.#translation[1] += y;\n            const [totalX, totalY] = this.#translation;\n            const editors = [...this.#selectedEditors];\n            const TIME_TO_WAIT = 1000;\n\n            if (this.#translationTimeoutId) {\n              clearTimeout(this.#translationTimeoutId);\n            }\n\n            this.#translationTimeoutId = setTimeout(() => {\n              this.#translationTimeoutId = null;\n              this.#translation[0] = this.#translation[1] = 0;\n              this.addCommands({\n                cmd: () => {\n                  for (const editor of editors) {\n                    if (this.#allEditors.has(editor.id)) {\n                      editor.translateInPage(totalX, totalY);\n                    }\n                  }\n                },\n                undo: () => {\n                  for (const editor of editors) {\n                    if (this.#allEditors.has(editor.id)) {\n                      editor.translateInPage(-totalX, -totalY);\n                    }\n                  }\n                },\n                mustExec: false\n              });\n            }, TIME_TO_WAIT);\n\n            for (const editor of editors) {\n              editor.translateInPage(x, y);\n            }\n          }\n\n          setUpDragSession() {\n            if (!this.hasSelection) {\n              return;\n            }\n\n            this.disableUserSelect(true);\n            this.#draggingEditors = new Map();\n\n            for (const editor of this.#selectedEditors) {\n              this.#draggingEditors.set(editor, {\n                savedX: editor.x,\n                savedY: editor.y,\n                savedPageIndex: editor.pageIndex,\n                newX: 0,\n                newY: 0,\n                newPageIndex: -1\n              });\n            }\n          }\n\n          endDragSession() {\n            if (!this.#draggingEditors) {\n              return false;\n            }\n\n            this.disableUserSelect(false);\n            const map = this.#draggingEditors;\n            this.#draggingEditors = null;\n            let mustBeAddedInUndoStack = false;\n\n            for (const [{\n              x,\n              y,\n              pageIndex\n            }, value] of map) {\n              value.newX = x;\n              value.newY = y;\n              value.newPageIndex = pageIndex;\n              mustBeAddedInUndoStack ||= x !== value.savedX || y !== value.savedY || pageIndex !== value.savedPageIndex;\n            }\n\n            if (!mustBeAddedInUndoStack) {\n              return false;\n            }\n\n            const move = (editor, x, y, pageIndex) => {\n              if (this.#allEditors.has(editor.id)) {\n                const parent = this.#allLayers.get(pageIndex);\n\n                if (parent) {\n                  editor._setParentAndPosition(parent, x, y);\n                } else {\n                  editor.pageIndex = pageIndex;\n                  editor.x = x;\n                  editor.y = y;\n                }\n              }\n            };\n\n            this.addCommands({\n              cmd: () => {\n                for (const [editor, {\n                  newX,\n                  newY,\n                  newPageIndex\n                }] of map) {\n                  move(editor, newX, newY, newPageIndex);\n                }\n              },\n              undo: () => {\n                for (const [editor, {\n                  savedX,\n                  savedY,\n                  savedPageIndex\n                }] of map) {\n                  move(editor, savedX, savedY, savedPageIndex);\n                }\n              },\n              mustExec: true\n            });\n            return true;\n          }\n\n          dragSelectedEditors(tx, ty) {\n            if (!this.#draggingEditors) {\n              return;\n            }\n\n            for (const editor of this.#draggingEditors.keys()) {\n              editor.drag(tx, ty);\n            }\n          }\n\n          rebuild(editor) {\n            if (editor.parent === null) {\n              const parent = this.getLayer(editor.pageIndex);\n\n              if (parent) {\n                parent.changeParent(editor);\n                parent.addOrRebuild(editor);\n              } else {\n                this.addEditor(editor);\n                this.addToAnnotationStorage(editor);\n                editor.rebuild();\n              }\n            } else {\n              editor.parent.addOrRebuild(editor);\n            }\n          }\n\n          isActive(editor) {\n            return this.#activeEditor === editor;\n          }\n\n          getActive() {\n            return this.#activeEditor;\n          }\n\n          getMode() {\n            return this.#mode;\n          }\n\n          get imageManager() {\n            return (0, _util.shadow)(this, \"imageManager\", new ImageManager());\n          }\n\n        }\n\n        exports.AnnotationEditorUIManager = AnnotationEditorUIManager;\n        /***/\n      },\n      /* 6 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StatTimer = exports.RenderingCancelledException = exports.PixelsPerInch = exports.PageViewport = exports.PDFDateString = exports.DOMStandardFontDataFactory = exports.DOMSVGFactory = exports.DOMFilterFactory = exports.DOMCanvasFactory = exports.DOMCMapReaderFactory = void 0;\n        exports.deprecated = deprecated;\n        exports.getColorValues = getColorValues;\n        exports.getCurrentTransform = getCurrentTransform;\n        exports.getCurrentTransformInverse = getCurrentTransformInverse;\n        exports.getFilenameFromUrl = getFilenameFromUrl;\n        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;\n        exports.getRGB = getRGB;\n        exports.getXfaPageViewport = getXfaPageViewport;\n        exports.isDataScheme = isDataScheme;\n        exports.isPdfFile = isPdfFile;\n        exports.isValidFetchUrl = isValidFetchUrl;\n        exports.loadScript = loadScript;\n        exports.noContextMenu = noContextMenu;\n        exports.setLayerDimensions = setLayerDimensions;\n\n        var _base_factory = __w_pdfjs_require__(7);\n\n        var _util = __w_pdfjs_require__(1);\n\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n\n        class PixelsPerInch {\n          static CSS = 96.0;\n          static PDF = 72.0;\n          static PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n        }\n\n        exports.PixelsPerInch = PixelsPerInch;\n\n        class DOMFilterFactory extends _base_factory.BaseFilterFactory {\n          #_cache;\n          #_defs;\n          #docId;\n          #document;\n          #hcmFilter;\n          #hcmKey;\n          #hcmUrl;\n          #hcmHighlightFilter;\n          #hcmHighlightKey;\n          #hcmHighlightUrl;\n          #id = 0;\n\n          constructor() {\n            let {\n              docId,\n              ownerDocument = globalThis.document\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            super();\n            this.#docId = docId;\n            this.#document = ownerDocument;\n          }\n\n          get #cache() {\n            return this.#_cache ||= new Map();\n          }\n\n          get #defs() {\n            if (!this.#_defs) {\n              const div = this.#document.createElement(\"div\");\n              const {\n                style\n              } = div;\n              style.visibility = \"hidden\";\n              style.contain = \"strict\";\n              style.width = style.height = 0;\n              style.position = \"absolute\";\n              style.top = style.left = 0;\n              style.zIndex = -1;\n              const svg = this.#document.createElementNS(SVG_NS, \"svg\");\n              svg.setAttribute(\"width\", 0);\n              svg.setAttribute(\"height\", 0);\n              this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\n              div.append(svg);\n              svg.append(this.#_defs);\n              this.#document.body.append(div);\n            }\n\n            return this.#_defs;\n          }\n\n          addFilter(maps) {\n            if (!maps) {\n              return \"none\";\n            }\n\n            let value = this.#cache.get(maps);\n\n            if (value) {\n              return value;\n            }\n\n            let tableR, tableG, tableB, key;\n\n            if (maps.length === 1) {\n              const mapR = maps[0];\n              const buffer = new Array(256);\n\n              for (let i = 0; i < 256; i++) {\n                buffer[i] = mapR[i] / 255;\n              }\n\n              key = tableR = tableG = tableB = buffer.join(\",\");\n            } else {\n              const [mapR, mapG, mapB] = maps;\n              const bufferR = new Array(256);\n              const bufferG = new Array(256);\n              const bufferB = new Array(256);\n\n              for (let i = 0; i < 256; i++) {\n                bufferR[i] = mapR[i] / 255;\n                bufferG[i] = mapG[i] / 255;\n                bufferB[i] = mapB[i] / 255;\n              }\n\n              tableR = bufferR.join(\",\");\n              tableG = bufferG.join(\",\");\n              tableB = bufferB.join(\",\");\n              key = `${tableR}${tableG}${tableB}`;\n            }\n\n            value = this.#cache.get(key);\n\n            if (value) {\n              this.#cache.set(maps, value);\n              return value;\n            }\n\n            const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\n            const url = `url(#${id})`;\n            this.#cache.set(maps, url);\n            this.#cache.set(key, url);\n            const filter = this.#createFilter(id);\n            this.#addTransferMapConversion(tableR, tableG, tableB, filter);\n            return url;\n          }\n\n          addHCMFilter(fgColor, bgColor) {\n            const key = `${fgColor}-${bgColor}`;\n\n            if (this.#hcmKey === key) {\n              return this.#hcmUrl;\n            }\n\n            this.#hcmKey = key;\n            this.#hcmUrl = \"none\";\n            this.#hcmFilter?.remove();\n\n            if (!fgColor || !bgColor) {\n              return this.#hcmUrl;\n            }\n\n            const fgRGB = this.#getRGB(fgColor);\n            fgColor = _util.Util.makeHexColor(...fgRGB);\n            const bgRGB = this.#getRGB(bgColor);\n            bgColor = _util.Util.makeHexColor(...bgRGB);\n            this.#defs.style.color = \"\";\n\n            if (fgColor === \"#000000\" && bgColor === \"#ffffff\" || fgColor === bgColor) {\n              return this.#hcmUrl;\n            }\n\n            const map = new Array(256);\n\n            for (let i = 0; i <= 255; i++) {\n              const x = i / 255;\n              map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n            }\n\n            const table = map.join(\",\");\n            const id = `g_${this.#docId}_hcm_filter`;\n            const filter = this.#hcmHighlightFilter = this.#createFilter(id);\n            this.#addTransferMapConversion(table, table, table, filter);\n            this.#addGrayConversion(filter);\n\n            const getSteps = (c, n) => {\n              const start = fgRGB[c] / 255;\n              const end = bgRGB[c] / 255;\n              const arr = new Array(n + 1);\n\n              for (let i = 0; i <= n; i++) {\n                arr[i] = start + i / n * (end - start);\n              }\n\n              return arr.join(\",\");\n            };\n\n            this.#addTransferMapConversion(getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);\n            this.#hcmUrl = `url(#${id})`;\n            return this.#hcmUrl;\n          }\n\n          addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n            const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\n\n            if (this.#hcmHighlightKey === key) {\n              return this.#hcmHighlightUrl;\n            }\n\n            this.#hcmHighlightKey = key;\n            this.#hcmHighlightUrl = \"none\";\n            this.#hcmHighlightFilter?.remove();\n\n            if (!fgColor || !bgColor) {\n              return this.#hcmHighlightUrl;\n            }\n\n            const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));\n            let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);\n            let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);\n            let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(this.#getRGB.bind(this));\n\n            if (bgGray < fgGray) {\n              [fgGray, bgGray, newFgRGB, newBgRGB] = [bgGray, fgGray, newBgRGB, newFgRGB];\n            }\n\n            this.#defs.style.color = \"\";\n\n            const getSteps = (fg, bg, n) => {\n              const arr = new Array(256);\n              const step = (bgGray - fgGray) / n;\n              const newStart = fg / 255;\n              const newStep = (bg - fg) / (255 * n);\n              let prev = 0;\n\n              for (let i = 0; i <= n; i++) {\n                const k = Math.round(fgGray + i * step);\n                const value = newStart + i * newStep;\n\n                for (let j = prev; j <= k; j++) {\n                  arr[j] = value;\n                }\n\n                prev = k + 1;\n              }\n\n              for (let i = prev; i < 256; i++) {\n                arr[i] = arr[prev - 1];\n              }\n\n              return arr.join(\",\");\n            };\n\n            const id = `g_${this.#docId}_hcm_highlight_filter`;\n            const filter = this.#hcmHighlightFilter = this.#createFilter(id);\n            this.#addGrayConversion(filter);\n            this.#addTransferMapConversion(getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);\n            this.#hcmHighlightUrl = `url(#${id})`;\n            return this.#hcmHighlightUrl;\n          }\n\n          destroy() {\n            let keepHCM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (keepHCM && (this.#hcmUrl || this.#hcmHighlightUrl)) {\n              return;\n            }\n\n            if (this.#_defs) {\n              this.#_defs.parentNode.parentNode.remove();\n              this.#_defs = null;\n            }\n\n            if (this.#_cache) {\n              this.#_cache.clear();\n              this.#_cache = null;\n            }\n\n            this.#id = 0;\n          }\n\n          #addGrayConversion(filter) {\n            const feColorMatrix = this.#document.createElementNS(SVG_NS, \"feColorMatrix\");\n            feColorMatrix.setAttribute(\"type\", \"matrix\");\n            feColorMatrix.setAttribute(\"values\", \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\");\n            filter.append(feColorMatrix);\n          }\n\n          #createFilter(id) {\n            const filter = this.#document.createElementNS(SVG_NS, \"filter\");\n            filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n            filter.setAttribute(\"id\", id);\n            this.#defs.append(filter);\n            return filter;\n          }\n\n          #appendFeFunc(feComponentTransfer, func, table) {\n            const feFunc = this.#document.createElementNS(SVG_NS, func);\n            feFunc.setAttribute(\"type\", \"discrete\");\n            feFunc.setAttribute(\"tableValues\", table);\n            feComponentTransfer.append(feFunc);\n          }\n\n          #addTransferMapConversion(rTable, gTable, bTable, filter) {\n            const feComponentTransfer = this.#document.createElementNS(SVG_NS, \"feComponentTransfer\");\n            filter.append(feComponentTransfer);\n            this.#appendFeFunc(feComponentTransfer, \"feFuncR\", rTable);\n            this.#appendFeFunc(feComponentTransfer, \"feFuncG\", gTable);\n            this.#appendFeFunc(feComponentTransfer, \"feFuncB\", bTable);\n          }\n\n          #getRGB(color) {\n            this.#defs.style.color = color;\n            return getRGB(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\n          }\n\n        }\n\n        exports.DOMFilterFactory = DOMFilterFactory;\n\n        class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {\n          constructor() {\n            let {\n              ownerDocument = globalThis.document\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            super();\n            this._document = ownerDocument;\n          }\n\n          _createCanvas(width, height) {\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n          }\n\n        }\n\n        exports.DOMCanvasFactory = DOMCanvasFactory;\n\n        async function fetchData(url) {\n          let asTypedArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (isValidFetchUrl(url, document.baseURI)) {\n            const response = await fetch(url);\n\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return asTypedArray ? new Uint8Array(await response.arrayBuffer()) : (0, _util.stringToBytes)(await response.text());\n          }\n\n          return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open(\"GET\", url, true);\n\n            if (asTypedArray) {\n              request.responseType = \"arraybuffer\";\n            }\n\n            request.onreadystatechange = () => {\n              if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n              }\n\n              if (request.status === 200 || request.status === 0) {\n                let data;\n\n                if (asTypedArray && request.response) {\n                  data = new Uint8Array(request.response);\n                } else if (!asTypedArray && request.responseText) {\n                  data = (0, _util.stringToBytes)(request.responseText);\n                }\n\n                if (data) {\n                  resolve(data);\n                  return;\n                }\n              }\n\n              reject(new Error(request.statusText));\n            };\n\n            request.send(null);\n          });\n        }\n\n        class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return fetchData(url, this.isCompressed).then(data => {\n              return {\n                cMapData: data,\n                compressionType\n              };\n            });\n          }\n\n        }\n\n        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n        class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {\n          _fetchData(url) {\n            return fetchData(url, true);\n          }\n\n        }\n\n        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;\n\n        class DOMSVGFactory extends _base_factory.BaseSVGFactory {\n          _createSVG(type) {\n            return document.createElementNS(SVG_NS, type);\n          }\n\n        }\n\n        exports.DOMSVGFactory = DOMSVGFactory;\n\n        class PageViewport {\n          constructor(_ref22) {\n            let {\n              viewBox,\n              scale,\n              rotation,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = _ref22;\n            this.viewBox = viewBox;\n            this.scale = scale;\n            this.rotation = rotation;\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            const centerX = (viewBox[2] + viewBox[0]) / 2;\n            const centerY = (viewBox[3] + viewBox[1]) / 2;\n            let rotateA, rotateB, rotateC, rotateD;\n            rotation %= 360;\n\n            if (rotation < 0) {\n              rotation += 360;\n            }\n\n            switch (rotation) {\n              case 180:\n                rotateA = -1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = 1;\n                break;\n\n              case 90:\n                rotateA = 0;\n                rotateB = 1;\n                rotateC = 1;\n                rotateD = 0;\n                break;\n\n              case 270:\n                rotateA = 0;\n                rotateB = -1;\n                rotateC = -1;\n                rotateD = 0;\n                break;\n\n              case 0:\n                rotateA = 1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = -1;\n                break;\n\n              default:\n                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n            }\n\n            if (dontFlip) {\n              rotateC = -rotateC;\n              rotateD = -rotateD;\n            }\n\n            let offsetCanvasX, offsetCanvasY;\n            let width, height;\n\n            if (rotateA === 0) {\n              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n              width = (viewBox[3] - viewBox[1]) * scale;\n              height = (viewBox[2] - viewBox[0]) * scale;\n            } else {\n              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n              width = (viewBox[2] - viewBox[0]) * scale;\n              height = (viewBox[3] - viewBox[1]) * scale;\n            }\n\n            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n            this.width = width;\n            this.height = height;\n          }\n\n          get rawDims() {\n            const {\n              viewBox\n            } = this;\n            return (0, _util.shadow)(this, \"rawDims\", {\n              pageWidth: viewBox[2] - viewBox[0],\n              pageHeight: viewBox[3] - viewBox[1],\n              pageX: viewBox[0],\n              pageY: viewBox[1]\n            });\n          }\n\n          clone() {\n            let {\n              scale = this.scale,\n              rotation = this.rotation,\n              offsetX = this.offsetX,\n              offsetY = this.offsetY,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new PageViewport({\n              viewBox: this.viewBox.slice(),\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          convertToViewportPoint(x, y) {\n            return _util.Util.applyTransform([x, y], this.transform);\n          }\n\n          convertToViewportRectangle(rect) {\n            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n          }\n\n          convertToPdfPoint(x, y) {\n            return _util.Util.applyInverseTransform([x, y], this.transform);\n          }\n\n        }\n\n        exports.PageViewport = PageViewport;\n\n        class RenderingCancelledException extends _util.BaseException {\n          constructor(msg) {\n            let extraDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            super(msg, \"RenderingCancelledException\");\n            this.extraDelay = extraDelay;\n          }\n\n        }\n\n        exports.RenderingCancelledException = RenderingCancelledException;\n\n        function isDataScheme(url) {\n          const ii = url.length;\n          let i = 0;\n\n          while (i < ii && url[i].trim() === \"\") {\n            i++;\n          }\n\n          return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n\n        function isPdfFile(filename) {\n          return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n\n        function getFilenameFromUrl(url) {\n          let onlyStripPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (!onlyStripPath) {\n            [url] = url.split(/[#?]/, 1);\n          }\n\n          return url.substring(url.lastIndexOf(\"/\") + 1);\n        }\n\n        function getPdfFilenameFromUrl(url) {\n          let defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"document.pdf\";\n\n          if (typeof url !== \"string\") {\n            return defaultFilename;\n          }\n\n          if (isDataScheme(url)) {\n            (0, _util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n            return defaultFilename;\n          }\n\n          const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n          const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n          const splitURI = reURI.exec(url);\n          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n          if (suggestedFilename) {\n            suggestedFilename = suggestedFilename[0];\n\n            if (suggestedFilename.includes(\"%\")) {\n              try {\n                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n              } catch {}\n            }\n          }\n\n          return suggestedFilename || defaultFilename;\n        }\n\n        class StatTimer {\n          started = Object.create(null);\n          times = [];\n\n          time(name) {\n            if (name in this.started) {\n              (0, _util.warn)(`Timer is already running for ${name}`);\n            }\n\n            this.started[name] = Date.now();\n          }\n\n          timeEnd(name) {\n            if (!(name in this.started)) {\n              (0, _util.warn)(`Timer has not been started for ${name}`);\n            }\n\n            this.times.push({\n              name,\n              start: this.started[name],\n              end: Date.now()\n            });\n            delete this.started[name];\n          }\n\n          toString() {\n            const outBuf = [];\n            let longest = 0;\n\n            for (const {\n              name\n            } of this.times) {\n              longest = Math.max(name.length, longest);\n            }\n\n            for (const {\n              name,\n              start,\n              end\n            } of this.times) {\n              outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n            }\n\n            return outBuf.join(\"\");\n          }\n\n        }\n\n        exports.StatTimer = StatTimer;\n\n        function isValidFetchUrl(url, baseUrl) {\n          try {\n            const {\n              protocol\n            } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            return protocol === \"http:\" || protocol === \"https:\";\n          } catch {\n            return false;\n          }\n        }\n\n        function noContextMenu(e) {\n          e.preventDefault();\n        }\n\n        function loadScript(src) {\n          let removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = src;\n\n            script.onload = function (evt) {\n              if (removeScriptElement) {\n                script.remove();\n              }\n\n              resolve(evt);\n            };\n\n            script.onerror = function () {\n              reject(new Error(`Cannot load script at: ${script.src}`));\n            };\n\n            (document.head || document.documentElement).append(script);\n          });\n        }\n\n        function deprecated(details) {\n          console.log(\"Deprecated API usage: \" + details);\n        }\n\n        let pdfDateStringRegex;\n\n        class PDFDateString {\n          static toDateObject(input) {\n            if (!input || typeof input !== \"string\") {\n              return null;\n            }\n\n            pdfDateStringRegex ||= new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n            const matches = pdfDateStringRegex.exec(input);\n\n            if (!matches) {\n              return null;\n            }\n\n            const year = parseInt(matches[1], 10);\n            let month = parseInt(matches[2], 10);\n            month = month >= 1 && month <= 12 ? month - 1 : 0;\n            let day = parseInt(matches[3], 10);\n            day = day >= 1 && day <= 31 ? day : 1;\n            let hour = parseInt(matches[4], 10);\n            hour = hour >= 0 && hour <= 23 ? hour : 0;\n            let minute = parseInt(matches[5], 10);\n            minute = minute >= 0 && minute <= 59 ? minute : 0;\n            let second = parseInt(matches[6], 10);\n            second = second >= 0 && second <= 59 ? second : 0;\n            const universalTimeRelation = matches[7] || \"Z\";\n            let offsetHour = parseInt(matches[8], 10);\n            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n            let offsetMinute = parseInt(matches[9], 10) || 0;\n            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n            if (universalTimeRelation === \"-\") {\n              hour += offsetHour;\n              minute += offsetMinute;\n            } else if (universalTimeRelation === \"+\") {\n              hour -= offsetHour;\n              minute -= offsetMinute;\n            }\n\n            return new Date(Date.UTC(year, month, day, hour, minute, second));\n          }\n\n        }\n\n        exports.PDFDateString = PDFDateString;\n\n        function getXfaPageViewport(xfaPage, _ref23) {\n          let {\n            scale = 1,\n            rotation = 0\n          } = _ref23;\n          const {\n            width,\n            height\n          } = xfaPage.attributes.style;\n          const viewBox = [0, 0, parseInt(width), parseInt(height)];\n          return new PageViewport({\n            viewBox,\n            scale,\n            rotation\n          });\n        }\n\n        function getRGB(color) {\n          if (color.startsWith(\"#\")) {\n            const colorRGB = parseInt(color.slice(1), 16);\n            return [(colorRGB & 0xff0000) >> 16, (colorRGB & 0x00ff00) >> 8, colorRGB & 0x0000ff];\n          }\n\n          if (color.startsWith(\"rgb(\")) {\n            return color.slice(4, -1).split(\",\").map(x => parseInt(x));\n          }\n\n          if (color.startsWith(\"rgba(\")) {\n            return color.slice(5, -1).split(\",\").map(x => parseInt(x)).slice(0, 3);\n          }\n\n          (0, _util.warn)(`Not a valid color format: \"${color}\"`);\n          return [0, 0, 0];\n        }\n\n        function getColorValues(colors) {\n          const span = document.createElement(\"span\");\n          span.style.visibility = \"hidden\";\n          document.body.append(span);\n\n          for (const name of colors.keys()) {\n            span.style.color = name;\n            const computedColor = window.getComputedStyle(span).color;\n            colors.set(name, getRGB(computedColor));\n          }\n\n          span.remove();\n        }\n\n        function getCurrentTransform(ctx) {\n          const {\n            a,\n            b,\n            c,\n            d,\n            e,\n            f\n          } = ctx.getTransform();\n          return [a, b, c, d, e, f];\n        }\n\n        function getCurrentTransformInverse(ctx) {\n          const {\n            a,\n            b,\n            c,\n            d,\n            e,\n            f\n          } = ctx.getTransform().invertSelf();\n          return [a, b, c, d, e, f];\n        }\n\n        function setLayerDimensions(div, viewport) {\n          let mustFlip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n          let mustRotate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n          if (viewport instanceof PageViewport) {\n            const {\n              pageWidth,\n              pageHeight\n            } = viewport.rawDims;\n            const {\n              style\n            } = div;\n            const useRound = _util.FeatureTest.isCSSRoundSupported;\n            const w = `var(--scale-factor) * ${pageWidth}px`,\n                  h = `var(--scale-factor) * ${pageHeight}px`;\n            const widthStr = useRound ? `round(${w}, 1px)` : `calc(${w})`,\n                  heightStr = useRound ? `round(${h}, 1px)` : `calc(${h})`;\n\n            if (!mustFlip || viewport.rotation % 180 === 0) {\n              style.width = widthStr;\n              style.height = heightStr;\n            } else {\n              style.width = heightStr;\n              style.height = widthStr;\n            }\n          }\n\n          if (mustRotate) {\n            div.setAttribute(\"data-main-rotation\", viewport.rotation);\n          }\n        }\n        /***/\n\n      },\n      /* 7 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.BaseStandardFontDataFactory = exports.BaseSVGFactory = exports.BaseFilterFactory = exports.BaseCanvasFactory = exports.BaseCMapReaderFactory = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        class BaseFilterFactory {\n          constructor() {\n            if (this.constructor === BaseFilterFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseFilterFactory.\");\n            }\n          }\n\n          addFilter(maps) {\n            return \"none\";\n          }\n\n          addHCMFilter(fgColor, bgColor) {\n            return \"none\";\n          }\n\n          addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n            return \"none\";\n          }\n\n          destroy() {\n            let keepHCM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n          }\n\n        }\n\n        exports.BaseFilterFactory = BaseFilterFactory;\n\n        class BaseCanvasFactory {\n          constructor() {\n            if (this.constructor === BaseCanvasFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            const canvas = this._createCanvas(width, height);\n\n            return {\n              canvas,\n              context: canvas.getContext(\"2d\")\n            };\n          }\n\n          reset(canvasAndContext, width, height) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            canvasAndContext.canvas.width = width;\n            canvasAndContext.canvas.height = height;\n          }\n\n          destroy(canvasAndContext) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            canvasAndContext.canvas.width = 0;\n            canvasAndContext.canvas.height = 0;\n            canvasAndContext.canvas = null;\n            canvasAndContext.context = null;\n          }\n\n          _createCanvas(width, height) {\n            (0, _util.unreachable)(\"Abstract method `_createCanvas` called.\");\n          }\n\n        }\n\n        exports.BaseCanvasFactory = BaseCanvasFactory;\n\n        class BaseCMapReaderFactory {\n          constructor(_ref24) {\n            let {\n              baseUrl = null,\n              isCompressed = true\n            } = _ref24;\n\n            if (this.constructor === BaseCMapReaderFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n            this.isCompressed = isCompressed;\n          }\n\n          async fetch(_ref25) {\n            let {\n              name\n            } = _ref25;\n\n            if (!this.baseUrl) {\n              throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n            }\n\n            if (!name) {\n              throw new Error(\"CMap name must be specified.\");\n            }\n\n            const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n            const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n            return this._fetchData(url, compressionType).catch(reason => {\n              throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n            });\n          }\n\n          _fetchData(url, compressionType) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n        class BaseStandardFontDataFactory {\n          constructor(_ref26) {\n            let {\n              baseUrl = null\n            } = _ref26;\n\n            if (this.constructor === BaseStandardFontDataFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n          }\n\n          async fetch(_ref27) {\n            let {\n              filename\n            } = _ref27;\n\n            if (!this.baseUrl) {\n              throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n            }\n\n            if (!filename) {\n              throw new Error(\"Font filename must be specified.\");\n            }\n\n            const url = `${this.baseUrl}${filename}`;\n            return this._fetchData(url).catch(reason => {\n              throw new Error(`Unable to load font data at: ${url}`);\n            });\n          }\n\n          _fetchData(url) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;\n\n        class BaseSVGFactory {\n          constructor() {\n            if (this.constructor === BaseSVGFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n            }\n          }\n\n          create(width, height) {\n            let skipDimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid SVG dimensions\");\n            }\n\n            const svg = this._createSVG(\"svg:svg\");\n\n            svg.setAttribute(\"version\", \"1.1\");\n\n            if (!skipDimensions) {\n              svg.setAttribute(\"width\", `${width}px`);\n              svg.setAttribute(\"height\", `${height}px`);\n            }\n\n            svg.setAttribute(\"preserveAspectRatio\", \"none\");\n            svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n            return svg;\n          }\n\n          createElement(type) {\n            if (typeof type !== \"string\") {\n              throw new Error(\"Invalid SVG element type\");\n            }\n\n            return this._createSVG(type);\n          }\n\n          _createSVG(type) {\n            (0, _util.unreachable)(\"Abstract method `_createSVG` called.\");\n          }\n\n        }\n\n        exports.BaseSVGFactory = BaseSVGFactory;\n        /***/\n      },\n      /* 8 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MurmurHash3_64 = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        const SEED = 0xc3d2e1f0;\n        const MASK_HIGH = 0xffff0000;\n        const MASK_LOW = 0xffff;\n\n        class MurmurHash3_64 {\n          constructor(seed) {\n            this.h1 = seed ? seed & 0xffffffff : SEED;\n            this.h2 = seed ? seed & 0xffffffff : SEED;\n          }\n\n          update(input) {\n            let data, length;\n\n            if (typeof input === \"string\") {\n              data = new Uint8Array(input.length * 2);\n              length = 0;\n\n              for (let i = 0, ii = input.length; i < ii; i++) {\n                const code = input.charCodeAt(i);\n\n                if (code <= 0xff) {\n                  data[length++] = code;\n                } else {\n                  data[length++] = code >>> 8;\n                  data[length++] = code & 0xff;\n                }\n              }\n            } else if ((0, _util.isArrayBuffer)(input)) {\n              data = input.slice();\n              length = data.byteLength;\n            } else {\n              throw new Error(\"Wrong data format in MurmurHash3_64_update. \" + \"Input must be a string or array.\");\n            }\n\n            const blockCounts = length >> 2;\n            const tailLength = length - blockCounts * 4;\n            const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n            let k1 = 0,\n                k2 = 0;\n            let h1 = this.h1,\n                h2 = this.h2;\n            const C1 = 0xcc9e2d51,\n                  C2 = 0x1b873593;\n            const C1_LOW = C1 & MASK_LOW,\n                  C2_LOW = C2 & MASK_LOW;\n\n            for (let i = 0; i < blockCounts; i++) {\n              if (i & 1) {\n                k1 = dataUint32[i];\n                k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n                k1 = k1 << 15 | k1 >>> 17;\n                k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n                h1 ^= k1;\n                h1 = h1 << 13 | h1 >>> 19;\n                h1 = h1 * 5 + 0xe6546b64;\n              } else {\n                k2 = dataUint32[i];\n                k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n                k2 = k2 << 15 | k2 >>> 17;\n                k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n                h2 ^= k2;\n                h2 = h2 << 13 | h2 >>> 19;\n                h2 = h2 * 5 + 0xe6546b64;\n              }\n            }\n\n            k1 = 0;\n\n            switch (tailLength) {\n              case 3:\n                k1 ^= data[blockCounts * 4 + 2] << 16;\n\n              case 2:\n                k1 ^= data[blockCounts * 4 + 1] << 8;\n\n              case 1:\n                k1 ^= data[blockCounts * 4];\n                k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n                k1 = k1 << 15 | k1 >>> 17;\n                k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n\n                if (blockCounts & 1) {\n                  h1 ^= k1;\n                } else {\n                  h2 ^= k1;\n                }\n\n            }\n\n            this.h1 = h1;\n            this.h2 = h2;\n          }\n\n          hexdigest() {\n            let h1 = this.h1,\n                h2 = this.h2;\n            h1 ^= h2 >>> 1;\n            h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n            h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n            h1 ^= h2 >>> 1;\n            h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n            h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n            h1 ^= h2 >>> 1;\n            return (h1 >>> 0).toString(16).padStart(8, \"0\") + (h2 >>> 0).toString(16).padStart(8, \"0\");\n          }\n\n        }\n\n        exports.MurmurHash3_64 = MurmurHash3_64;\n        /***/\n      },\n      /* 9 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontLoader = exports.FontFaceObject = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        class FontLoader {\n          #systemFonts = new Set();\n\n          constructor(_ref28) {\n            let {\n              ownerDocument = globalThis.document,\n              styleElement = null\n            } = _ref28;\n            this._document = ownerDocument;\n            this.nativeFontFaces = new Set();\n            this.styleElement = null;\n            this.loadingRequests = [];\n            this.loadTestFontId = 0;\n          }\n\n          addNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.add(nativeFontFace);\n\n            this._document.fonts.add(nativeFontFace);\n          }\n\n          removeNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.delete(nativeFontFace);\n\n            this._document.fonts.delete(nativeFontFace);\n          }\n\n          insertRule(rule) {\n            if (!this.styleElement) {\n              this.styleElement = this._document.createElement(\"style\");\n\n              this._document.documentElement.getElementsByTagName(\"head\")[0].append(this.styleElement);\n            }\n\n            const styleSheet = this.styleElement.sheet;\n            styleSheet.insertRule(rule, styleSheet.cssRules.length);\n          }\n\n          clear() {\n            for (const nativeFontFace of this.nativeFontFaces) {\n              this._document.fonts.delete(nativeFontFace);\n            }\n\n            this.nativeFontFaces.clear();\n            this.#systemFonts.clear();\n\n            if (this.styleElement) {\n              this.styleElement.remove();\n              this.styleElement = null;\n            }\n          }\n\n          async loadSystemFont(info) {\n            if (!info || this.#systemFonts.has(info.loadedName)) {\n              return;\n            }\n\n            (0, _util.assert)(!this.disableFontFace, \"loadSystemFont shouldn't be called when `disableFontFace` is set.\");\n\n            if (this.isFontLoadingAPISupported) {\n              const {\n                loadedName,\n                src,\n                style\n              } = info;\n              const fontFace = new FontFace(loadedName, src, style);\n              this.addNativeFontFace(fontFace);\n\n              try {\n                await fontFace.load();\n                this.#systemFonts.add(loadedName);\n              } catch {\n                (0, _util.warn)(`Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`);\n                this.removeNativeFontFace(fontFace);\n              }\n\n              return;\n            }\n\n            (0, _util.unreachable)(\"Not implemented: loadSystemFont without the Font Loading API.\");\n          }\n\n          async bind(font) {\n            if (font.attached || font.missingFile && !font.systemFontInfo) {\n              return;\n            }\n\n            font.attached = true;\n\n            if (font.systemFontInfo) {\n              await this.loadSystemFont(font.systemFontInfo);\n              return;\n            }\n\n            if (this.isFontLoadingAPISupported) {\n              const nativeFontFace = font.createNativeFontFace();\n\n              if (nativeFontFace) {\n                this.addNativeFontFace(nativeFontFace);\n\n                try {\n                  await nativeFontFace.loaded;\n                } catch (ex) {\n                  (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                  font.disableFontFace = true;\n                  throw ex;\n                }\n              }\n\n              return;\n            }\n\n            const rule = font.createFontFaceRule();\n\n            if (rule) {\n              this.insertRule(rule);\n\n              if (this.isSyncFontLoadingSupported) {\n                return;\n              }\n\n              await new Promise(resolve => {\n                const request = this._queueLoadingCallback(resolve);\n\n                this._prepareFontLoadEvent(font, request);\n              });\n            }\n          }\n\n          get isFontLoadingAPISupported() {\n            const hasFonts = !!this._document?.fonts;\n            return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\n          }\n\n          get isSyncFontLoadingSupported() {\n            let supported = false;\n\n            if (_util.isNodeJS) {\n              supported = true;\n            } else if (typeof navigator !== \"undefined\" && /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)) {\n              supported = true;\n            }\n\n            return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n          }\n\n          _queueLoadingCallback(callback) {\n            function completeRequest() {\n              (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n              request.done = true;\n\n              while (loadingRequests.length > 0 && loadingRequests[0].done) {\n                const otherRequest = loadingRequests.shift();\n                setTimeout(otherRequest.callback, 0);\n              }\n            }\n\n            const {\n              loadingRequests\n            } = this;\n            const request = {\n              done: false,\n              complete: completeRequest,\n              callback\n            };\n            loadingRequests.push(request);\n            return request;\n          }\n\n          get _loadTestFont() {\n            const testFont = atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n            return (0, _util.shadow)(this, \"_loadTestFont\", testFont);\n          }\n\n          _prepareFontLoadEvent(font, request) {\n            function int32(data, offset) {\n              return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n            }\n\n            function spliceString(s, offset, remove, insert) {\n              const chunk1 = s.substring(0, offset);\n              const chunk2 = s.substring(offset + remove);\n              return chunk1 + insert + chunk2;\n            }\n\n            let i, ii;\n\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.width = 1;\n            canvas.height = 1;\n            const ctx = canvas.getContext(\"2d\");\n            let called = 0;\n\n            function isFontReady(name, callback) {\n              if (++called > 30) {\n                (0, _util.warn)(\"Load test font never loaded.\");\n                callback();\n                return;\n              }\n\n              ctx.font = \"30px \" + name;\n              ctx.fillText(\".\", 0, 20);\n              const imageData = ctx.getImageData(0, 0, 1, 1);\n\n              if (imageData.data[3] > 0) {\n                callback();\n                return;\n              }\n\n              setTimeout(isFontReady.bind(null, name, callback));\n            }\n\n            const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n            let data = this._loadTestFont;\n            const COMMENT_OFFSET = 976;\n            data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n            const CFF_CHECKSUM_OFFSET = 16;\n            const XXXX_VALUE = 0x58585858;\n            let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n            for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n              checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n            }\n\n            if (i < loadTestFontId.length) {\n              checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n            }\n\n            data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n            const url = `url(data:font/opentype;base64,${btoa(data)});`;\n            const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n            this.insertRule(rule);\n\n            const div = this._document.createElement(\"div\");\n\n            div.style.visibility = \"hidden\";\n            div.style.width = div.style.height = \"10px\";\n            div.style.position = \"absolute\";\n            div.style.top = div.style.left = \"0px\";\n\n            for (const name of [font.loadedName, loadTestFontId]) {\n              const span = this._document.createElement(\"span\");\n\n              span.textContent = \"Hi\";\n              span.style.fontFamily = name;\n              div.append(span);\n            }\n\n            this._document.body.append(div);\n\n            isFontReady(loadTestFontId, () => {\n              div.remove();\n              request.complete();\n            });\n          }\n\n        }\n\n        exports.FontLoader = FontLoader;\n\n        class FontFaceObject {\n          constructor(translatedData, _ref29) {\n            let {\n              isEvalSupported = true,\n              disableFontFace = false,\n              ignoreErrors = false,\n              inspectFont = null\n            } = _ref29;\n            this.compiledGlyphs = Object.create(null);\n\n            for (const i in translatedData) {\n              this[i] = translatedData[i];\n            }\n\n            this.isEvalSupported = isEvalSupported !== false;\n            this.disableFontFace = disableFontFace === true;\n            this.ignoreErrors = ignoreErrors === true;\n            this._inspectFont = inspectFont;\n          }\n\n          createNativeFontFace() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            let nativeFontFace;\n\n            if (!this.cssFontInfo) {\n              nativeFontFace = new FontFace(this.loadedName, this.data, {});\n            } else {\n              const css = {\n                weight: this.cssFontInfo.fontWeight\n              };\n\n              if (this.cssFontInfo.italicAngle) {\n                css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n              }\n\n              nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n            }\n\n            this._inspectFont?.(this);\n            return nativeFontFace;\n          }\n\n          createFontFaceRule() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const data = (0, _util.bytesToString)(this.data);\n            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n            let rule;\n\n            if (!this.cssFontInfo) {\n              rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n            } else {\n              let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n\n              if (this.cssFontInfo.italicAngle) {\n                css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n              }\n\n              rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n            }\n\n            this._inspectFont?.(this, url);\n            return rule;\n          }\n\n          getPathGenerator(objs, character) {\n            if (this.compiledGlyphs[character] !== undefined) {\n              return this.compiledGlyphs[character];\n            }\n\n            let cmds;\n\n            try {\n              cmds = objs.get(this.loadedName + \"_path_\" + character);\n            } catch (ex) {\n              if (!this.ignoreErrors) {\n                throw ex;\n              }\n\n              (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n              return this.compiledGlyphs[character] = function (c, size) {};\n            }\n\n            if (this.isEvalSupported && _util.FeatureTest.isEvalSupported) {\n              const jsBuf = [];\n\n              for (const current of cmds) {\n                const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n                jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n              }\n\n              return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\n            }\n\n            return this.compiledGlyphs[character] = function (c, size) {\n              for (const current of cmds) {\n                if (current.cmd === \"scale\") {\n                  current.args = [size, -size];\n                }\n\n                c[current.cmd].apply(c, current.args);\n              }\n            };\n          }\n\n        }\n\n        exports.FontFaceObject = FontFaceObject;\n        /***/\n      },\n      /* 10 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NodeStandardFontDataFactory = exports.NodeFilterFactory = exports.NodeCanvasFactory = exports.NodeCMapReaderFactory = void 0;\n\n        var _base_factory = __w_pdfjs_require__(7);\n\n        var _util = __w_pdfjs_require__(1);\n\n        ;\n        ;\n\n        const fetchData = function (url) {\n          return new Promise((resolve, reject) => {\n            const fs = require(\"fs\");\n\n            fs.readFile(url, (error, data) => {\n              if (error || !data) {\n                reject(new Error(error));\n                return;\n              }\n\n              resolve(new Uint8Array(data));\n            });\n          });\n        };\n\n        class NodeFilterFactory extends _base_factory.BaseFilterFactory {}\n\n        exports.NodeFilterFactory = NodeFilterFactory;\n\n        class NodeCanvasFactory extends _base_factory.BaseCanvasFactory {\n          _createCanvas(width, height) {\n            const Canvas = require(\"canvas\");\n\n            return Canvas.createCanvas(width, height);\n          }\n\n        }\n\n        exports.NodeCanvasFactory = NodeCanvasFactory;\n\n        class NodeCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return fetchData(url).then(data => {\n              return {\n                cMapData: data,\n                compressionType\n              };\n            });\n          }\n\n        }\n\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n\n        class NodeStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {\n          _fetchData(url) {\n            return fetchData(url);\n          }\n\n        }\n\n        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;\n        /***/\n      },\n      /* 11 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CanvasGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _pattern_helper = __w_pdfjs_require__(12);\n\n        var _image_utils = __w_pdfjs_require__(13);\n\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const EXECUTION_TIME = 15;\n        const EXECUTION_STEPS = 10;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n\n        function mirrorContextOperations(ctx, destCtx) {\n          if (ctx._removeMirroring) {\n            throw new Error(\"Context is already forwarding operations.\");\n          }\n\n          ctx.__originalSave = ctx.save;\n          ctx.__originalRestore = ctx.restore;\n          ctx.__originalRotate = ctx.rotate;\n          ctx.__originalScale = ctx.scale;\n          ctx.__originalTranslate = ctx.translate;\n          ctx.__originalTransform = ctx.transform;\n          ctx.__originalSetTransform = ctx.setTransform;\n          ctx.__originalResetTransform = ctx.resetTransform;\n          ctx.__originalClip = ctx.clip;\n          ctx.__originalMoveTo = ctx.moveTo;\n          ctx.__originalLineTo = ctx.lineTo;\n          ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n          ctx.__originalRect = ctx.rect;\n          ctx.__originalClosePath = ctx.closePath;\n          ctx.__originalBeginPath = ctx.beginPath;\n\n          ctx._removeMirroring = () => {\n            ctx.save = ctx.__originalSave;\n            ctx.restore = ctx.__originalRestore;\n            ctx.rotate = ctx.__originalRotate;\n            ctx.scale = ctx.__originalScale;\n            ctx.translate = ctx.__originalTranslate;\n            ctx.transform = ctx.__originalTransform;\n            ctx.setTransform = ctx.__originalSetTransform;\n            ctx.resetTransform = ctx.__originalResetTransform;\n            ctx.clip = ctx.__originalClip;\n            ctx.moveTo = ctx.__originalMoveTo;\n            ctx.lineTo = ctx.__originalLineTo;\n            ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n            ctx.rect = ctx.__originalRect;\n            ctx.closePath = ctx.__originalClosePath;\n            ctx.beginPath = ctx.__originalBeginPath;\n            delete ctx._removeMirroring;\n          };\n\n          ctx.save = function ctxSave() {\n            destCtx.save();\n\n            this.__originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            destCtx.restore();\n\n            this.__originalRestore();\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            destCtx.translate(x, y);\n\n            this.__originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            destCtx.scale(x, y);\n\n            this.__originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            destCtx.transform(a, b, c, d, e, f);\n\n            this.__originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            destCtx.setTransform(a, b, c, d, e, f);\n\n            this.__originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.resetTransform = function ctxResetTransform() {\n            destCtx.resetTransform();\n\n            this.__originalResetTransform();\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            destCtx.rotate(angle);\n\n            this.__originalRotate(angle);\n          };\n\n          ctx.clip = function ctxRotate(rule) {\n            destCtx.clip(rule);\n\n            this.__originalClip(rule);\n          };\n\n          ctx.moveTo = function (x, y) {\n            destCtx.moveTo(x, y);\n\n            this.__originalMoveTo(x, y);\n          };\n\n          ctx.lineTo = function (x, y) {\n            destCtx.lineTo(x, y);\n\n            this.__originalLineTo(x, y);\n          };\n\n          ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n            destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n\n            this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n          };\n\n          ctx.rect = function (x, y, width, height) {\n            destCtx.rect(x, y, width, height);\n\n            this.__originalRect(x, y, width, height);\n          };\n\n          ctx.closePath = function () {\n            destCtx.closePath();\n\n            this.__originalClosePath();\n          };\n\n          ctx.beginPath = function () {\n            destCtx.beginPath();\n\n            this.__originalBeginPath();\n          };\n        }\n\n        class CachedCanvases {\n          constructor(canvasFactory) {\n            this.canvasFactory = canvasFactory;\n            this.cache = Object.create(null);\n          }\n\n          getCanvas(id, width, height) {\n            let canvasEntry;\n\n            if (this.cache[id] !== undefined) {\n              canvasEntry = this.cache[id];\n              this.canvasFactory.reset(canvasEntry, width, height);\n            } else {\n              canvasEntry = this.canvasFactory.create(width, height);\n              this.cache[id] = canvasEntry;\n            }\n\n            return canvasEntry;\n          }\n\n          delete(id) {\n            delete this.cache[id];\n          }\n\n          clear() {\n            for (const id in this.cache) {\n              const canvasEntry = this.cache[id];\n              this.canvasFactory.destroy(canvasEntry);\n              delete this.cache[id];\n            }\n          }\n\n        }\n\n        function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {\n          const [a, b, c, d, tx, ty] = (0, _display_utils.getCurrentTransform)(ctx);\n\n          if (b === 0 && c === 0) {\n            const tlX = destX * a + tx;\n            const rTlX = Math.round(tlX);\n            const tlY = destY * d + ty;\n            const rTlY = Math.round(tlY);\n            const brX = (destX + destW) * a + tx;\n            const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n            const brY = (destY + destH) * d + ty;\n            const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n            ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n            ctx.setTransform(a, b, c, d, tx, ty);\n            return [rWidth, rHeight];\n          }\n\n          if (a === 0 && d === 0) {\n            const tlX = destY * c + tx;\n            const rTlX = Math.round(tlX);\n            const tlY = destX * b + ty;\n            const rTlY = Math.round(tlY);\n            const brX = (destY + destH) * c + tx;\n            const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n            const brY = (destX + destW) * b + ty;\n            const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n            ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n            ctx.setTransform(a, b, c, d, tx, ty);\n            return [rHeight, rWidth];\n          }\n\n          ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n          const scaleX = Math.hypot(a, b);\n          const scaleY = Math.hypot(c, d);\n          return [scaleX * destW, scaleY * destH];\n        }\n\n        function compileType3Glyph(imgData) {\n          const {\n            width,\n            height\n          } = imgData;\n\n          if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n            return null;\n          }\n\n          const POINT_TO_PROCESS_LIMIT = 1000;\n          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n          const width1 = width + 1;\n          let points = new Uint8Array(width1 * (height + 1));\n          let i, j, j0;\n          const lineSize = width + 7 & ~7;\n          let data = new Uint8Array(lineSize * height),\n              pos = 0;\n\n          for (const elem of imgData.data) {\n            let mask = 128;\n\n            while (mask > 0) {\n              data[pos++] = elem & mask ? 0 : 255;\n              mask >>= 1;\n            }\n          }\n\n          let count = 0;\n          pos = 0;\n\n          if (data[pos] !== 0) {\n            points[0] = 1;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j] = data[pos] ? 2 : 1;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j] = 2;\n            ++count;\n          }\n\n          for (i = 1; i < height; i++) {\n            pos = i * lineSize;\n            j0 = i * width1;\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0] = data[pos] ? 1 : 8;\n              ++count;\n            }\n\n            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n            for (j = 1; j < width; j++) {\n              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n              if (POINT_TYPES[sum]) {\n                points[j0 + j] = POINT_TYPES[sum];\n                ++count;\n              }\n\n              pos++;\n            }\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0 + j] = data[pos] ? 2 : 4;\n              ++count;\n            }\n\n            if (count > POINT_TO_PROCESS_LIMIT) {\n              return null;\n            }\n          }\n\n          pos = lineSize * (height - 1);\n          j0 = i * width1;\n\n          if (data[pos] !== 0) {\n            points[j0] = 8;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j0 + j] = data[pos] ? 4 : 8;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j0 + j] = 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n\n          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n          const path = new Path2D();\n\n          for (i = 0; count && i <= height; i++) {\n            let p = i * width1;\n            const end = p + width;\n\n            while (p < end && !points[p]) {\n              p++;\n            }\n\n            if (p === end) {\n              continue;\n            }\n\n            path.moveTo(p % width1, i);\n            const p0 = p;\n            let type = points[p];\n\n            do {\n              const step = steps[type];\n\n              do {\n                p += step;\n              } while (!points[p]);\n\n              const pp = points[p];\n\n              if (pp !== 5 && pp !== 10) {\n                type = pp;\n                points[p] = 0;\n              } else {\n                type = pp & 0x33 * type >> 4;\n                points[p] &= type >> 2 | type << 2;\n              }\n\n              path.lineTo(p % width1, p / width1 | 0);\n\n              if (!points[p]) {\n                --count;\n              }\n            } while (p0 !== p);\n\n            --i;\n          }\n\n          data = null;\n          points = null;\n\n          const drawOutline = function (c) {\n            c.save();\n            c.scale(1 / width, -1 / height);\n            c.translate(0, -height);\n            c.fill(path);\n            c.beginPath();\n            c.restore();\n          };\n\n          return drawOutline;\n        }\n\n        class CanvasExtraState {\n          constructor(width, height) {\n            this.alphaIsShape = false;\n            this.fontSize = 0;\n            this.fontSizeScale = 1;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.textMatrixScale = 1;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textRise = 0;\n            this.fillColor = \"#000000\";\n            this.strokeColor = \"#000000\";\n            this.patternFill = false;\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.activeSMask = null;\n            this.transferMaps = \"none\";\n            this.startNewPathAndClipBox([0, 0, width, height]);\n          }\n\n          clone() {\n            const clone = Object.create(this);\n            clone.clipBox = this.clipBox.slice();\n            return clone;\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n          updatePathMinMax(transform, x, y) {\n            [x, y] = _util.Util.applyTransform([x, y], transform);\n            this.minX = Math.min(this.minX, x);\n            this.minY = Math.min(this.minY, y);\n            this.maxX = Math.max(this.maxX, x);\n            this.maxY = Math.max(this.maxY, y);\n          }\n\n          updateRectMinMax(transform, rect) {\n            const p1 = _util.Util.applyTransform(rect, transform);\n\n            const p2 = _util.Util.applyTransform(rect.slice(2), transform);\n\n            this.minX = Math.min(this.minX, p1[0], p2[0]);\n            this.minY = Math.min(this.minY, p1[1], p2[1]);\n            this.maxX = Math.max(this.maxX, p1[0], p2[0]);\n            this.maxY = Math.max(this.maxY, p1[1], p2[1]);\n          }\n\n          updateScalingPathMinMax(transform, minMax) {\n            _util.Util.scaleMinMax(transform, minMax);\n\n            this.minX = Math.min(this.minX, minMax[0]);\n            this.maxX = Math.max(this.maxX, minMax[1]);\n            this.minY = Math.min(this.minY, minMax[2]);\n            this.maxY = Math.max(this.maxY, minMax[3]);\n          }\n\n          updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n            const box = _util.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n\n            if (minMax) {\n              minMax[0] = Math.min(minMax[0], box[0], box[2]);\n              minMax[1] = Math.max(minMax[1], box[0], box[2]);\n              minMax[2] = Math.min(minMax[2], box[1], box[3]);\n              minMax[3] = Math.max(minMax[3], box[1], box[3]);\n              return;\n            }\n\n            this.updateRectMinMax(transform, box);\n          }\n\n          getPathBoundingBox() {\n            let pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pattern_helper.PathType.FILL;\n            let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const box = [this.minX, this.minY, this.maxX, this.maxY];\n\n            if (pathType === _pattern_helper.PathType.STROKE) {\n              if (!transform) {\n                (0, _util.unreachable)(\"Stroke bounding box must include transform.\");\n              }\n\n              const scale = _util.Util.singularValueDecompose2dScale(transform);\n\n              const xStrokePad = scale[0] * this.lineWidth / 2;\n              const yStrokePad = scale[1] * this.lineWidth / 2;\n              box[0] -= xStrokePad;\n              box[1] -= yStrokePad;\n              box[2] += xStrokePad;\n              box[3] += yStrokePad;\n            }\n\n            return box;\n          }\n\n          updateClipFromPath() {\n            const intersect = _util.Util.intersect(this.clipBox, this.getPathBoundingBox());\n\n            this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n          }\n\n          isEmptyClip() {\n            return this.minX === Infinity;\n          }\n\n          startNewPathAndClipBox(box) {\n            this.clipBox = box;\n            this.minX = Infinity;\n            this.minY = Infinity;\n            this.maxX = 0;\n            this.maxY = 0;\n          }\n\n          getClippedPathBoundingBox() {\n            let pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pattern_helper.PathType.FILL;\n            let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            return _util.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));\n          }\n\n        }\n\n        function putBinaryImageData(ctx, imgData) {\n          if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n            ctx.putImageData(imgData, 0, 0);\n            return;\n          }\n\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0,\n              destPos;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n          let i, j, thisChunkHeight, elemsInThisChunk;\n\n          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n            const srcLength = src.byteLength;\n            const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n            const dest32DataLength = dest32.length;\n            const fullSrcDiff = width + 7 >> 3;\n            const white = 0xffffffff;\n            const black = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n\n            for (i = 0; i < totalChunks; i++) {\n              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              destPos = 0;\n\n              for (j = 0; j < thisChunkHeight; j++) {\n                const srcDiff = srcLength - srcPos;\n                let k = 0;\n                const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                const kEndUnrolled = kEnd & ~7;\n                let mask = 0;\n                let srcByte = 0;\n\n                for (; k < kEndUnrolled; k += 8) {\n                  srcByte = src[srcPos++];\n                  dest32[destPos++] = srcByte & 128 ? white : black;\n                  dest32[destPos++] = srcByte & 64 ? white : black;\n                  dest32[destPos++] = srcByte & 32 ? white : black;\n                  dest32[destPos++] = srcByte & 16 ? white : black;\n                  dest32[destPos++] = srcByte & 8 ? white : black;\n                  dest32[destPos++] = srcByte & 4 ? white : black;\n                  dest32[destPos++] = srcByte & 2 ? white : black;\n                  dest32[destPos++] = srcByte & 1 ? white : black;\n                }\n\n                for (; k < kEnd; k++) {\n                  if (mask === 0) {\n                    srcByte = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest32[destPos++] = srcByte & mask ? white : black;\n                  mask >>= 1;\n                }\n              }\n\n              while (destPos < dest32DataLength) {\n                dest32[destPos++] = 0;\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n            j = 0;\n            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n            for (i = 0; i < fullChunks; i++) {\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n              srcPos += elemsInThisChunk;\n              ctx.putImageData(chunkImgData, 0, j);\n              j += FULL_CHUNK_HEIGHT;\n            }\n\n            if (i < totalChunks) {\n              elemsInThisChunk = width * partialChunkHeight * 4;\n              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n              ctx.putImageData(chunkImgData, 0, j);\n            }\n          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n            thisChunkHeight = FULL_CHUNK_HEIGHT;\n            elemsInThisChunk = width * thisChunkHeight;\n\n            for (i = 0; i < totalChunks; i++) {\n              if (i >= fullChunks) {\n                thisChunkHeight = partialChunkHeight;\n                elemsInThisChunk = width * thisChunkHeight;\n              }\n\n              destPos = 0;\n\n              for (j = elemsInThisChunk; j--;) {\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = src[srcPos++];\n                dest[destPos++] = 255;\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          } else {\n            throw new Error(`bad image kind: ${imgData.kind}`);\n          }\n        }\n\n        function putBinaryImageMask(ctx, imgData) {\n          if (imgData.bitmap) {\n            ctx.drawImage(imgData.bitmap, 0, 0);\n            return;\n          }\n\n          const height = imgData.height,\n                width = imgData.width;\n          const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n          const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n          const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n          const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n          let srcPos = 0;\n          const src = imgData.data;\n          const dest = chunkImgData.data;\n\n          for (let i = 0; i < totalChunks; i++) {\n            const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n            ({\n              srcPos\n            } = (0, _image_utils.convertBlackAndWhiteToRGBA)({\n              src,\n              srcPos,\n              dest,\n              width,\n              height: thisChunkHeight,\n              nonBlackColor: 0\n            }));\n            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n          }\n        }\n\n        function copyCtxState(sourceCtx, destCtx) {\n          const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\", \"filter\"];\n\n          for (const property of properties) {\n            if (sourceCtx[property] !== undefined) {\n              destCtx[property] = sourceCtx[property];\n            }\n          }\n\n          if (sourceCtx.setLineDash !== undefined) {\n            destCtx.setLineDash(sourceCtx.getLineDash());\n            destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n          }\n        }\n\n        function resetCtxToDefault(ctx) {\n          ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n          ctx.fillRule = \"nonzero\";\n          ctx.globalAlpha = 1;\n          ctx.lineWidth = 1;\n          ctx.lineCap = \"butt\";\n          ctx.lineJoin = \"miter\";\n          ctx.miterLimit = 10;\n          ctx.globalCompositeOperation = \"source-over\";\n          ctx.font = \"10px sans-serif\";\n\n          if (ctx.setLineDash !== undefined) {\n            ctx.setLineDash([]);\n            ctx.lineDashOffset = 0;\n          }\n\n          if (!_util.isNodeJS) {\n            const {\n              filter\n            } = ctx;\n\n            if (filter !== \"none\" && filter !== \"\") {\n              ctx.filter = \"none\";\n            }\n          }\n        }\n\n        function composeSMaskBackdrop(bytes, r0, g0, b0) {\n          const length = bytes.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = bytes[i];\n\n            if (alpha === 0) {\n              bytes[i - 3] = r0;\n              bytes[i - 2] = g0;\n              bytes[i - 1] = b0;\n            } else if (alpha < 255) {\n              const alpha_ = 255 - alpha;\n              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n            }\n          }\n        }\n\n        function composeSMaskAlpha(maskData, layerData, transferMap) {\n          const length = maskData.length;\n          const scale = 1 / 255;\n\n          for (let i = 3; i < length; i += 4) {\n            const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n            layerData[i] = layerData[i] * alpha * scale | 0;\n          }\n        }\n\n        function composeSMaskLuminosity(maskData, layerData, transferMap) {\n          const length = maskData.length;\n\n          for (let i = 3; i < length; i += 4) {\n            const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n          }\n        }\n\n        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {\n          const hasBackdrop = !!backdrop;\n          const r0 = hasBackdrop ? backdrop[0] : 0;\n          const g0 = hasBackdrop ? backdrop[1] : 0;\n          const b0 = hasBackdrop ? backdrop[2] : 0;\n          const composeFn = subtype === \"Luminosity\" ? composeSMaskLuminosity : composeSMaskAlpha;\n          const PIXELS_TO_PROCESS = 1048576;\n          const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n          for (let row = 0; row < height; row += chunkSize) {\n            const chunkHeight = Math.min(chunkSize, height - row);\n            const maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);\n            const layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);\n\n            if (hasBackdrop) {\n              composeSMaskBackdrop(maskData.data, r0, g0, b0);\n            }\n\n            composeFn(maskData.data, layerData.data, transferMap);\n            layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n          }\n        }\n\n        function composeSMask(ctx, smask, layerCtx, layerBox) {\n          const layerOffsetX = layerBox[0];\n          const layerOffsetY = layerBox[1];\n          const layerWidth = layerBox[2] - layerOffsetX;\n          const layerHeight = layerBox[3] - layerOffsetY;\n\n          if (layerWidth === 0 || layerHeight === 0) {\n            return;\n          }\n\n          genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);\n          ctx.save();\n          ctx.globalAlpha = 1;\n          ctx.globalCompositeOperation = \"source-over\";\n          ctx.setTransform(1, 0, 0, 1, 0, 0);\n          ctx.drawImage(layerCtx.canvas, 0, 0);\n          ctx.restore();\n        }\n\n        function getImageSmoothingEnabled(transform, interpolate) {\n          const scale = _util.Util.singularValueDecompose2dScale(transform);\n\n          scale[0] = Math.fround(scale[0]);\n          scale[1] = Math.fround(scale[1]);\n          const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n\n          if (interpolate !== undefined) {\n            return interpolate;\n          } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n            return true;\n          }\n\n          return false;\n        }\n\n        const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n        const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n        const NORMAL_CLIP = {};\n        const EO_CLIP = {};\n\n        class CanvasGraphics {\n          constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, _ref30, annotationCanvasMap, pageColors) {\n            let {\n              optionalContentConfig,\n              markedContentStack = null\n            } = _ref30;\n            this.ctx = canvasCtx;\n            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n            this.stateStack = [];\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.res = null;\n            this.xobjs = null;\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.canvasFactory = canvasFactory;\n            this.filterFactory = filterFactory;\n            this.groupStack = [];\n            this.processingType3 = null;\n            this.baseTransform = null;\n            this.baseTransformStack = [];\n            this.groupLevel = 0;\n            this.smaskStack = [];\n            this.smaskCounter = 0;\n            this.tempSMask = null;\n            this.suspendedCtx = null;\n            this.contentVisible = true;\n            this.markedContentStack = markedContentStack || [];\n            this.optionalContentConfig = optionalContentConfig;\n            this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n            this.cachedPatterns = new Map();\n            this.annotationCanvasMap = annotationCanvasMap;\n            this.viewportScale = 1;\n            this.outputScaleX = 1;\n            this.outputScaleY = 1;\n            this.pageColors = pageColors;\n            this._cachedScaleForStroking = [-1, 0];\n            this._cachedGetSinglePixelWidth = null;\n            this._cachedBitmapsMap = new Map();\n          }\n\n          getObject(data) {\n            let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (typeof data === \"string\") {\n              return data.startsWith(\"g_\") ? this.commonObjs.get(data) : this.objs.get(data);\n            }\n\n            return fallback;\n          }\n\n          beginDrawing(_ref31) {\n            let {\n              transform,\n              viewport,\n              transparency = false,\n              background = null\n            } = _ref31;\n            const width = this.ctx.canvas.width;\n            const height = this.ctx.canvas.height;\n            const savedFillStyle = this.ctx.fillStyle;\n            this.ctx.fillStyle = background || \"#ffffff\";\n            this.ctx.fillRect(0, 0, width, height);\n            this.ctx.fillStyle = savedFillStyle;\n\n            if (transparency) {\n              const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height);\n              this.compositeCtx = this.ctx;\n              this.transparentCanvas = transparentCanvas.canvas;\n              this.ctx = transparentCanvas.context;\n              this.ctx.save();\n              this.ctx.transform(...(0, _display_utils.getCurrentTransform)(this.compositeCtx));\n            }\n\n            this.ctx.save();\n            resetCtxToDefault(this.ctx);\n\n            if (transform) {\n              this.ctx.transform(...transform);\n              this.outputScaleX = transform[0];\n              this.outputScaleY = transform[0];\n            }\n\n            this.ctx.transform(...viewport.transform);\n            this.viewportScale = viewport.scale;\n            this.baseTransform = (0, _display_utils.getCurrentTransform)(this.ctx);\n          }\n\n          executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n            const argsArray = operatorList.argsArray;\n            const fnArray = operatorList.fnArray;\n            let i = executionStartIdx || 0;\n            const argsArrayLen = argsArray.length;\n\n            if (argsArrayLen === i) {\n              return i;\n            }\n\n            const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n            const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n            let steps = 0;\n            const commonObjs = this.commonObjs;\n            const objs = this.objs;\n            let fnId;\n\n            while (true) {\n              if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                stepper.breakIt(i, continueCallback);\n                return i;\n              }\n\n              fnId = fnArray[i];\n\n              if (fnId !== _util.OPS.dependency) {\n                this[fnId].apply(this, argsArray[i]);\n              } else {\n                for (const depObjId of argsArray[i]) {\n                  const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n                  if (!objsPool.has(depObjId)) {\n                    objsPool.get(depObjId, continueCallback);\n                    return i;\n                  }\n                }\n              }\n\n              i++;\n\n              if (i === argsArrayLen) {\n                return i;\n              }\n\n              if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                if (Date.now() > endTime) {\n                  continueCallback();\n                  return i;\n                }\n\n                steps = 0;\n              }\n            }\n          }\n\n          #restoreInitialState() {\n            while (this.stateStack.length || this.inSMaskMode) {\n              this.restore();\n            }\n\n            this.ctx.restore();\n\n            if (this.transparentCanvas) {\n              this.ctx = this.compositeCtx;\n              this.ctx.save();\n              this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n              this.ctx.drawImage(this.transparentCanvas, 0, 0);\n              this.ctx.restore();\n              this.transparentCanvas = null;\n            }\n          }\n\n          endDrawing() {\n            this.#restoreInitialState();\n            this.cachedCanvases.clear();\n            this.cachedPatterns.clear();\n\n            for (const cache of this._cachedBitmapsMap.values()) {\n              for (const canvas of cache.values()) {\n                if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement) {\n                  canvas.width = canvas.height = 0;\n                }\n              }\n\n              cache.clear();\n            }\n\n            this._cachedBitmapsMap.clear();\n\n            this.#drawFilter();\n          }\n\n          #drawFilter() {\n            if (this.pageColors) {\n              const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);\n\n              if (hcmFilterId !== \"none\") {\n                const savedFilter = this.ctx.filter;\n                this.ctx.filter = hcmFilterId;\n                this.ctx.drawImage(this.ctx.canvas, 0, 0);\n                this.ctx.filter = savedFilter;\n              }\n            }\n          }\n\n          _scaleImage(img, inverseTransform) {\n            const width = img.width;\n            const height = img.height;\n            let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n            let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n            let paintWidth = width,\n                paintHeight = height;\n            let tmpCanvasId = \"prescale1\";\n            let tmpCanvas, tmpCtx;\n\n            while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n              let newWidth = paintWidth,\n                  newHeight = paintHeight;\n\n              if (widthScale > 2 && paintWidth > 1) {\n                newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);\n                widthScale /= paintWidth / newWidth;\n              }\n\n              if (heightScale > 2 && paintHeight > 1) {\n                newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;\n                heightScale /= paintHeight / newHeight;\n              }\n\n              tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n              tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, newWidth, newHeight);\n              tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n              img = tmpCanvas.canvas;\n              paintWidth = newWidth;\n              paintHeight = newHeight;\n              tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n            }\n\n            return {\n              img,\n              paintWidth,\n              paintHeight\n            };\n          }\n\n          _createMaskCanvas(img) {\n            const ctx = this.ctx;\n            const {\n              width,\n              height\n            } = img;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            const currentTransform = (0, _display_utils.getCurrentTransform)(ctx);\n            let cache, cacheKey, scaled, maskCanvas;\n\n            if ((img.bitmap || img.data) && img.count > 1) {\n              const mainKey = img.bitmap || img.data.buffer;\n              cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);\n              cache = this._cachedBitmapsMap.get(mainKey);\n\n              if (!cache) {\n                cache = new Map();\n\n                this._cachedBitmapsMap.set(mainKey, cache);\n              }\n\n              const cachedImage = cache.get(cacheKey);\n\n              if (cachedImage && !isPatternFill) {\n                const offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);\n                const offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);\n                return {\n                  canvas: cachedImage,\n                  offsetX,\n                  offsetY\n                };\n              }\n\n              scaled = cachedImage;\n            }\n\n            if (!scaled) {\n              maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              putBinaryImageMask(maskCanvas.context, img);\n            }\n\n            let maskToCanvas = _util.Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);\n\n            maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n\n            const cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);\n\n            const cord2 = _util.Util.applyTransform([width, height], maskToCanvas);\n\n            const rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n\n            const drawnWidth = Math.round(rect[2] - rect[0]) || 1;\n            const drawnHeight = Math.round(rect[3] - rect[1]) || 1;\n            const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight);\n            const fillCtx = fillCanvas.context;\n            const offsetX = Math.min(cord1[0], cord2[0]);\n            const offsetY = Math.min(cord1[1], cord2[1]);\n            fillCtx.translate(-offsetX, -offsetY);\n            fillCtx.transform(...maskToCanvas);\n\n            if (!scaled) {\n              scaled = this._scaleImage(maskCanvas.canvas, (0, _display_utils.getCurrentTransformInverse)(fillCtx));\n              scaled = scaled.img;\n\n              if (cache && isPatternFill) {\n                cache.set(cacheKey, scaled);\n              }\n            }\n\n            fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled((0, _display_utils.getCurrentTransform)(fillCtx), img.interpolate);\n            drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);\n            fillCtx.globalCompositeOperation = \"source-in\";\n\n            const inverse = _util.Util.transform((0, _display_utils.getCurrentTransformInverse)(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);\n\n            fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, _pattern_helper.PathType.FILL) : fillColor;\n            fillCtx.fillRect(0, 0, width, height);\n\n            if (cache && !isPatternFill) {\n              this.cachedCanvases.delete(\"fillCanvas\");\n              cache.set(cacheKey, fillCanvas.canvas);\n            }\n\n            return {\n              canvas: fillCanvas.canvas,\n              offsetX: Math.round(offsetX),\n              offsetY: Math.round(offsetY)\n            };\n          }\n\n          setLineWidth(width) {\n            if (width !== this.current.lineWidth) {\n              this._cachedScaleForStroking[0] = -1;\n            }\n\n            this.current.lineWidth = width;\n            this.ctx.lineWidth = width;\n          }\n\n          setLineCap(style) {\n            this.ctx.lineCap = LINE_CAP_STYLES[style];\n          }\n\n          setLineJoin(style) {\n            this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n          }\n\n          setMiterLimit(limit) {\n            this.ctx.miterLimit = limit;\n          }\n\n          setDash(dashArray, dashPhase) {\n            const ctx = this.ctx;\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash(dashArray);\n              ctx.lineDashOffset = dashPhase;\n            }\n          }\n\n          setRenderingIntent(intent) {}\n\n          setFlatness(flatness) {}\n\n          setGState(states) {\n            for (const [key, value] of states) {\n              switch (key) {\n                case \"LW\":\n                  this.setLineWidth(value);\n                  break;\n\n                case \"LC\":\n                  this.setLineCap(value);\n                  break;\n\n                case \"LJ\":\n                  this.setLineJoin(value);\n                  break;\n\n                case \"ML\":\n                  this.setMiterLimit(value);\n                  break;\n\n                case \"D\":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case \"RI\":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case \"FL\":\n                  this.setFlatness(value);\n                  break;\n\n                case \"Font\":\n                  this.setFont(value[0], value[1]);\n                  break;\n\n                case \"CA\":\n                  this.current.strokeAlpha = value;\n                  break;\n\n                case \"ca\":\n                  this.current.fillAlpha = value;\n                  this.ctx.globalAlpha = value;\n                  break;\n\n                case \"BM\":\n                  this.ctx.globalCompositeOperation = value;\n                  break;\n\n                case \"SMask\":\n                  this.current.activeSMask = value ? this.tempSMask : null;\n                  this.tempSMask = null;\n                  this.checkSMaskState();\n                  break;\n\n                case \"TR\":\n                  this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);\n                  break;\n              }\n            }\n          }\n\n          get inSMaskMode() {\n            return !!this.suspendedCtx;\n          }\n\n          checkSMaskState() {\n            const inSMaskMode = this.inSMaskMode;\n\n            if (this.current.activeSMask && !inSMaskMode) {\n              this.beginSMaskMode();\n            } else if (!this.current.activeSMask && inSMaskMode) {\n              this.endSMaskMode();\n            }\n          }\n\n          beginSMaskMode() {\n            if (this.inSMaskMode) {\n              throw new Error(\"beginSMaskMode called while already in smask mode\");\n            }\n\n            const drawnWidth = this.ctx.canvas.width;\n            const drawnHeight = this.ctx.canvas.height;\n            const cacheId = \"smaskGroupAt\" + this.groupLevel;\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n            this.suspendedCtx = this.ctx;\n            this.ctx = scratchCanvas.context;\n            const ctx = this.ctx;\n            ctx.setTransform(...(0, _display_utils.getCurrentTransform)(this.suspendedCtx));\n            copyCtxState(this.suspendedCtx, ctx);\n            mirrorContextOperations(ctx, this.suspendedCtx);\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n          }\n\n          endSMaskMode() {\n            if (!this.inSMaskMode) {\n              throw new Error(\"endSMaskMode called while not in smask mode\");\n            }\n\n            this.ctx._removeMirroring();\n\n            copyCtxState(this.ctx, this.suspendedCtx);\n            this.ctx = this.suspendedCtx;\n            this.suspendedCtx = null;\n          }\n\n          compose(dirtyBox) {\n            if (!this.current.activeSMask) {\n              return;\n            }\n\n            if (!dirtyBox) {\n              dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n            } else {\n              dirtyBox[0] = Math.floor(dirtyBox[0]);\n              dirtyBox[1] = Math.floor(dirtyBox[1]);\n              dirtyBox[2] = Math.ceil(dirtyBox[2]);\n              dirtyBox[3] = Math.ceil(dirtyBox[3]);\n            }\n\n            const smask = this.current.activeSMask;\n            const suspendedCtx = this.suspendedCtx;\n            composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n            this.ctx.save();\n            this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n            this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n            this.ctx.restore();\n          }\n\n          save() {\n            if (this.inSMaskMode) {\n              copyCtxState(this.ctx, this.suspendedCtx);\n              this.suspendedCtx.save();\n            } else {\n              this.ctx.save();\n            }\n\n            const old = this.current;\n            this.stateStack.push(old);\n            this.current = old.clone();\n          }\n\n          restore() {\n            if (this.stateStack.length === 0 && this.inSMaskMode) {\n              this.endSMaskMode();\n            }\n\n            if (this.stateStack.length !== 0) {\n              this.current = this.stateStack.pop();\n\n              if (this.inSMaskMode) {\n                this.suspendedCtx.restore();\n                copyCtxState(this.suspendedCtx, this.ctx);\n              } else {\n                this.ctx.restore();\n              }\n\n              this.checkSMaskState();\n              this.pendingClip = null;\n              this._cachedScaleForStroking[0] = -1;\n              this._cachedGetSinglePixelWidth = null;\n            }\n          }\n\n          transform(a, b, c, d, e, f) {\n            this.ctx.transform(a, b, c, d, e, f);\n            this._cachedScaleForStroking[0] = -1;\n            this._cachedGetSinglePixelWidth = null;\n          }\n\n          constructPath(ops, args, minMax) {\n            const ctx = this.ctx;\n            const current = this.current;\n            let x = current.x,\n                y = current.y;\n            let startX, startY;\n            const currentTransform = (0, _display_utils.getCurrentTransform)(ctx);\n            const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;\n            const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n\n            for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n              switch (ops[i] | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  const width = args[j++];\n                  const height = args[j++];\n                  const xw = x + width;\n                  const yh = y + height;\n                  ctx.moveTo(x, y);\n\n                  if (width === 0 || height === 0) {\n                    ctx.lineTo(xw, yh);\n                  } else {\n                    ctx.lineTo(xw, y);\n                    ctx.lineTo(xw, yh);\n                    ctx.lineTo(x, yh);\n                  }\n\n                  if (!isScalingMatrix) {\n                    current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\n                  }\n\n                  ctx.closePath();\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.moveTo(x, y);\n\n                  if (!isScalingMatrix) {\n                    current.updatePathMinMax(currentTransform, x, y);\n                  }\n\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  ctx.lineTo(x, y);\n\n                  if (!isScalingMatrix) {\n                    current.updatePathMinMax(currentTransform, x, y);\n                  }\n\n                  break;\n\n                case _util.OPS.curveTo:\n                  startX = x;\n                  startY = y;\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                  current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  startX = x;\n                  startY = y;\n                  ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                  current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  startX = x;\n                  startY = y;\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                  current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  ctx.closePath();\n                  break;\n              }\n            }\n\n            if (isScalingMatrix) {\n              current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n            }\n\n            current.setCurrentPoint(x, y);\n          }\n\n          closePath() {\n            this.ctx.closePath();\n          }\n\n          stroke() {\n            let consumePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n            const ctx = this.ctx;\n            const strokeColor = this.current.strokeColor;\n            ctx.globalAlpha = this.current.strokeAlpha;\n\n            if (this.contentVisible) {\n              if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n                ctx.save();\n                ctx.strokeStyle = strokeColor.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.STROKE);\n                this.rescaleAndStroke(false);\n                ctx.restore();\n              } else {\n                this.rescaleAndStroke(true);\n              }\n            }\n\n            if (consumePath) {\n              this.consumePath(this.current.getClippedPathBoundingBox());\n            }\n\n            ctx.globalAlpha = this.current.fillAlpha;\n          }\n\n          closeStroke() {\n            this.closePath();\n            this.stroke();\n          }\n\n          fill() {\n            let consumePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n            let needRestore = false;\n\n            if (isPatternFill) {\n              ctx.save();\n              ctx.fillStyle = fillColor.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL);\n              needRestore = true;\n            }\n\n            const intersect = this.current.getClippedPathBoundingBox();\n\n            if (this.contentVisible && intersect !== null) {\n              if (this.pendingEOFill) {\n                ctx.fill(\"evenodd\");\n                this.pendingEOFill = false;\n              } else {\n                ctx.fill();\n              }\n            }\n\n            if (needRestore) {\n              ctx.restore();\n            }\n\n            if (consumePath) {\n              this.consumePath(intersect);\n            }\n          }\n\n          eoFill() {\n            this.pendingEOFill = true;\n            this.fill();\n          }\n\n          fillStroke() {\n            this.fill(false);\n            this.stroke(false);\n            this.consumePath();\n          }\n\n          eoFillStroke() {\n            this.pendingEOFill = true;\n            this.fillStroke();\n          }\n\n          closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          }\n\n          closeEOFillStroke() {\n            this.pendingEOFill = true;\n            this.closePath();\n            this.fillStroke();\n          }\n\n          endPath() {\n            this.consumePath();\n          }\n\n          clip() {\n            this.pendingClip = NORMAL_CLIP;\n          }\n\n          eoClip() {\n            this.pendingClip = EO_CLIP;\n          }\n\n          beginText() {\n            this.current.textMatrix = _util.IDENTITY_MATRIX;\n            this.current.textMatrixScale = 1;\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          endText() {\n            const paths = this.pendingTextPaths;\n            const ctx = this.ctx;\n\n            if (paths === undefined) {\n              ctx.beginPath();\n              return;\n            }\n\n            ctx.save();\n            ctx.beginPath();\n\n            for (const path of paths) {\n              ctx.setTransform(...path.transform);\n              ctx.translate(path.x, path.y);\n              path.addToPath(ctx, path.fontSize);\n            }\n\n            ctx.restore();\n            ctx.clip();\n            ctx.beginPath();\n            delete this.pendingTextPaths;\n          }\n\n          setCharSpacing(spacing) {\n            this.current.charSpacing = spacing;\n          }\n\n          setWordSpacing(spacing) {\n            this.current.wordSpacing = spacing;\n          }\n\n          setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          }\n\n          setLeading(leading) {\n            this.current.leading = -leading;\n          }\n\n          setFont(fontRefName, size) {\n            const fontObj = this.commonObjs.get(fontRefName);\n            const current = this.current;\n\n            if (!fontObj) {\n              throw new Error(`Can't find font for ${fontRefName}`);\n            }\n\n            current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n            if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n              (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n            }\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            this.current.font = fontObj;\n            this.current.fontSize = size;\n\n            if (fontObj.isType3Font) {\n              return;\n            }\n\n            const name = fontObj.loadedName || \"sans-serif\";\n            const typeface = fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\n            let bold = \"normal\";\n\n            if (fontObj.black) {\n              bold = \"900\";\n            } else if (fontObj.bold) {\n              bold = \"bold\";\n            }\n\n            const italic = fontObj.italic ? \"italic\" : \"normal\";\n            let browserFontSize = size;\n\n            if (size < MIN_FONT_SIZE) {\n              browserFontSize = MIN_FONT_SIZE;\n            } else if (size > MAX_FONT_SIZE) {\n              browserFontSize = MAX_FONT_SIZE;\n            }\n\n            this.current.fontSizeScale = size / browserFontSize;\n            this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n          }\n\n          setTextRenderingMode(mode) {\n            this.current.textRenderingMode = mode;\n          }\n\n          setTextRise(rise) {\n            this.current.textRise = rise;\n          }\n\n          moveText(x, y) {\n            this.current.x = this.current.lineX += x;\n            this.current.y = this.current.lineY += y;\n          }\n\n          setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          }\n\n          setTextMatrix(a, b, c, d, e, f) {\n            this.current.textMatrix = [a, b, c, d, e, f];\n            this.current.textMatrixScale = Math.hypot(a, b);\n            this.current.x = this.current.lineX = 0;\n            this.current.y = this.current.lineY = 0;\n          }\n\n          nextLine() {\n            this.moveText(0, this.current.leading);\n          }\n\n          paintChar(character, x, y, patternTransform) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const textRenderingMode = current.textRenderingMode;\n            const fontSize = current.fontSize / current.fontSizeScale;\n            const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n            const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n            const patternFill = current.patternFill && !font.missingFile;\n            let addToPath;\n\n            if (font.disableFontFace || isAddToPathSet || patternFill) {\n              addToPath = font.getPathGenerator(this.commonObjs, character);\n            }\n\n            if (font.disableFontFace || patternFill) {\n              ctx.save();\n              ctx.translate(x, y);\n              ctx.beginPath();\n              addToPath(ctx, fontSize);\n\n              if (patternTransform) {\n                ctx.setTransform(...patternTransform);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fill();\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.stroke();\n              }\n\n              ctx.restore();\n            } else {\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.fillText(character, x, y);\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                ctx.strokeText(character, x, y);\n              }\n            }\n\n            if (isAddToPathSet) {\n              const paths = this.pendingTextPaths ||= [];\n              paths.push({\n                transform: (0, _display_utils.getCurrentTransform)(ctx),\n                x,\n                y,\n                fontSize,\n                addToPath\n              });\n            }\n          }\n\n          get isFontSubpixelAAEnabled() {\n            const {\n              context: ctx\n            } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n            ctx.scale(1.5, 1);\n            ctx.fillText(\"I\", 0, 10);\n            const data = ctx.getImageData(0, 0, 10, 10).data;\n            let enabled = false;\n\n            for (let i = 3; i < data.length; i += 4) {\n              if (data[i] > 0 && data[i] < 255) {\n                enabled = true;\n                break;\n              }\n            }\n\n            return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n          }\n\n          showText(glyphs) {\n            const current = this.current;\n            const font = current.font;\n\n            if (font.isType3Font) {\n              return this.showType3Text(glyphs);\n            }\n\n            const fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return undefined;\n            }\n\n            const ctx = this.ctx;\n            const fontSizeScale = current.fontSizeScale;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const fontDirection = current.fontDirection;\n            const textHScale = current.textHScale * fontDirection;\n            const glyphsLength = glyphs.length;\n            const vertical = font.vertical;\n            const spacingDir = vertical ? 1 : -1;\n            const defaultVMetrics = font.defaultVMetrics;\n            const widthAdvanceScale = fontSize * current.fontMatrix[0];\n            const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n            ctx.save();\n            ctx.transform(...current.textMatrix);\n            ctx.translate(current.x, current.y + current.textRise);\n\n            if (fontDirection > 0) {\n              ctx.scale(textHScale, -1);\n            } else {\n              ctx.scale(textHScale, 1);\n            }\n\n            let patternTransform;\n\n            if (current.patternFill) {\n              ctx.save();\n              const pattern = current.fillColor.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL);\n              patternTransform = (0, _display_utils.getCurrentTransform)(ctx);\n              ctx.restore();\n              ctx.fillStyle = pattern;\n            }\n\n            let lineWidth = current.lineWidth;\n            const scale = current.textMatrixScale;\n\n            if (scale === 0 || lineWidth === 0) {\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                lineWidth = this.getSinglePixelWidth();\n              }\n            } else {\n              lineWidth /= scale;\n            }\n\n            if (fontSizeScale !== 1.0) {\n              ctx.scale(fontSizeScale, fontSizeScale);\n              lineWidth /= fontSizeScale;\n            }\n\n            ctx.lineWidth = lineWidth;\n\n            if (font.isInvalidPDFjsFont) {\n              const chars = [];\n              let width = 0;\n\n              for (const glyph of glyphs) {\n                chars.push(glyph.unicode);\n                width += glyph.width;\n              }\n\n              ctx.fillText(chars.join(\"\"), 0, 0);\n              current.x += width * widthAdvanceScale * textHScale;\n              ctx.restore();\n              this.compose();\n              return undefined;\n            }\n\n            let x = 0,\n                i;\n\n            for (i = 0; i < glyphsLength; ++i) {\n              const glyph = glyphs[i];\n\n              if (typeof glyph === \"number\") {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              let restoreNeeded = false;\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const character = glyph.fontChar;\n              const accent = glyph.accent;\n              let scaledX, scaledY;\n              let width = glyph.width;\n\n              if (vertical) {\n                const vmetric = glyph.vmetric || defaultVMetrics;\n                const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                const vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (font.remeasure && width > 0) {\n                const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                  const characterScaleX = width / measuredWidth;\n                  restoreNeeded = true;\n                  ctx.save();\n                  ctx.scale(characterScaleX, 1);\n                  scaledX /= characterScaleX;\n                } else if (width !== measuredWidth) {\n                  scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                }\n              }\n\n              if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                if (simpleFillText && !accent) {\n                  ctx.fillText(character, scaledX, scaledY);\n                } else {\n                  this.paintChar(character, scaledX, scaledY, patternTransform);\n\n                  if (accent) {\n                    const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                    const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                    this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);\n                  }\n                }\n              }\n\n              const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;\n              x += charWidth;\n\n              if (restoreNeeded) {\n                ctx.restore();\n              }\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            ctx.restore();\n            this.compose();\n            return undefined;\n          }\n\n          showType3Text(glyphs) {\n            const ctx = this.ctx;\n            const current = this.current;\n            const font = current.font;\n            const fontSize = current.fontSize;\n            const fontDirection = current.fontDirection;\n            const spacingDir = font.vertical ? 1 : -1;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const textHScale = current.textHScale * fontDirection;\n            const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n            const glyphsLength = glyphs.length;\n            const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n            let i, glyph, width, spacingLength;\n\n            if (isTextInvisible || fontSize === 0) {\n              return;\n            }\n\n            this._cachedScaleForStroking[0] = -1;\n            this._cachedGetSinglePixelWidth = null;\n            ctx.save();\n            ctx.transform(...current.textMatrix);\n            ctx.translate(current.x, current.y);\n            ctx.scale(textHScale, fontDirection);\n\n            for (i = 0; i < glyphsLength; ++i) {\n              glyph = glyphs[i];\n\n              if (typeof glyph === \"number\") {\n                spacingLength = spacingDir * glyph * fontSize / 1000;\n                this.ctx.translate(spacingLength, 0);\n                current.x += spacingLength * textHScale;\n                continue;\n              }\n\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n              if (!operatorList) {\n                (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                continue;\n              }\n\n              if (this.contentVisible) {\n                this.processingType3 = glyph;\n                this.save();\n                ctx.scale(fontSize, fontSize);\n                ctx.transform(...fontMatrix);\n                this.executeOperatorList(operatorList);\n                this.restore();\n              }\n\n              const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n              width = transformed[0] * fontSize + spacing;\n              ctx.translate(width, 0);\n              current.x += width * textHScale;\n            }\n\n            ctx.restore();\n            this.processingType3 = null;\n          }\n\n          setCharWidth(xWidth, yWidth) {}\n\n          setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n            this.ctx.rect(llx, lly, urx - llx, ury - lly);\n            this.ctx.clip();\n            this.endPath();\n          }\n\n          getColorN_Pattern(IR) {\n            let pattern;\n\n            if (IR[0] === \"TilingPattern\") {\n              const color = IR[1];\n              const baseTransform = this.baseTransform || (0, _display_utils.getCurrentTransform)(this.ctx);\n              const canvasGraphicsFactory = {\n                createCanvasGraphics: ctx => {\n                  return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n                    optionalContentConfig: this.optionalContentConfig,\n                    markedContentStack: this.markedContentStack\n                  });\n                }\n              };\n              pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n            } else {\n              pattern = this._getPattern(IR[1], IR[2]);\n            }\n\n            return pattern;\n          }\n\n          setStrokeColorN() {\n            this.current.strokeColor = this.getColorN_Pattern(arguments);\n          }\n\n          setFillColorN() {\n            this.current.fillColor = this.getColorN_Pattern(arguments);\n            this.current.patternFill = true;\n          }\n\n          setStrokeRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.strokeStyle = color;\n            this.current.strokeColor = color;\n          }\n\n          setFillRGBColor(r, g, b) {\n            const color = _util.Util.makeHexColor(r, g, b);\n\n            this.ctx.fillStyle = color;\n            this.current.fillColor = color;\n            this.current.patternFill = false;\n          }\n\n          _getPattern(objId) {\n            let matrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            let pattern;\n\n            if (this.cachedPatterns.has(objId)) {\n              pattern = this.cachedPatterns.get(objId);\n            } else {\n              pattern = (0, _pattern_helper.getShadingPattern)(this.getObject(objId));\n              this.cachedPatterns.set(objId, pattern);\n            }\n\n            if (matrix) {\n              pattern.matrix = matrix;\n            }\n\n            return pattern;\n          }\n\n          shadingFill(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            this.save();\n\n            const pattern = this._getPattern(objId);\n\n            ctx.fillStyle = pattern.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.SHADING);\n            const inv = (0, _display_utils.getCurrentTransformInverse)(ctx);\n\n            if (inv) {\n              const {\n                width,\n                height\n              } = ctx.canvas;\n\n              const [x0, y0, x1, y1] = _util.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv);\n\n              this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n            } else {\n              this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n            }\n\n            this.compose(this.current.getClippedPathBoundingBox());\n            this.restore();\n          }\n\n          beginInlineImage() {\n            (0, _util.unreachable)(\"Should not call beginInlineImage\");\n          }\n\n          beginImageData() {\n            (0, _util.unreachable)(\"Should not call beginImageData\");\n          }\n\n          paintFormXObjectBegin(matrix, bbox) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n            this.baseTransformStack.push(this.baseTransform);\n\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform(...matrix);\n            }\n\n            this.baseTransform = (0, _display_utils.getCurrentTransform)(this.ctx);\n\n            if (bbox) {\n              const width = bbox[2] - bbox[0];\n              const height = bbox[3] - bbox[1];\n              this.ctx.rect(bbox[0], bbox[1], width, height);\n              this.current.updateRectMinMax((0, _display_utils.getCurrentTransform)(this.ctx), bbox);\n              this.clip();\n              this.endPath();\n            }\n          }\n\n          paintFormXObjectEnd() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.restore();\n            this.baseTransform = this.baseTransformStack.pop();\n          }\n\n          beginGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.save();\n\n            if (this.inSMaskMode) {\n              this.endSMaskMode();\n              this.current.activeSMask = null;\n            }\n\n            const currentCtx = this.ctx;\n\n            if (!group.isolated) {\n              (0, _util.info)(\"TODO: Support non-isolated groups.\");\n            }\n\n            if (group.knockout) {\n              (0, _util.warn)(\"Knockout groups not supported.\");\n            }\n\n            const currentTransform = (0, _display_utils.getCurrentTransform)(currentCtx);\n\n            if (group.matrix) {\n              currentCtx.transform(...group.matrix);\n            }\n\n            if (!group.bbox) {\n              throw new Error(\"Bounding box is required.\");\n            }\n\n            let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, (0, _display_utils.getCurrentTransform)(currentCtx));\n\n            const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n            bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n            const offsetX = Math.floor(bounds[0]);\n            const offsetY = Math.floor(bounds[1]);\n            let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n            let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n            let scaleX = 1,\n                scaleY = 1;\n\n            if (drawnWidth > MAX_GROUP_SIZE) {\n              scaleX = drawnWidth / MAX_GROUP_SIZE;\n              drawnWidth = MAX_GROUP_SIZE;\n            }\n\n            if (drawnHeight > MAX_GROUP_SIZE) {\n              scaleY = drawnHeight / MAX_GROUP_SIZE;\n              drawnHeight = MAX_GROUP_SIZE;\n            }\n\n            this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n            let cacheId = \"groupAt\" + this.groupLevel;\n\n            if (group.smask) {\n              cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n            }\n\n            const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n            const groupCtx = scratchCanvas.context;\n            groupCtx.scale(1 / scaleX, 1 / scaleY);\n            groupCtx.translate(-offsetX, -offsetY);\n            groupCtx.transform(...currentTransform);\n\n            if (group.smask) {\n              this.smaskStack.push({\n                canvas: scratchCanvas.canvas,\n                context: groupCtx,\n                offsetX,\n                offsetY,\n                scaleX,\n                scaleY,\n                subtype: group.smask.subtype,\n                backdrop: group.smask.backdrop,\n                transferMap: group.smask.transferMap || null,\n                startTransformInverse: null\n              });\n            } else {\n              currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n              currentCtx.translate(offsetX, offsetY);\n              currentCtx.scale(scaleX, scaleY);\n              currentCtx.save();\n            }\n\n            copyCtxState(currentCtx, groupCtx);\n            this.ctx = groupCtx;\n            this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n            this.groupStack.push(currentCtx);\n            this.groupLevel++;\n          }\n\n          endGroup(group) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.groupLevel--;\n            const groupCtx = this.ctx;\n            const ctx = this.groupStack.pop();\n            this.ctx = ctx;\n            this.ctx.imageSmoothingEnabled = false;\n\n            if (group.smask) {\n              this.tempSMask = this.smaskStack.pop();\n              this.restore();\n            } else {\n              this.ctx.restore();\n              const currentMtx = (0, _display_utils.getCurrentTransform)(this.ctx);\n              this.restore();\n              this.ctx.save();\n              this.ctx.setTransform(...currentMtx);\n\n              const dirtyBox = _util.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);\n\n              this.ctx.drawImage(groupCtx.canvas, 0, 0);\n              this.ctx.restore();\n              this.compose(dirtyBox);\n            }\n          }\n\n          beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n            this.#restoreInitialState();\n            resetCtxToDefault(this.ctx);\n            this.ctx.save();\n            this.save();\n\n            if (this.baseTransform) {\n              this.ctx.setTransform(...this.baseTransform);\n            }\n\n            if (Array.isArray(rect) && rect.length === 4) {\n              const width = rect[2] - rect[0];\n              const height = rect[3] - rect[1];\n\n              if (hasOwnCanvas && this.annotationCanvasMap) {\n                transform = transform.slice();\n                transform[4] -= rect[0];\n                transform[5] -= rect[1];\n                rect = rect.slice();\n                rect[0] = rect[1] = 0;\n                rect[2] = width;\n                rect[3] = height;\n\n                const [scaleX, scaleY] = _util.Util.singularValueDecompose2dScale((0, _display_utils.getCurrentTransform)(this.ctx));\n\n                const {\n                  viewportScale\n                } = this;\n                const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);\n                const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);\n                this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);\n                const {\n                  canvas,\n                  context\n                } = this.annotationCanvas;\n                this.annotationCanvasMap.set(id, canvas);\n                this.annotationCanvas.savedCtx = this.ctx;\n                this.ctx = context;\n                this.ctx.save();\n                this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n                resetCtxToDefault(this.ctx);\n              } else {\n                resetCtxToDefault(this.ctx);\n                this.ctx.rect(rect[0], rect[1], width, height);\n                this.ctx.clip();\n                this.endPath();\n              }\n            }\n\n            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n            this.transform(...transform);\n            this.transform(...matrix);\n          }\n\n          endAnnotation() {\n            if (this.annotationCanvas) {\n              this.ctx.restore();\n              this.#drawFilter();\n              this.ctx = this.annotationCanvas.savedCtx;\n              delete this.annotationCanvas.savedCtx;\n              delete this.annotationCanvas;\n            }\n          }\n\n          paintImageMaskXObject(img) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const count = img.count;\n            img = this.getObject(img.data, img);\n            img.count = count;\n            const ctx = this.ctx;\n            const glyph = this.processingType3;\n\n            if (glyph) {\n              if (glyph.compiled === undefined) {\n                glyph.compiled = compileType3Glyph(img);\n              }\n\n              if (glyph.compiled) {\n                glyph.compiled(ctx);\n                return;\n              }\n            }\n\n            const mask = this._createMaskCanvas(img);\n\n            const maskCanvas = mask.canvas;\n            ctx.save();\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n            ctx.restore();\n            this.compose();\n          }\n\n          paintImageMaskXObjectRepeat(img, scaleX) {\n            let skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n            let skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n            let scaleY = arguments.length > 4 ? arguments[4] : undefined;\n            let positions = arguments.length > 5 ? arguments[5] : undefined;\n\n            if (!this.contentVisible) {\n              return;\n            }\n\n            img = this.getObject(img.data, img);\n            const ctx = this.ctx;\n            ctx.save();\n            const currentTransform = (0, _display_utils.getCurrentTransform)(ctx);\n            ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n\n            const mask = this._createMaskCanvas(img);\n\n            ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              const trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n\n              const [x, y] = _util.Util.applyTransform([0, 0], trans);\n\n              ctx.drawImage(mask.canvas, x, y);\n            }\n\n            ctx.restore();\n            this.compose();\n          }\n\n          paintImageMaskXObjectGroup(images) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            const fillColor = this.current.fillColor;\n            const isPatternFill = this.current.patternFill;\n\n            for (const image of images) {\n              const {\n                data,\n                width,\n                height,\n                transform\n              } = image;\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              maskCtx.save();\n              const img = this.getObject(data, image);\n              putBinaryImageMask(maskCtx, img);\n              maskCtx.globalCompositeOperation = \"source-in\";\n              maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL) : fillColor;\n              maskCtx.fillRect(0, 0, width, height);\n              maskCtx.restore();\n              ctx.save();\n              ctx.transform(...transform);\n              ctx.scale(1, -1);\n              drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n              ctx.restore();\n            }\n\n            this.compose();\n          }\n\n          paintImageXObject(objId) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = this.getObject(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          }\n\n          paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const imgData = this.getObject(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(\"Dependent image isn't ready yet\");\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const map = [];\n\n            for (let i = 0, ii = positions.length; i < ii; i += 2) {\n              map.push({\n                transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                x: 0,\n                y: 0,\n                w: width,\n                h: height\n              });\n            }\n\n            this.paintInlineImageXObjectGroup(imgData, map);\n          }\n\n          applyTransferMapsToCanvas(ctx) {\n            if (this.current.transferMaps !== \"none\") {\n              ctx.filter = this.current.transferMaps;\n              ctx.drawImage(ctx.canvas, 0, 0);\n              ctx.filter = \"none\";\n            }\n\n            return ctx.canvas;\n          }\n\n          applyTransferMapsToBitmap(imgData) {\n            if (this.current.transferMaps === \"none\") {\n              return imgData.bitmap;\n            }\n\n            const {\n              bitmap,\n              width,\n              height\n            } = imgData;\n            const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n            const tmpCtx = tmpCanvas.context;\n            tmpCtx.filter = this.current.transferMaps;\n            tmpCtx.drawImage(bitmap, 0, 0);\n            tmpCtx.filter = \"none\";\n            return tmpCanvas.canvas;\n          }\n\n          paintInlineImageXObject(imgData) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const width = imgData.width;\n            const height = imgData.height;\n            const ctx = this.ctx;\n            this.save();\n\n            if (!_util.isNodeJS) {\n              const {\n                filter\n              } = ctx;\n\n              if (filter !== \"none\" && filter !== \"\") {\n                ctx.filter = \"none\";\n              }\n            }\n\n            ctx.scale(1 / width, -1 / height);\n            let imgToPaint;\n\n            if (imgData.bitmap) {\n              imgToPaint = this.applyTransferMapsToBitmap(imgData);\n            } else if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n              imgToPaint = imgData;\n            } else {\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData);\n              imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n            }\n\n            const scaled = this._scaleImage(imgToPaint, (0, _display_utils.getCurrentTransformInverse)(ctx));\n\n            ctx.imageSmoothingEnabled = getImageSmoothingEnabled((0, _display_utils.getCurrentTransform)(ctx), imgData.interpolate);\n            drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n            this.compose();\n            this.restore();\n          }\n\n          paintInlineImageXObjectGroup(imgData, map) {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            const ctx = this.ctx;\n            let imgToPaint;\n\n            if (imgData.bitmap) {\n              imgToPaint = imgData.bitmap;\n            } else {\n              const w = imgData.width;\n              const h = imgData.height;\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData);\n              imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n            }\n\n            for (const entry of map) {\n              ctx.save();\n              ctx.transform(...entry.transform);\n              ctx.scale(1, -1);\n              drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n              ctx.restore();\n            }\n\n            this.compose();\n          }\n\n          paintSolidColorImageMask() {\n            if (!this.contentVisible) {\n              return;\n            }\n\n            this.ctx.fillRect(0, 0, 1, 1);\n            this.compose();\n          }\n\n          markPoint(tag) {}\n\n          markPointProps(tag, properties) {}\n\n          beginMarkedContent(tag) {\n            this.markedContentStack.push({\n              visible: true\n            });\n          }\n\n          beginMarkedContentProps(tag, properties) {\n            if (tag === \"OC\") {\n              this.markedContentStack.push({\n                visible: this.optionalContentConfig.isVisible(properties)\n              });\n            } else {\n              this.markedContentStack.push({\n                visible: true\n              });\n            }\n\n            this.contentVisible = this.isContentVisible();\n          }\n\n          endMarkedContent() {\n            this.markedContentStack.pop();\n            this.contentVisible = this.isContentVisible();\n          }\n\n          beginCompat() {}\n\n          endCompat() {}\n\n          consumePath(clipBox) {\n            const isEmpty = this.current.isEmptyClip();\n\n            if (this.pendingClip) {\n              this.current.updateClipFromPath();\n            }\n\n            if (!this.pendingClip) {\n              this.compose(clipBox);\n            }\n\n            const ctx = this.ctx;\n\n            if (this.pendingClip) {\n              if (!isEmpty) {\n                if (this.pendingClip === EO_CLIP) {\n                  ctx.clip(\"evenodd\");\n                } else {\n                  ctx.clip();\n                }\n              }\n\n              this.pendingClip = null;\n            }\n\n            this.current.startNewPathAndClipBox(this.current.clipBox);\n            ctx.beginPath();\n          }\n\n          getSinglePixelWidth() {\n            if (!this._cachedGetSinglePixelWidth) {\n              const m = (0, _display_utils.getCurrentTransform)(this.ctx);\n\n              if (m[1] === 0 && m[2] === 0) {\n                this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n              } else {\n                const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n                const normX = Math.hypot(m[0], m[2]);\n                const normY = Math.hypot(m[1], m[3]);\n                this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n              }\n            }\n\n            return this._cachedGetSinglePixelWidth;\n          }\n\n          getScaleForStroking() {\n            if (this._cachedScaleForStroking[0] === -1) {\n              const {\n                lineWidth\n              } = this.current;\n              const {\n                a,\n                b,\n                c,\n                d\n              } = this.ctx.getTransform();\n              let scaleX, scaleY;\n\n              if (b === 0 && c === 0) {\n                const normX = Math.abs(a);\n                const normY = Math.abs(d);\n\n                if (normX === normY) {\n                  if (lineWidth === 0) {\n                    scaleX = scaleY = 1 / normX;\n                  } else {\n                    const scaledLineWidth = normX * lineWidth;\n                    scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n                  }\n                } else if (lineWidth === 0) {\n                  scaleX = 1 / normX;\n                  scaleY = 1 / normY;\n                } else {\n                  const scaledXLineWidth = normX * lineWidth;\n                  const scaledYLineWidth = normY * lineWidth;\n                  scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n                  scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n                }\n              } else {\n                const absDet = Math.abs(a * d - b * c);\n                const normX = Math.hypot(a, b);\n                const normY = Math.hypot(c, d);\n\n                if (lineWidth === 0) {\n                  scaleX = normY / absDet;\n                  scaleY = normX / absDet;\n                } else {\n                  const baseArea = lineWidth * absDet;\n                  scaleX = normY > baseArea ? normY / baseArea : 1;\n                  scaleY = normX > baseArea ? normX / baseArea : 1;\n                }\n              }\n\n              this._cachedScaleForStroking[0] = scaleX;\n              this._cachedScaleForStroking[1] = scaleY;\n            }\n\n            return this._cachedScaleForStroking;\n          }\n\n          rescaleAndStroke(saveRestore) {\n            const {\n              ctx\n            } = this;\n            const {\n              lineWidth\n            } = this.current;\n            const [scaleX, scaleY] = this.getScaleForStroking();\n            ctx.lineWidth = lineWidth || 1;\n\n            if (scaleX === 1 && scaleY === 1) {\n              ctx.stroke();\n              return;\n            }\n\n            const dashes = ctx.getLineDash();\n\n            if (saveRestore) {\n              ctx.save();\n            }\n\n            ctx.scale(scaleX, scaleY);\n\n            if (dashes.length > 0) {\n              const scale = Math.max(scaleX, scaleY);\n              ctx.setLineDash(dashes.map(x => x / scale));\n              ctx.lineDashOffset /= scale;\n            }\n\n            ctx.stroke();\n\n            if (saveRestore) {\n              ctx.restore();\n            }\n          }\n\n          isContentVisible() {\n            for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n              if (!this.markedContentStack[i].visible) {\n                return false;\n              }\n            }\n\n            return true;\n          }\n\n        }\n\n        exports.CanvasGraphics = CanvasGraphics;\n\n        for (const op in _util.OPS) {\n          if (CanvasGraphics.prototype[op] !== undefined) {\n            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n          }\n        }\n        /***/\n\n      },\n      /* 12 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.TilingPattern = exports.PathType = void 0;\n        exports.getShadingPattern = getShadingPattern;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        const PathType = {\n          FILL: \"Fill\",\n          STROKE: \"Stroke\",\n          SHADING: \"Shading\"\n        };\n        exports.PathType = PathType;\n\n        function applyBoundingBox(ctx, bbox) {\n          if (!bbox) {\n            return;\n          }\n\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const region = new Path2D();\n          region.rect(bbox[0], bbox[1], width, height);\n          ctx.clip(region);\n        }\n\n        class BaseShadingPattern {\n          constructor() {\n            if (this.constructor === BaseShadingPattern) {\n              (0, _util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n            }\n          }\n\n          getPattern() {\n            (0, _util.unreachable)(\"Abstract method `getPattern` called.\");\n          }\n\n        }\n\n        class RadialAxialShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._type = IR[1];\n            this._bbox = IR[2];\n            this._colorStops = IR[3];\n            this._p0 = IR[4];\n            this._p1 = IR[5];\n            this._r0 = IR[6];\n            this._r1 = IR[7];\n            this.matrix = null;\n          }\n\n          _createGradient(ctx) {\n            let grad;\n\n            if (this._type === \"axial\") {\n              grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n            } else if (this._type === \"radial\") {\n              grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n            }\n\n            for (const colorStop of this._colorStops) {\n              grad.addColorStop(colorStop[0], colorStop[1]);\n            }\n\n            return grad;\n          }\n\n          getPattern(ctx, owner, inverse, pathType) {\n            let pattern;\n\n            if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n              const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, (0, _display_utils.getCurrentTransform)(ctx)) || [0, 0, 0, 0];\n              const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n              const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n              const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", width, height, true);\n              const tmpCtx = tmpCanvas.context;\n              tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n              tmpCtx.beginPath();\n              tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n              tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n              inverse = _util.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);\n              tmpCtx.transform(...owner.baseTransform);\n\n              if (this.matrix) {\n                tmpCtx.transform(...this.matrix);\n              }\n\n              applyBoundingBox(tmpCtx, this._bbox);\n              tmpCtx.fillStyle = this._createGradient(tmpCtx);\n              tmpCtx.fill();\n              pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n              const domMatrix = new DOMMatrix(inverse);\n              pattern.setTransform(domMatrix);\n            } else {\n              applyBoundingBox(ctx, this._bbox);\n              pattern = this._createGradient(ctx);\n            }\n\n            return pattern;\n          }\n\n        }\n\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n          const coords = context.coords,\n                colors = context.colors;\n          const bytes = data.data,\n                rowSize = data.width * 4;\n          let tmp;\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          if (coords[p2 + 1] > coords[p3 + 1]) {\n            tmp = p2;\n            p2 = p3;\n            p3 = tmp;\n            tmp = c2;\n            c2 = c3;\n            c3 = tmp;\n          }\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n          const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n          const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n          const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n          const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n          const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n          if (y1 >= y3) {\n            return;\n          }\n\n          const c1r = colors[c1],\n                c1g = colors[c1 + 1],\n                c1b = colors[c1 + 2];\n          const c2r = colors[c2],\n                c2g = colors[c2 + 1],\n                c2b = colors[c2 + 2];\n          const c3r = colors[c3],\n                c3g = colors[c3 + 1],\n                c3b = colors[c3 + 2];\n          const minY = Math.round(y1),\n                maxY = Math.round(y3);\n          let xa, car, cag, cab;\n          let xb, cbr, cbg, cbb;\n\n          for (let y = minY; y <= maxY; y++) {\n            if (y < y2) {\n              const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\n              xa = x1 - (x1 - x2) * k;\n              car = c1r - (c1r - c2r) * k;\n              cag = c1g - (c1g - c2g) * k;\n              cab = c1b - (c1b - c2b) * k;\n            } else {\n              let k;\n\n              if (y > y3) {\n                k = 1;\n              } else if (y2 === y3) {\n                k = 0;\n              } else {\n                k = (y2 - y) / (y2 - y3);\n              }\n\n              xa = x2 - (x2 - x3) * k;\n              car = c2r - (c2r - c3r) * k;\n              cag = c2g - (c2g - c3g) * k;\n              cab = c2b - (c2b - c3b) * k;\n            }\n\n            let k;\n\n            if (y < y1) {\n              k = 0;\n            } else if (y > y3) {\n              k = 1;\n            } else {\n              k = (y1 - y) / (y1 - y3);\n            }\n\n            xb = x1 - (x1 - x3) * k;\n            cbr = c1r - (c1r - c3r) * k;\n            cbg = c1g - (c1g - c3g) * k;\n            cbb = c1b - (c1b - c3b) * k;\n            const x1_ = Math.round(Math.min(xa, xb));\n            const x2_ = Math.round(Math.max(xa, xb));\n            let j = rowSize * y + x1_ * 4;\n\n            for (let x = x1_; x <= x2_; x++) {\n              k = (xa - x) / (xa - xb);\n\n              if (k < 0) {\n                k = 0;\n              } else if (k > 1) {\n                k = 1;\n              }\n\n              bytes[j++] = car - (car - cbr) * k | 0;\n              bytes[j++] = cag - (cag - cbg) * k | 0;\n              bytes[j++] = cab - (cab - cbb) * k | 0;\n              bytes[j++] = 255;\n            }\n          }\n        }\n\n        function drawFigure(data, figure, context) {\n          const ps = figure.coords;\n          const cs = figure.colors;\n          let i, ii;\n\n          switch (figure.type) {\n            case \"lattice\":\n              const verticesPerRow = figure.verticesPerRow;\n              const rows = Math.floor(ps.length / verticesPerRow) - 1;\n              const cols = verticesPerRow - 1;\n\n              for (i = 0; i < rows; i++) {\n                let q = i * verticesPerRow;\n\n                for (let j = 0; j < cols; j++, q++) {\n                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                }\n              }\n\n              break;\n\n            case \"triangles\":\n              for (i = 0, ii = ps.length; i < ii; i += 3) {\n                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n              }\n\n              break;\n\n            default:\n              throw new Error(\"illegal figure\");\n          }\n        }\n\n        class MeshShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._coords = IR[2];\n            this._colors = IR[3];\n            this._figures = IR[4];\n            this._bounds = IR[5];\n            this._bbox = IR[7];\n            this._background = IR[8];\n            this.matrix = null;\n          }\n\n          _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n            const EXPECTED_SCALE = 1.1;\n            const MAX_PATTERN_SIZE = 3000;\n            const BORDER_SIZE = 2;\n            const offsetX = Math.floor(this._bounds[0]);\n            const offsetY = Math.floor(this._bounds[1]);\n            const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n            const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const scaleX = boundsWidth / width;\n            const scaleY = boundsHeight / height;\n            const context = {\n              coords: this._coords,\n              colors: this._colors,\n              offsetX: -offsetX,\n              offsetY: -offsetY,\n              scaleX: 1 / scaleX,\n              scaleY: 1 / scaleY\n            };\n            const paddedWidth = width + BORDER_SIZE * 2;\n            const paddedHeight = height + BORDER_SIZE * 2;\n            const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n            const tmpCtx = tmpCanvas.context;\n            const data = tmpCtx.createImageData(width, height);\n\n            if (backgroundColor) {\n              const bytes = data.data;\n\n              for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n                bytes[i] = backgroundColor[0];\n                bytes[i + 1] = backgroundColor[1];\n                bytes[i + 2] = backgroundColor[2];\n                bytes[i + 3] = 255;\n              }\n            }\n\n            for (const figure of this._figures) {\n              drawFigure(data, figure, context);\n            }\n\n            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n            const canvas = tmpCanvas.canvas;\n            return {\n              canvas,\n              offsetX: offsetX - BORDER_SIZE * scaleX,\n              offsetY: offsetY - BORDER_SIZE * scaleY,\n              scaleX,\n              scaleY\n            };\n          }\n\n          getPattern(ctx, owner, inverse, pathType) {\n            applyBoundingBox(ctx, this._bbox);\n            let scale;\n\n            if (pathType === PathType.SHADING) {\n              scale = _util.Util.singularValueDecompose2dScale((0, _display_utils.getCurrentTransform)(ctx));\n            } else {\n              scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n              if (this.matrix) {\n                const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n                scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n              }\n            }\n\n            const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);\n\n            if (pathType !== PathType.SHADING) {\n              ctx.setTransform(...owner.baseTransform);\n\n              if (this.matrix) {\n                ctx.transform(...this.matrix);\n              }\n            }\n\n            ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n            return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n          }\n\n        }\n\n        class DummyShadingPattern extends BaseShadingPattern {\n          getPattern() {\n            return \"hotpink\";\n          }\n\n        }\n\n        function getShadingPattern(IR) {\n          switch (IR[0]) {\n            case \"RadialAxial\":\n              return new RadialAxialShadingPattern(IR);\n\n            case \"Mesh\":\n              return new MeshShadingPattern(IR);\n\n            case \"Dummy\":\n              return new DummyShadingPattern();\n          }\n\n          throw new Error(`Unknown IR type: ${IR[0]}`);\n        }\n\n        const PaintType = {\n          COLORED: 1,\n          UNCOLORED: 2\n        };\n\n        class TilingPattern {\n          static MAX_PATTERN_SIZE = 3000;\n\n          constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n            this.operatorList = IR[2];\n            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n            this.bbox = IR[4];\n            this.xstep = IR[5];\n            this.ystep = IR[6];\n            this.paintType = IR[7];\n            this.tilingType = IR[8];\n            this.color = color;\n            this.ctx = ctx;\n            this.canvasGraphicsFactory = canvasGraphicsFactory;\n            this.baseTransform = baseTransform;\n          }\n\n          createPatternCanvas(owner) {\n            const operatorList = this.operatorList;\n            const bbox = this.bbox;\n            const xstep = this.xstep;\n            const ystep = this.ystep;\n            const paintType = this.paintType;\n            const tilingType = this.tilingType;\n            const color = this.color;\n            const canvasGraphicsFactory = this.canvasGraphicsFactory;\n            (0, _util.info)(\"TilingType: \" + tilingType);\n            const x0 = bbox[0],\n                  y0 = bbox[1],\n                  x1 = bbox[2],\n                  y1 = bbox[3];\n\n            const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n            const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n            const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n            const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n            const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n            const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n            const tmpCtx = tmpCanvas.context;\n            const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n            graphics.groupLevel = owner.groupLevel;\n            this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n            let adjustedX0 = x0;\n            let adjustedY0 = y0;\n            let adjustedX1 = x1;\n            let adjustedY1 = y1;\n\n            if (x0 < 0) {\n              adjustedX0 = 0;\n              adjustedX1 += Math.abs(x0);\n            }\n\n            if (y0 < 0) {\n              adjustedY0 = 0;\n              adjustedY1 += Math.abs(y0);\n            }\n\n            tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n            tmpCtx.save();\n            this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n            graphics.baseTransform = (0, _display_utils.getCurrentTransform)(graphics.ctx);\n            graphics.executeOperatorList(operatorList);\n            graphics.endDrawing();\n            return {\n              canvas: tmpCanvas.canvas,\n              scaleX: dimx.scale,\n              scaleY: dimy.scale,\n              offsetX: adjustedX0,\n              offsetY: adjustedY0\n            };\n          }\n\n          getSizeAndScale(step, realOutputSize, scale) {\n            step = Math.abs(step);\n            const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n            let size = Math.ceil(step * scale);\n\n            if (size >= maxSize) {\n              size = maxSize;\n            } else {\n              scale = size / step;\n            }\n\n            return {\n              scale,\n              size\n            };\n          }\n\n          clipBbox(graphics, x0, y0, x1, y1) {\n            const bboxWidth = x1 - x0;\n            const bboxHeight = y1 - y0;\n            graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n            graphics.current.updateRectMinMax((0, _display_utils.getCurrentTransform)(graphics.ctx), [x0, y0, x1, y1]);\n            graphics.clip();\n            graphics.endPath();\n          }\n\n          setFillAndStrokeStyleToContext(graphics, paintType, color) {\n            const context = graphics.ctx,\n                  current = graphics.current;\n\n            switch (paintType) {\n              case PaintType.COLORED:\n                const ctx = this.ctx;\n                context.fillStyle = ctx.fillStyle;\n                context.strokeStyle = ctx.strokeStyle;\n                current.fillColor = ctx.fillStyle;\n                current.strokeColor = ctx.strokeStyle;\n                break;\n\n              case PaintType.UNCOLORED:\n                const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n                context.fillStyle = cssColor;\n                context.strokeStyle = cssColor;\n                current.fillColor = cssColor;\n                current.strokeColor = cssColor;\n                break;\n\n              default:\n                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n            }\n          }\n\n          getPattern(ctx, owner, inverse, pathType) {\n            let matrix = inverse;\n\n            if (pathType !== PathType.SHADING) {\n              matrix = _util.Util.transform(matrix, owner.baseTransform);\n\n              if (this.matrix) {\n                matrix = _util.Util.transform(matrix, this.matrix);\n              }\n            }\n\n            const temporaryPatternCanvas = this.createPatternCanvas(owner);\n            let domMatrix = new DOMMatrix(matrix);\n            domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n            const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n            pattern.setTransform(domMatrix);\n            return pattern;\n          }\n\n        }\n\n        exports.TilingPattern = TilingPattern;\n        /***/\n      },\n      /* 13 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.convertBlackAndWhiteToRGBA = convertBlackAndWhiteToRGBA;\n        exports.convertToRGBA = convertToRGBA;\n        exports.grayToRGBA = grayToRGBA;\n\n        var _util = __w_pdfjs_require__(1);\n\n        function convertToRGBA(params) {\n          switch (params.kind) {\n            case _util.ImageKind.GRAYSCALE_1BPP:\n              return convertBlackAndWhiteToRGBA(params);\n\n            case _util.ImageKind.RGB_24BPP:\n              return convertRGBToRGBA(params);\n          }\n\n          return null;\n        }\n\n        function convertBlackAndWhiteToRGBA(_ref32) {\n          let {\n            src,\n            srcPos = 0,\n            dest,\n            width,\n            height,\n            nonBlackColor = 0xffffffff,\n            inverseDecode = false\n          } = _ref32;\n          const black = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n          const [zeroMapping, oneMapping] = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor];\n          const widthInSource = width >> 3;\n          const widthRemainder = width & 7;\n          const srcLength = src.length;\n          dest = new Uint32Array(dest.buffer);\n          let destPos = 0;\n\n          for (let i = 0; i < height; i++) {\n            for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\n              const elem = srcPos < srcLength ? src[srcPos] : 255;\n              dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\n              dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\n            }\n\n            if (widthRemainder === 0) {\n              continue;\n            }\n\n            const elem = srcPos < srcLength ? src[srcPos++] : 255;\n\n            for (let j = 0; j < widthRemainder; j++) {\n              dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;\n            }\n          }\n\n          return {\n            srcPos,\n            destPos\n          };\n        }\n\n        function convertRGBToRGBA(_ref33) {\n          let {\n            src,\n            srcPos = 0,\n            dest,\n            destPos = 0,\n            width,\n            height\n          } = _ref33;\n          let i = 0;\n          const len32 = src.length >> 2;\n          const src32 = new Uint32Array(src.buffer, srcPos, len32);\n\n          if (_util.FeatureTest.isLittleEndian) {\n            for (; i < len32 - 2; i += 3, destPos += 4) {\n              const s1 = src32[i];\n              const s2 = src32[i + 1];\n              const s3 = src32[i + 2];\n              dest[destPos] = s1 | 0xff000000;\n              dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 0xff000000;\n              dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 0xff000000;\n              dest[destPos + 3] = s3 >>> 8 | 0xff000000;\n            }\n\n            for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n              dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 0xff000000;\n            }\n          } else {\n            for (; i < len32 - 2; i += 3, destPos += 4) {\n              const s1 = src32[i];\n              const s2 = src32[i + 1];\n              const s3 = src32[i + 2];\n              dest[destPos] = s1 | 0xff;\n              dest[destPos + 1] = s1 << 24 | s2 >>> 8 | 0xff;\n              dest[destPos + 2] = s2 << 16 | s3 >>> 16 | 0xff;\n              dest[destPos + 3] = s3 << 8 | 0xff;\n            }\n\n            for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n              dest[destPos++] = src[j] << 24 | src[j + 1] << 16 | src[j + 2] << 8 | 0xff;\n            }\n          }\n\n          return {\n            srcPos,\n            destPos\n          };\n        }\n\n        function grayToRGBA(src, dest) {\n          if (_util.FeatureTest.isLittleEndian) {\n            for (let i = 0, ii = src.length; i < ii; i++) {\n              dest[i] = src[i] * 0x10101 | 0xff000000;\n            }\n          } else {\n            for (let i = 0, ii = src.length; i < ii; i++) {\n              dest[i] = src[i] * 0x1010100 | 0x000000ff;\n            }\n          }\n        }\n        /***/\n\n      },\n      /* 14 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlobalWorkerOptions = void 0;\n        const GlobalWorkerOptions = Object.create(null);\n        exports.GlobalWorkerOptions = GlobalWorkerOptions;\n        GlobalWorkerOptions.workerPort = null;\n        GlobalWorkerOptions.workerSrc = \"\";\n        /***/\n      },\n      /* 15 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        const CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        const StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n\n        function wrapReason(reason) {\n          if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n            (0, _util.unreachable)('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n          }\n\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n\n            case \"PasswordException\":\n              return new _util.PasswordException(reason.message, reason.code);\n\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n\n        class MessageHandler {\n          constructor(sourceName, targetName, comObj) {\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n\n            this._onComObjOnMessage = event => {\n              const data = event.data;\n\n              if (data.targetName !== this.sourceName) {\n                return;\n              }\n\n              if (data.stream) {\n                this.#processStreamMessage(data);\n                return;\n              }\n\n              if (data.callback) {\n                const callbackId = data.callbackId;\n                const capability = this.callbackCapabilities[callbackId];\n\n                if (!capability) {\n                  throw new Error(`Cannot resolve callback ${callbackId}`);\n                }\n\n                delete this.callbackCapabilities[callbackId];\n\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n\n                return;\n              }\n\n              const action = this.actionHandler[data.action];\n\n              if (!action) {\n                throw new Error(`Unknown action from worker: ${data.action}`);\n              }\n\n              if (data.callbackId) {\n                const cbSourceName = this.sourceName;\n                const cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n\n              if (data.streamId) {\n                this.#createStreamSink(data);\n                return;\n              }\n\n              action(data.data);\n            };\n\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n          on(actionName, handler) {\n            const ah = this.actionHandler;\n\n            if (ah[actionName]) {\n              throw new Error(`There is already an actionName called \"${actionName}\"`);\n            }\n\n            ah[actionName] = handler;\n          }\n\n          send(actionName, data, transfers) {\n            this.comObj.postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              data\n            }, transfers);\n          }\n\n          sendWithPromise(actionName, data, transfers) {\n            const callbackId = this.callbackId++;\n            const capability = new _util.PromiseCapability();\n            this.callbackCapabilities[callbackId] = capability;\n\n            try {\n              this.comObj.postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                callbackId,\n                data\n              }, transfers);\n            } catch (ex) {\n              capability.reject(ex);\n            }\n\n            return capability.promise;\n          }\n\n          sendWithStream(actionName, data, queueingStrategy, transfers) {\n            const streamId = this.streamId++,\n                  sourceName = this.sourceName,\n                  targetName = this.targetName,\n                  comObj = this.comObj;\n            return new ReadableStream({\n              start: controller => {\n                const startCapability = new _util.PromiseCapability();\n                this.streamControllers[streamId] = {\n                  controller,\n                  startCall: startCapability,\n                  pullCall: null,\n                  cancelCall: null,\n                  isClosed: false\n                };\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  action: actionName,\n                  streamId,\n                  data,\n                  desiredSize: controller.desiredSize\n                }, transfers);\n                return startCapability.promise;\n              },\n              pull: controller => {\n                const pullCapability = new _util.PromiseCapability();\n                this.streamControllers[streamId].pullCall = pullCapability;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL,\n                  streamId,\n                  desiredSize: controller.desiredSize\n                });\n                return pullCapability.promise;\n              },\n              cancel: reason => {\n                (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                const cancelCapability = new _util.PromiseCapability();\n                this.streamControllers[streamId].cancelCall = cancelCapability;\n                this.streamControllers[streamId].isClosed = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n                return cancelCapability.promise;\n              }\n            }, queueingStrategy);\n          }\n\n          #createStreamSink(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const self = this,\n                  action = this.actionHandler[data.action];\n            const streamSink = {\n              enqueue(chunk) {\n                let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                let transfers = arguments.length > 2 ? arguments[2] : undefined;\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                const lastDesiredSize = this.desiredSize;\n                this.desiredSize -= size;\n\n                if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                  this.sinkCapability = new _util.PromiseCapability();\n                  this.ready = this.sinkCapability.promise;\n                }\n\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ENQUEUE,\n                  streamId,\n                  chunk\n                }, transfers);\n              },\n\n              close() {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CLOSE,\n                  streamId\n                });\n                delete self.streamSinks[streamId];\n              },\n\n              error(reason) {\n                (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ERROR,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              },\n\n              sinkCapability: new _util.PromiseCapability(),\n              onPull: null,\n              onCancel: null,\n              isCancelled: false,\n              desiredSize: data.desiredSize,\n              ready: null\n            };\n            streamSink.sinkCapability.resolve();\n            streamSink.ready = streamSink.sinkCapability.promise;\n            this.streamSinks[streamId] = streamSink;\n            new Promise(function (resolve) {\n              resolve(action(data.data, streamSink));\n            }).then(function () {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                success: true\n              });\n            }, function (reason) {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            });\n          }\n\n          #processStreamMessage(data) {\n            const streamId = data.streamId,\n                  sourceName = this.sourceName,\n                  targetName = data.sourceName,\n                  comObj = this.comObj;\n            const streamController = this.streamControllers[streamId],\n                  streamSink = this.streamSinks[streamId];\n\n            switch (data.stream) {\n              case StreamKind.START_COMPLETE:\n                if (data.success) {\n                  streamController.startCall.resolve();\n                } else {\n                  streamController.startCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL_COMPLETE:\n                if (data.success) {\n                  streamController.pullCall.resolve();\n                } else {\n                  streamController.pullCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL:\n                if (!streamSink) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                  break;\n                }\n\n                if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n                  streamSink.sinkCapability.resolve();\n                }\n\n                streamSink.desiredSize = data.desiredSize;\n                new Promise(function (resolve) {\n                  resolve(streamSink.onPull?.());\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                break;\n\n              case StreamKind.ENQUEUE:\n                (0, _util.assert)(streamController, \"enqueue should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.controller.enqueue(data.chunk);\n                break;\n\n              case StreamKind.CLOSE:\n                (0, _util.assert)(streamController, \"close should have stream controller\");\n\n                if (streamController.isClosed) {\n                  break;\n                }\n\n                streamController.isClosed = true;\n                streamController.controller.close();\n                this.#deleteStreamController(streamController, streamId);\n                break;\n\n              case StreamKind.ERROR:\n                (0, _util.assert)(streamController, \"error should have stream controller\");\n                streamController.controller.error(wrapReason(data.reason));\n                this.#deleteStreamController(streamController, streamId);\n                break;\n\n              case StreamKind.CANCEL_COMPLETE:\n                if (data.success) {\n                  streamController.cancelCall.resolve();\n                } else {\n                  streamController.cancelCall.reject(wrapReason(data.reason));\n                }\n\n                this.#deleteStreamController(streamController, streamId);\n                break;\n\n              case StreamKind.CANCEL:\n                if (!streamSink) {\n                  break;\n                }\n\n                new Promise(function (resolve) {\n                  resolve(streamSink.onCancel?.(wrapReason(data.reason)));\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                streamSink.sinkCapability.reject(wrapReason(data.reason));\n                streamSink.isCancelled = true;\n                delete this.streamSinks[streamId];\n                break;\n\n              default:\n                throw new Error(\"Unexpected stream case\");\n            }\n          }\n\n          async #deleteStreamController(streamController, streamId) {\n            await Promise.allSettled([streamController.startCall?.promise, streamController.pullCall?.promise, streamController.cancelCall?.promise]);\n            delete this.streamControllers[streamId];\n          }\n\n          destroy() {\n            this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n        }\n\n        exports.MessageHandler = MessageHandler;\n        /***/\n      },\n      /* 16 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Metadata = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        class Metadata {\n          #metadataMap;\n          #data;\n\n          constructor(_ref34) {\n            let {\n              parsedData,\n              rawData\n            } = _ref34;\n            this.#metadataMap = parsedData;\n            this.#data = rawData;\n          }\n\n          getRaw() {\n            return this.#data;\n          }\n\n          get(name) {\n            return this.#metadataMap.get(name) ?? null;\n          }\n\n          getAll() {\n            return (0, _util.objectFromMap)(this.#metadataMap);\n          }\n\n          has(name) {\n            return this.#metadataMap.has(name);\n          }\n\n        }\n\n        exports.Metadata = Metadata;\n        /***/\n      },\n      /* 17 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OptionalContentConfig = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _murmurhash = __w_pdfjs_require__(8);\n\n        const INTERNAL = Symbol(\"INTERNAL\");\n\n        class OptionalContentGroup {\n          #visible = true;\n\n          constructor(name, intent) {\n            this.name = name;\n            this.intent = intent;\n          }\n\n          get visible() {\n            return this.#visible;\n          }\n\n          _setVisible(internal, visible) {\n            if (internal !== INTERNAL) {\n              (0, _util.unreachable)(\"Internal method `_setVisible` called.\");\n            }\n\n            this.#visible = visible;\n          }\n\n        }\n\n        class OptionalContentConfig {\n          #cachedGetHash = null;\n          #groups = new Map();\n          #initialHash = null;\n          #order = null;\n\n          constructor(data) {\n            this.name = null;\n            this.creator = null;\n\n            if (data === null) {\n              return;\n            }\n\n            this.name = data.name;\n            this.creator = data.creator;\n            this.#order = data.order;\n\n            for (const group of data.groups) {\n              this.#groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n            }\n\n            if (data.baseState === \"OFF\") {\n              for (const group of this.#groups.values()) {\n                group._setVisible(INTERNAL, false);\n              }\n            }\n\n            for (const on of data.on) {\n              this.#groups.get(on)._setVisible(INTERNAL, true);\n            }\n\n            for (const off of data.off) {\n              this.#groups.get(off)._setVisible(INTERNAL, false);\n            }\n\n            this.#initialHash = this.getHash();\n          }\n\n          #evaluateVisibilityExpression(array) {\n            const length = array.length;\n\n            if (length < 2) {\n              return true;\n            }\n\n            const operator = array[0];\n\n            for (let i = 1; i < length; i++) {\n              const element = array[i];\n              let state;\n\n              if (Array.isArray(element)) {\n                state = this.#evaluateVisibilityExpression(element);\n              } else if (this.#groups.has(element)) {\n                state = this.#groups.get(element).visible;\n              } else {\n                (0, _util.warn)(`Optional content group not found: ${element}`);\n                return true;\n              }\n\n              switch (operator) {\n                case \"And\":\n                  if (!state) {\n                    return false;\n                  }\n\n                  break;\n\n                case \"Or\":\n                  if (state) {\n                    return true;\n                  }\n\n                  break;\n\n                case \"Not\":\n                  return !state;\n\n                default:\n                  return true;\n              }\n            }\n\n            return operator === \"And\";\n          }\n\n          isVisible(group) {\n            if (this.#groups.size === 0) {\n              return true;\n            }\n\n            if (!group) {\n              (0, _util.warn)(\"Optional content group not defined.\");\n              return true;\n            }\n\n            if (group.type === \"OCG\") {\n              if (!this.#groups.has(group.id)) {\n                (0, _util.warn)(`Optional content group not found: ${group.id}`);\n                return true;\n              }\n\n              return this.#groups.get(group.id).visible;\n            } else if (group.type === \"OCMD\") {\n              if (group.expression) {\n                return this.#evaluateVisibilityExpression(group.expression);\n              }\n\n              if (!group.policy || group.policy === \"AnyOn\") {\n                for (const id of group.ids) {\n                  if (!this.#groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this.#groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOn\") {\n                for (const id of group.ids) {\n                  if (!this.#groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this.#groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              } else if (group.policy === \"AnyOff\") {\n                for (const id of group.ids) {\n                  if (!this.#groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this.#groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOff\") {\n                for (const id of group.ids) {\n                  if (!this.#groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this.#groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n\n              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown group type ${group.type}.`);\n            return true;\n          }\n\n          setVisibility(id) {\n            let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!this.#groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return;\n            }\n\n            this.#groups.get(id)._setVisible(INTERNAL, !!visible);\n\n            this.#cachedGetHash = null;\n          }\n\n          get hasInitialVisibility() {\n            return this.#initialHash === null || this.getHash() === this.#initialHash;\n          }\n\n          getOrder() {\n            if (!this.#groups.size) {\n              return null;\n            }\n\n            if (this.#order) {\n              return this.#order.slice();\n            }\n\n            return [...this.#groups.keys()];\n          }\n\n          getGroups() {\n            return this.#groups.size > 0 ? (0, _util.objectFromMap)(this.#groups) : null;\n          }\n\n          getGroup(id) {\n            return this.#groups.get(id) || null;\n          }\n\n          getHash() {\n            if (this.#cachedGetHash !== null) {\n              return this.#cachedGetHash;\n            }\n\n            const hash = new _murmurhash.MurmurHash3_64();\n\n            for (const [id, group] of this.#groups) {\n              hash.update(`${id}:${group.visible}`);\n            }\n\n            return this.#cachedGetHash = hash.hexdigest();\n          }\n\n        }\n\n        exports.OptionalContentConfig = OptionalContentConfig;\n        /***/\n      },\n      /* 18 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFDataTransportStream = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        class PDFDataTransportStream {\n          constructor(_ref35, pdfDataRangeTransport) {\n            let {\n              length,\n              initialData,\n              progressiveDone = false,\n              contentDispositionFilename = null,\n              disableRange = false,\n              disableStream = false\n            } = _ref35;\n            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n            this._queuedChunks = [];\n            this._progressiveDone = progressiveDone;\n            this._contentDispositionFilename = contentDispositionFilename;\n\n            if (initialData?.length > 0) {\n              const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;\n\n              this._queuedChunks.push(buffer);\n            }\n\n            this._pdfDataRangeTransport = pdfDataRangeTransport;\n            this._isStreamingSupported = !disableStream;\n            this._isRangeSupported = !disableRange;\n            this._contentLength = length;\n            this._fullRequestReader = null;\n            this._rangeReaders = [];\n\n            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n              this._onReceiveData({\n                begin,\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n              this._onProgress({\n                loaded,\n                total\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n              this._onReceiveData({\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n              this._onProgressiveDone();\n            });\n\n            this._pdfDataRangeTransport.transportReady();\n          }\n\n          _onReceiveData(_ref36) {\n            let {\n              begin,\n              chunk\n            } = _ref36;\n            const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;\n\n            if (begin === undefined) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader._enqueue(buffer);\n              } else {\n                this._queuedChunks.push(buffer);\n              }\n            } else {\n              const found = this._rangeReaders.some(function (rangeReader) {\n                if (rangeReader._begin !== begin) {\n                  return false;\n                }\n\n                rangeReader._enqueue(buffer);\n\n                return true;\n              });\n\n              (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n            }\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          _onProgress(evt) {\n            if (evt.total === undefined) {\n              this._rangeReaders[0]?.onProgress?.({\n                loaded: evt.loaded\n              });\n            } else {\n              this._fullRequestReader?.onProgress?.({\n                loaded: evt.loaded,\n                total: evt.total\n              });\n            }\n          }\n\n          _onProgressiveDone() {\n            this._fullRequestReader?.progressiveDone();\n            this._progressiveDone = true;\n          }\n\n          _removeRangeReader(reader) {\n            const i = this._rangeReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n            const queuedChunks = this._queuedChunks;\n            this._queuedChunks = null;\n            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n            this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n            this._rangeReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n\n            this._pdfDataRangeTransport.abort();\n          }\n\n        }\n\n        exports.PDFDataTransportStream = PDFDataTransportStream;\n\n        class PDFDataTransportStreamReader {\n          constructor(stream, queuedChunks) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this._stream = stream;\n            this._done = progressiveDone || false;\n            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n            this._queuedChunks = queuedChunks || [];\n            this._loaded = 0;\n\n            for (const chunk of this._queuedChunks) {\n              this._loaded += chunk.byteLength;\n            }\n\n            this._requests = [];\n            this._headersReady = Promise.resolve();\n            stream._fullRequestReader = this;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunks.push(chunk);\n            }\n\n            this._loaded += chunk.byteLength;\n          }\n\n          get headersReady() {\n            return this._headersReady;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._stream._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._stream._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._stream._contentLength;\n          }\n\n          async read() {\n            if (this._queuedChunks.length > 0) {\n              const chunk = this._queuedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = new _util.PromiseCapability();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          progressiveDone() {\n            if (this._done) {\n              return;\n            }\n\n            this._done = true;\n          }\n\n        }\n\n        class PDFDataTransportStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._begin = begin;\n            this._end = end;\n            this._queuedChunk = null;\n            this._requests = [];\n            this._done = false;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length === 0) {\n              this._queuedChunk = chunk;\n            } else {\n              const requestsCapability = this._requests.shift();\n\n              requestsCapability.resolve({\n                value: chunk,\n                done: false\n              });\n\n              for (const requestCapability of this._requests) {\n                requestCapability.resolve({\n                  value: undefined,\n                  done: true\n                });\n              }\n\n              this._requests.length = 0;\n            }\n\n            this._done = true;\n\n            this._stream._removeRangeReader(this);\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = new _util.PromiseCapability();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._stream._removeRangeReader(this);\n          }\n\n        }\n        /***/\n\n      },\n      /* 19 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFFetchStream = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _network_utils = __w_pdfjs_require__(20);\n\n        ;\n\n        function createFetchOptions(headers, withCredentials, abortController) {\n          return {\n            method: \"GET\",\n            headers,\n            signal: abortController.signal,\n            mode: \"cors\",\n            credentials: withCredentials ? \"include\" : \"same-origin\",\n            redirect: \"follow\"\n          };\n        }\n\n        function createHeaders(httpHeaders) {\n          const headers = new Headers();\n\n          for (const property in httpHeaders) {\n            const value = httpHeaders[property];\n\n            if (value === undefined) {\n              continue;\n            }\n\n            headers.append(property, value);\n          }\n\n          return headers;\n        }\n\n        function getArrayBuffer(val) {\n          if (val instanceof Uint8Array) {\n            return val.buffer;\n          }\n\n          if (val instanceof ArrayBuffer) {\n            return val;\n          }\n\n          (0, _util.warn)(`getArrayBuffer - unexpected data format: ${val}`);\n          return new Uint8Array(val).buffer;\n        }\n\n        class PDFFetchStream {\n          constructor(source) {\n            this.source = source;\n            this.isHttp = /^https?:/i.test(source.url);\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFFetchStreamReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFFetchStream = PDFFetchStream;\n\n        class PDFFetchStreamReader {\n          constructor(stream) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            this._filename = null;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._contentLength = source.length;\n            this._headersCapability = new _util.PromiseCapability();\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._abortController = new AbortController();\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._headers = createHeaders(this._stream.httpHeaders);\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._reader = response.body.getReader();\n\n              this._headersCapability.resolve();\n\n              const getResponseHeader = name => {\n                return response.headers.get(name);\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: this._stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n              if (!this._isStreamingSupported && this._isRangeSupported) {\n                this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n              }\n            }).catch(this._headersCapability.reject);\n            this.onProgress = null;\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._headersCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n            this.onProgress?.({\n              loaded: this._loaded,\n              total: this._contentLength\n            });\n            return {\n              value: getArrayBuffer(value),\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            this._reader?.cancel(reason);\n\n            this._abortController.abort();\n          }\n\n        }\n\n        class PDFFetchStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._readCapability = new _util.PromiseCapability();\n            this._isStreamingSupported = !source.disableStream;\n            this._abortController = new AbortController();\n            this._headers = createHeaders(this._stream.httpHeaders);\n\n            this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._readCapability.resolve();\n\n              this._reader = response.body.getReader();\n            }).catch(this._readCapability.reject);\n            this.onProgress = null;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n            this.onProgress?.({\n              loaded: this._loaded\n            });\n            return {\n              value: getArrayBuffer(value),\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            this._reader?.cancel(reason);\n\n            this._abortController.abort();\n          }\n\n        }\n        /***/\n\n      },\n      /* 20 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createResponseStatusError = createResponseStatusError;\n        exports.extractFilenameFromHeader = extractFilenameFromHeader;\n        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n        exports.validateResponseStatus = validateResponseStatus;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _content_disposition = __w_pdfjs_require__(21);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        function validateRangeRequestCapabilities(_ref37) {\n          let {\n            getResponseHeader,\n            isHttp,\n            rangeChunkSize,\n            disableRange\n          } = _ref37;\n          const returnValues = {\n            allowRangeRequests: false,\n            suggestedLength: undefined\n          };\n          const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n          if (!Number.isInteger(length)) {\n            return returnValues;\n          }\n\n          returnValues.suggestedLength = length;\n\n          if (length <= 2 * rangeChunkSize) {\n            return returnValues;\n          }\n\n          if (disableRange || !isHttp) {\n            return returnValues;\n          }\n\n          if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n            return returnValues;\n          }\n\n          const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n          if (contentEncoding !== \"identity\") {\n            return returnValues;\n          }\n\n          returnValues.allowRangeRequests = true;\n          return returnValues;\n        }\n\n        function extractFilenameFromHeader(getResponseHeader) {\n          const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n          if (contentDisposition) {\n            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n            if (filename.includes(\"%\")) {\n              try {\n                filename = decodeURIComponent(filename);\n              } catch {}\n            }\n\n            if ((0, _display_utils.isPdfFile)(filename)) {\n              return filename;\n            }\n          }\n\n          return null;\n        }\n\n        function createResponseStatusError(status, url) {\n          if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n            return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n          }\n\n          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n\n        function validateResponseStatus(status) {\n          return status === 200 || status === 206;\n        }\n        /***/\n\n      },\n      /* 21 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n        var _util = __w_pdfjs_require__(1);\n\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n          let needsEncodingFixup = true;\n          let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = unescape(filename);\n            filename = rfc5987decode(filename);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          tmp = rfc2231getparam(contentDisposition);\n\n          if (tmp) {\n            const filename = rfc2047decode(tmp);\n            return fixupEncoding(filename);\n          }\n\n          tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          function toParamRegExp(attributePattern, flags) {\n            return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n          }\n\n          function textdecode(encoding, value) {\n            if (encoding) {\n              if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                return value;\n              }\n\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const buffer = (0, _util.stringToBytes)(value);\n                value = decoder.decode(buffer);\n                needsEncodingFixup = false;\n              } catch {}\n            }\n\n            return value;\n          }\n\n          function fixupEncoding(value) {\n            if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n              value = textdecode(\"utf-8\", value);\n\n              if (needsEncodingFixup) {\n                value = textdecode(\"iso-8859-1\", value);\n              }\n            }\n\n            return value;\n          }\n\n          function rfc2231getparam(contentDispositionStr) {\n            const matches = [];\n            let match;\n            const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n            while ((match = iter.exec(contentDispositionStr)) !== null) {\n              let [, n, quot, part] = match;\n              n = parseInt(n, 10);\n\n              if (n in matches) {\n                if (n === 0) {\n                  break;\n                }\n\n                continue;\n              }\n\n              matches[n] = [quot, part];\n            }\n\n            const parts = [];\n\n            for (let n = 0; n < matches.length; ++n) {\n              if (!(n in matches)) {\n                break;\n              }\n\n              let [quot, part] = matches[n];\n              part = rfc2616unquote(part);\n\n              if (quot) {\n                part = unescape(part);\n\n                if (n === 0) {\n                  part = rfc5987decode(part);\n                }\n              }\n\n              parts.push(part);\n            }\n\n            return parts.join(\"\");\n          }\n\n          function rfc2616unquote(value) {\n            if (value.startsWith('\"')) {\n              const parts = value.slice(1).split('\\\\\"');\n\n              for (let i = 0; i < parts.length; ++i) {\n                const quotindex = parts[i].indexOf('\"');\n\n                if (quotindex !== -1) {\n                  parts[i] = parts[i].slice(0, quotindex);\n                  parts.length = i + 1;\n                }\n\n                parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n              }\n\n              value = parts.join('\"');\n            }\n\n            return value;\n          }\n\n          function rfc5987decode(extvalue) {\n            const encodingend = extvalue.indexOf(\"'\");\n\n            if (encodingend === -1) {\n              return extvalue;\n            }\n\n            const encoding = extvalue.slice(0, encodingend);\n            const langvalue = extvalue.slice(encodingend + 1);\n            const value = langvalue.replace(/^[^']*'/, \"\");\n            return textdecode(encoding, value);\n          }\n\n          function rfc2047decode(value) {\n            if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n              return value;\n            }\n\n            return value.replaceAll(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n              if (encoding === \"q\" || encoding === \"Q\") {\n                text = text.replaceAll(\"_\", \" \");\n                text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                  return String.fromCharCode(parseInt(hex, 16));\n                });\n                return textdecode(charset, text);\n              }\n\n              try {\n                text = atob(text);\n              } catch {}\n\n              return textdecode(charset, text);\n            });\n          }\n\n          return \"\";\n        }\n        /***/\n\n      },\n      /* 22 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNetworkStream = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _network_utils = __w_pdfjs_require__(20);\n\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n\n        function getArrayBuffer(xhr) {\n          const data = xhr.response;\n\n          if (typeof data !== \"string\") {\n            return data;\n          }\n\n          return (0, _util.stringToBytes)(data).buffer;\n        }\n\n        class NetworkManager {\n          constructor(url) {\n            let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.url = url;\n            this.isHttp = /^https?:/i.test(url);\n            this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);\n            this.withCredentials = args.withCredentials || false;\n            this.currXhrId = 0;\n            this.pendingRequests = Object.create(null);\n          }\n\n          requestRange(begin, end, listeners) {\n            const args = {\n              begin,\n              end\n            };\n\n            for (const prop in listeners) {\n              args[prop] = listeners[prop];\n            }\n\n            return this.request(args);\n          }\n\n          requestFull(listeners) {\n            return this.request(listeners);\n          }\n\n          request(args) {\n            const xhr = new XMLHttpRequest();\n            const xhrId = this.currXhrId++;\n            const pendingRequest = this.pendingRequests[xhrId] = {\n              xhr\n            };\n            xhr.open(\"GET\", this.url);\n            xhr.withCredentials = this.withCredentials;\n\n            for (const property in this.httpHeaders) {\n              const value = this.httpHeaders[property];\n\n              if (value === undefined) {\n                continue;\n              }\n\n              xhr.setRequestHeader(property, value);\n            }\n\n            if (this.isHttp && \"begin\" in args && \"end\" in args) {\n              xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n            } else {\n              pendingRequest.expectedStatus = OK_RESPONSE;\n            }\n\n            xhr.responseType = \"arraybuffer\";\n\n            if (args.onError) {\n              xhr.onerror = function (evt) {\n                args.onError(xhr.status);\n              };\n            }\n\n            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n            xhr.onprogress = this.onProgress.bind(this, xhrId);\n            pendingRequest.onHeadersReceived = args.onHeadersReceived;\n            pendingRequest.onDone = args.onDone;\n            pendingRequest.onError = args.onError;\n            pendingRequest.onProgress = args.onProgress;\n            xhr.send(null);\n            return xhrId;\n          }\n\n          onProgress(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            pendingRequest.onProgress?.(evt);\n          }\n\n          onStateChange(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            const xhr = pendingRequest.xhr;\n\n            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n              pendingRequest.onHeadersReceived();\n              delete pendingRequest.onHeadersReceived;\n            }\n\n            if (xhr.readyState !== 4) {\n              return;\n            }\n\n            if (!(xhrId in this.pendingRequests)) {\n              return;\n            }\n\n            delete this.pendingRequests[xhrId];\n\n            if (xhr.status === 0 && this.isHttp) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const xhrStatus = xhr.status || OK_RESPONSE;\n            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n              pendingRequest.onError?.(xhr.status);\n              return;\n            }\n\n            const chunk = getArrayBuffer(xhr);\n\n            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n              const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n              const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n              pendingRequest.onDone({\n                begin: parseInt(matches[1], 10),\n                chunk\n              });\n            } else if (chunk) {\n              pendingRequest.onDone({\n                begin: 0,\n                chunk\n              });\n            } else {\n              pendingRequest.onError?.(xhr.status);\n            }\n          }\n\n          getRequestXhr(xhrId) {\n            return this.pendingRequests[xhrId].xhr;\n          }\n\n          isPendingRequest(xhrId) {\n            return xhrId in this.pendingRequests;\n          }\n\n          abortRequest(xhrId) {\n            const xhr = this.pendingRequests[xhrId].xhr;\n            delete this.pendingRequests[xhrId];\n            xhr.abort();\n          }\n\n        }\n\n        class PDFNetworkStream {\n          constructor(source) {\n            this._source = source;\n            this._manager = new NetworkManager(source.url, {\n              httpHeaders: source.httpHeaders,\n              withCredentials: source.withCredentials\n            });\n            this._rangeChunkSize = source.rangeChunkSize;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          _onRangeRequestReaderClosed(reader) {\n            const i = this._rangeRequestReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeRequestReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNetworkStream = PDFNetworkStream;\n\n        class PDFNetworkStreamFullRequestReader {\n          constructor(manager, source) {\n            this._manager = manager;\n            const args = {\n              onHeadersReceived: this._onHeadersReceived.bind(this),\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = source.url;\n            this._fullRequestId = manager.requestFull(args);\n            this._headersReceivedCapability = new _util.PromiseCapability();\n            this._disableRange = source.disableRange || false;\n            this._contentLength = source.length;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = false;\n            this._isRangeSupported = false;\n            this._cachedChunks = [];\n            this._requests = [];\n            this._done = false;\n            this._storedError = undefined;\n            this._filename = null;\n            this.onProgress = null;\n          }\n\n          _onHeadersReceived() {\n            const fullRequestXhrId = this._fullRequestId;\n\n            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n            const getResponseHeader = name => {\n              return fullRequestXhr.getResponseHeader(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._manager.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n\n            if (allowRangeRequests) {\n              this._isRangeSupported = true;\n            }\n\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (this._isRangeSupported) {\n              this._manager.abortRequest(fullRequestXhrId);\n            }\n\n            this._headersReceivedCapability.resolve();\n          }\n\n          _onDone(data) {\n            if (data) {\n              if (this._requests.length > 0) {\n                const requestCapability = this._requests.shift();\n\n                requestCapability.resolve({\n                  value: data.chunk,\n                  done: false\n                });\n              } else {\n                this._cachedChunks.push(data.chunk);\n              }\n            }\n\n            this._done = true;\n\n            if (this._cachedChunks.length > 0) {\n              return;\n            }\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            this._headersReceivedCapability.reject(this._storedError);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._cachedChunks.length = 0;\n          }\n\n          _onProgress(evt) {\n            this.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.lengthComputable ? evt.total : this._contentLength\n            });\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get headersReady() {\n            return this._headersReceivedCapability.promise;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._cachedChunks.length > 0) {\n              const chunk = this._cachedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = new _util.PromiseCapability();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._headersReceivedCapability.reject(reason);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._fullRequestId)) {\n              this._manager.abortRequest(this._fullRequestId);\n            }\n\n            this._fullRequestReader = null;\n          }\n\n        }\n\n        class PDFNetworkStreamRangeRequestReader {\n          constructor(manager, begin, end) {\n            this._manager = manager;\n            const args = {\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = manager.url;\n            this._requestId = manager.requestRange(begin, end, args);\n            this._requests = [];\n            this._queuedChunk = null;\n            this._done = false;\n            this._storedError = undefined;\n            this.onProgress = null;\n            this.onClosed = null;\n          }\n\n          _close() {\n            this.onClosed?.(this);\n          }\n\n          _onDone(data) {\n            const chunk = data.chunk;\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunk = chunk;\n            }\n\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._close();\n          }\n\n          _onError(status) {\n            this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(this._storedError);\n            }\n\n            this._requests.length = 0;\n            this._queuedChunk = null;\n          }\n\n          _onProgress(evt) {\n            if (!this.isStreamingSupported) {\n              this.onProgress?.({\n                loaded: evt.loaded\n              });\n            }\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._queuedChunk !== null) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = new _util.PromiseCapability();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._requestId)) {\n              this._manager.abortRequest(this._requestId);\n            }\n\n            this._close();\n          }\n\n        }\n        /***/\n\n      },\n      /* 23 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNodeStream = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _network_utils = __w_pdfjs_require__(20);\n\n        ;\n        const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n        function parseUrl(sourceUrl) {\n          const url = require(\"url\");\n\n          const parsedUrl = url.parse(sourceUrl);\n\n          if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n            return parsedUrl;\n          }\n\n          if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n            return url.parse(`file:///${sourceUrl}`);\n          }\n\n          if (!parsedUrl.host) {\n            parsedUrl.protocol = \"file:\";\n          }\n\n          return parsedUrl;\n        }\n\n        class PDFNodeStream {\n          constructor(source) {\n            this.source = source;\n            this.url = parseUrl(source.url);\n            this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n            this.isFsUrl = this.url.protocol === \"file:\";\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(start, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n            this._rangeRequestReaders.push(rangeReader);\n\n            return rangeReader;\n          }\n\n          cancelAllRequests(reason) {\n            this._fullRequestReader?.cancel(reason);\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNodeStream = PDFNodeStream;\n\n        class BaseFullReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            const source = stream.source;\n            this._contentLength = source.length;\n            this._loaded = 0;\n            this._filename = null;\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._readableStream = null;\n            this._readCapability = new _util.PromiseCapability();\n            this._headersCapability = new _util.PromiseCapability();\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = new _util.PromiseCapability();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n            this.onProgress?.({\n              loaded: this._loaded,\n              total: this._contentLength\n            });\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this._error(new _util.AbortException(\"streaming is disabled\"));\n            }\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        class BaseRangeReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            this._loaded = 0;\n            this._readableStream = null;\n            this._readCapability = new _util.PromiseCapability();\n            const source = stream.source;\n            this._isStreamingSupported = !source.disableStream;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = new _util.PromiseCapability();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n            this.onProgress?.({\n              loaded: this._loaded\n            });\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        function createRequestOptions(parsedUrl, headers) {\n          return {\n            protocol: parsedUrl.protocol,\n            auth: parsedUrl.auth,\n            host: parsedUrl.hostname,\n            port: parsedUrl.port,\n            path: parsedUrl.path,\n            method: \"GET\",\n            headers\n          };\n        }\n\n        class PDFNodeStreamFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._headersCapability.resolve();\n\n              this._setReadableStream(response);\n\n              const getResponseHeader = name => {\n                return this._readableStream.headers[name.toLowerCase()];\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              const http = require(\"http\");\n\n              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            } else {\n              const https = require(\"https\");\n\n              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n\n              this._headersCapability.reject(reason);\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            this._httpHeaders = {};\n\n            for (const property in stream.httpHeaders) {\n              const value = stream.httpHeaders[property];\n\n              if (value === undefined) {\n                continue;\n              }\n\n              this._httpHeaders[property] = value;\n            }\n\n            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n                return;\n              }\n\n              this._setReadableStream(response);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              const http = require(\"http\");\n\n              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            } else {\n              const https = require(\"https\");\n\n              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamFsFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            const fs = require(\"fs\");\n\n            fs.lstat(path, (error, stat) => {\n              if (error) {\n                if (error.code === \"ENOENT\") {\n                  error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n                }\n\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._contentLength = stat.size;\n\n              this._setReadableStream(fs.createReadStream(path));\n\n              this._headersCapability.resolve();\n            });\n          }\n\n        }\n\n        class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            const fs = require(\"fs\");\n\n            this._setReadableStream(fs.createReadStream(path, {\n              start,\n              end: end - 1\n            }));\n          }\n\n        }\n        /***/\n\n      },\n      /* 24 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SVGGraphics = void 0;\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _util = __w_pdfjs_require__(1);\n\n        ;\n        const SVG_DEFAULTS = {\n          fontStyle: \"normal\",\n          fontWeight: \"normal\",\n          fillColor: \"#000000\"\n        };\n        const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n        const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n        const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n        const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n        const createObjectURL = function (data) {\n          let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n          let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema) {\n            return URL.createObjectURL(new Blob([data], {\n              type: contentType\n            }));\n          }\n\n          const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        };\n\n        const convertImgDataToPng = function () {\n          const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n          const CHUNK_WRAPPER_SIZE = 12;\n          const crcTable = new Int32Array(256);\n\n          for (let i = 0; i < 256; i++) {\n            let c = i;\n\n            for (let h = 0; h < 8; h++) {\n              c = c & 1 ? 0xedb88320 ^ c >> 1 & 0x7fffffff : c >> 1 & 0x7fffffff;\n            }\n\n            crcTable[i] = c;\n          }\n\n          function crc32(data, start, end) {\n            let crc = -1;\n\n            for (let i = start; i < end; i++) {\n              const a = (crc ^ data[i]) & 0xff;\n              const b = crcTable[a];\n              crc = crc >>> 8 ^ b;\n            }\n\n            return crc ^ -1;\n          }\n\n          function writePngChunk(type, body, data, offset) {\n            let p = offset;\n            const len = body.length;\n            data[p] = len >> 24 & 0xff;\n            data[p + 1] = len >> 16 & 0xff;\n            data[p + 2] = len >> 8 & 0xff;\n            data[p + 3] = len & 0xff;\n            p += 4;\n            data[p] = type.charCodeAt(0) & 0xff;\n            data[p + 1] = type.charCodeAt(1) & 0xff;\n            data[p + 2] = type.charCodeAt(2) & 0xff;\n            data[p + 3] = type.charCodeAt(3) & 0xff;\n            p += 4;\n            data.set(body, p);\n            p += body.length;\n            const crc = crc32(data, offset + 4, p);\n            data[p] = crc >> 24 & 0xff;\n            data[p + 1] = crc >> 16 & 0xff;\n            data[p + 2] = crc >> 8 & 0xff;\n            data[p + 3] = crc & 0xff;\n          }\n\n          function adler32(data, start, end) {\n            let a = 1;\n            let b = 0;\n\n            for (let i = start; i < end; ++i) {\n              a = (a + (data[i] & 0xff)) % 65521;\n              b = (b + a) % 65521;\n            }\n\n            return b << 16 | a;\n          }\n\n          function deflateSync(literals) {\n            if (!_util.isNodeJS) {\n              return deflateSyncUncompressed(literals);\n            }\n\n            try {\n              const input = parseInt(process.versions.node) >= 8 ? literals : Buffer.from(literals);\n\n              const output = require(\"zlib\").deflateSync(input, {\n                level: 9\n              });\n\n              return output instanceof Uint8Array ? output : new Uint8Array(output);\n            } catch (e) {\n              (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n            }\n\n            return deflateSyncUncompressed(literals);\n          }\n\n          function deflateSyncUncompressed(literals) {\n            let len = literals.length;\n            const maxBlockLength = 0xffff;\n            const deflateBlocks = Math.ceil(len / maxBlockLength);\n            const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n            let pi = 0;\n            idat[pi++] = 0x78;\n            idat[pi++] = 0x9c;\n            let pos = 0;\n\n            while (len > maxBlockLength) {\n              idat[pi++] = 0x00;\n              idat[pi++] = 0xff;\n              idat[pi++] = 0xff;\n              idat[pi++] = 0x00;\n              idat[pi++] = 0x00;\n              idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n              pi += maxBlockLength;\n              pos += maxBlockLength;\n              len -= maxBlockLength;\n            }\n\n            idat[pi++] = 0x01;\n            idat[pi++] = len & 0xff;\n            idat[pi++] = len >> 8 & 0xff;\n            idat[pi++] = ~len & 0xffff & 0xff;\n            idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n            idat.set(literals.subarray(pos), pi);\n            pi += literals.length - pos;\n            const adler = adler32(literals, 0, literals.length);\n            idat[pi++] = adler >> 24 & 0xff;\n            idat[pi++] = adler >> 16 & 0xff;\n            idat[pi++] = adler >> 8 & 0xff;\n            idat[pi++] = adler & 0xff;\n            return idat;\n          }\n\n          function encode(imgData, kind, forceDataSchema, isMask) {\n            const width = imgData.width;\n            const height = imgData.height;\n            let bitDepth, colorType, lineSize;\n            const bytes = imgData.data;\n\n            switch (kind) {\n              case _util.ImageKind.GRAYSCALE_1BPP:\n                colorType = 0;\n                bitDepth = 1;\n                lineSize = width + 7 >> 3;\n                break;\n\n              case _util.ImageKind.RGB_24BPP:\n                colorType = 2;\n                bitDepth = 8;\n                lineSize = width * 3;\n                break;\n\n              case _util.ImageKind.RGBA_32BPP:\n                colorType = 6;\n                bitDepth = 8;\n                lineSize = width * 4;\n                break;\n\n              default:\n                throw new Error(\"invalid format\");\n            }\n\n            const literals = new Uint8Array((1 + lineSize) * height);\n            let offsetLiterals = 0,\n                offsetBytes = 0;\n\n            for (let y = 0; y < height; ++y) {\n              literals[offsetLiterals++] = 0;\n              literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n              offsetBytes += lineSize;\n              offsetLiterals += lineSize;\n            }\n\n            if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n              offsetLiterals = 0;\n\n              for (let y = 0; y < height; y++) {\n                offsetLiterals++;\n\n                for (let i = 0; i < lineSize; i++) {\n                  literals[offsetLiterals++] ^= 0xff;\n                }\n              }\n            }\n\n            const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n            const idat = deflateSync(literals);\n            const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n            const data = new Uint8Array(pngLength);\n            let offset = 0;\n            data.set(PNG_HEADER, offset);\n            offset += PNG_HEADER.length;\n            writePngChunk(\"IHDR\", ihdr, data, offset);\n            offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n            writePngChunk(\"IDATA\", idat, data, offset);\n            offset += CHUNK_WRAPPER_SIZE + idat.length;\n            writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n            return createObjectURL(data, \"image/png\", forceDataSchema);\n          }\n\n          return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n            const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n            return encode(imgData, kind, forceDataSchema, isMask);\n          };\n        }();\n\n        class SVGExtraState {\n          constructor() {\n            this.fontSizeScale = 1;\n            this.fontWeight = SVG_DEFAULTS.fontWeight;\n            this.fontSize = 0;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textMatrixScale = 1;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRise = 0;\n            this.fillColor = SVG_DEFAULTS.fillColor;\n            this.strokeColor = \"#000000\";\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.lineJoin = \"\";\n            this.lineCap = \"\";\n            this.miterLimit = 0;\n            this.dashArray = [];\n            this.dashPhase = 0;\n            this.dependencies = [];\n            this.activeClipUrl = null;\n            this.clipGroup = null;\n            this.maskId = \"\";\n          }\n\n          clone() {\n            return Object.create(this);\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n        }\n\n        function opListToTree(opList) {\n          let opTree = [];\n          const tmp = [];\n\n          for (const opListElement of opList) {\n            if (opListElement.fn === \"save\") {\n              opTree.push({\n                fnId: 92,\n                fn: \"group\",\n                items: []\n              });\n              tmp.push(opTree);\n              opTree = opTree.at(-1).items;\n              continue;\n            }\n\n            if (opListElement.fn === \"restore\") {\n              opTree = tmp.pop();\n            } else {\n              opTree.push(opListElement);\n            }\n          }\n\n          return opTree;\n        }\n\n        function pf(value) {\n          if (Number.isInteger(value)) {\n            return value.toString();\n          }\n\n          const s = value.toFixed(10);\n          let i = s.length - 1;\n\n          if (s[i] !== \"0\") {\n            return s;\n          }\n\n          do {\n            i--;\n          } while (s[i] === \"0\");\n\n          return s.substring(0, s[i] === \".\" ? i : i + 1);\n        }\n\n        function pm(m) {\n          if (m[4] === 0 && m[5] === 0) {\n            if (m[1] === 0 && m[2] === 0) {\n              if (m[0] === 1 && m[3] === 1) {\n                return \"\";\n              }\n\n              return `scale(${pf(m[0])} ${pf(m[3])})`;\n            }\n\n            if (m[0] === m[3] && m[1] === -m[2]) {\n              const a = Math.acos(m[0]) * 180 / Math.PI;\n              return `rotate(${pf(a)})`;\n            }\n          } else if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n            return `translate(${pf(m[4])} ${pf(m[5])})`;\n          }\n\n          return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n        }\n\n        let clipCount = 0;\n        let maskCount = 0;\n        let shadingCount = 0;\n\n        class SVGGraphics {\n          constructor(commonObjs, objs) {\n            let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            (0, _display_utils.deprecated)(\"The SVG back-end is no longer maintained and *may* be removed in the future.\");\n            this.svgFactory = new _display_utils.DOMSVGFactory();\n            this.current = new SVGExtraState();\n            this.transformMatrix = _util.IDENTITY_MATRIX;\n            this.transformStack = [];\n            this.extraStack = [];\n            this.commonObjs = commonObjs;\n            this.objs = objs;\n            this.pendingClip = null;\n            this.pendingEOFill = false;\n            this.embedFonts = false;\n            this.embeddedFonts = Object.create(null);\n            this.cssStyle = null;\n            this.forceDataSchema = !!forceDataSchema;\n            this._operatorIdMapping = [];\n\n            for (const op in _util.OPS) {\n              this._operatorIdMapping[_util.OPS[op]] = op;\n            }\n          }\n\n          getObject(data) {\n            let fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (typeof data === \"string\") {\n              return data.startsWith(\"g_\") ? this.commonObjs.get(data) : this.objs.get(data);\n            }\n\n            return fallback;\n          }\n\n          save() {\n            this.transformStack.push(this.transformMatrix);\n            const old = this.current;\n            this.extraStack.push(old);\n            this.current = old.clone();\n          }\n\n          restore() {\n            this.transformMatrix = this.transformStack.pop();\n            this.current = this.extraStack.pop();\n            this.pendingClip = null;\n            this.tgrp = null;\n          }\n\n          group(items) {\n            this.save();\n            this.executeOpTree(items);\n            this.restore();\n          }\n\n          loadDependencies(operatorList) {\n            const fnArray = operatorList.fnArray;\n            const argsArray = operatorList.argsArray;\n\n            for (let i = 0, ii = fnArray.length; i < ii; i++) {\n              if (fnArray[i] !== _util.OPS.dependency) {\n                continue;\n              }\n\n              for (const obj of argsArray[i]) {\n                const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                const promise = new Promise(resolve => {\n                  objsPool.get(obj, resolve);\n                });\n                this.current.dependencies.push(promise);\n              }\n            }\n\n            return Promise.all(this.current.dependencies);\n          }\n\n          transform(a, b, c, d, e, f) {\n            const transformMatrix = [a, b, c, d, e, f];\n            this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n            this.tgrp = null;\n          }\n\n          getSVG(operatorList, viewport) {\n            this.viewport = viewport;\n\n            const svgElement = this._initialize(viewport);\n\n            return this.loadDependencies(operatorList).then(() => {\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.executeOpTree(this.convertOpList(operatorList));\n              return svgElement;\n            });\n          }\n\n          convertOpList(operatorList) {\n            const operatorIdMapping = this._operatorIdMapping;\n            const argsArray = operatorList.argsArray;\n            const fnArray = operatorList.fnArray;\n            const opList = [];\n\n            for (let i = 0, ii = fnArray.length; i < ii; i++) {\n              const fnId = fnArray[i];\n              opList.push({\n                fnId,\n                fn: operatorIdMapping[fnId],\n                args: argsArray[i]\n              });\n            }\n\n            return opListToTree(opList);\n          }\n\n          executeOpTree(opTree) {\n            for (const opTreeElement of opTree) {\n              const fn = opTreeElement.fn;\n              const fnId = opTreeElement.fnId;\n              const args = opTreeElement.args;\n\n              switch (fnId | 0) {\n                case _util.OPS.beginText:\n                  this.beginText();\n                  break;\n\n                case _util.OPS.dependency:\n                  break;\n\n                case _util.OPS.setLeading:\n                  this.setLeading(args);\n                  break;\n\n                case _util.OPS.setLeadingMoveText:\n                  this.setLeadingMoveText(args[0], args[1]);\n                  break;\n\n                case _util.OPS.setFont:\n                  this.setFont(args);\n                  break;\n\n                case _util.OPS.showText:\n                  this.showText(args[0]);\n                  break;\n\n                case _util.OPS.showSpacedText:\n                  this.showText(args[0]);\n                  break;\n\n                case _util.OPS.endText:\n                  this.endText();\n                  break;\n\n                case _util.OPS.moveText:\n                  this.moveText(args[0], args[1]);\n                  break;\n\n                case _util.OPS.setCharSpacing:\n                  this.setCharSpacing(args[0]);\n                  break;\n\n                case _util.OPS.setWordSpacing:\n                  this.setWordSpacing(args[0]);\n                  break;\n\n                case _util.OPS.setHScale:\n                  this.setHScale(args[0]);\n                  break;\n\n                case _util.OPS.setTextMatrix:\n                  this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                  break;\n\n                case _util.OPS.setTextRise:\n                  this.setTextRise(args[0]);\n                  break;\n\n                case _util.OPS.setTextRenderingMode:\n                  this.setTextRenderingMode(args[0]);\n                  break;\n\n                case _util.OPS.setLineWidth:\n                  this.setLineWidth(args[0]);\n                  break;\n\n                case _util.OPS.setLineJoin:\n                  this.setLineJoin(args[0]);\n                  break;\n\n                case _util.OPS.setLineCap:\n                  this.setLineCap(args[0]);\n                  break;\n\n                case _util.OPS.setMiterLimit:\n                  this.setMiterLimit(args[0]);\n                  break;\n\n                case _util.OPS.setFillRGBColor:\n                  this.setFillRGBColor(args[0], args[1], args[2]);\n                  break;\n\n                case _util.OPS.setStrokeRGBColor:\n                  this.setStrokeRGBColor(args[0], args[1], args[2]);\n                  break;\n\n                case _util.OPS.setStrokeColorN:\n                  this.setStrokeColorN(args);\n                  break;\n\n                case _util.OPS.setFillColorN:\n                  this.setFillColorN(args);\n                  break;\n\n                case _util.OPS.shadingFill:\n                  this.shadingFill(args[0]);\n                  break;\n\n                case _util.OPS.setDash:\n                  this.setDash(args[0], args[1]);\n                  break;\n\n                case _util.OPS.setRenderingIntent:\n                  this.setRenderingIntent(args[0]);\n                  break;\n\n                case _util.OPS.setFlatness:\n                  this.setFlatness(args[0]);\n                  break;\n\n                case _util.OPS.setGState:\n                  this.setGState(args[0]);\n                  break;\n\n                case _util.OPS.fill:\n                  this.fill();\n                  break;\n\n                case _util.OPS.eoFill:\n                  this.eoFill();\n                  break;\n\n                case _util.OPS.stroke:\n                  this.stroke();\n                  break;\n\n                case _util.OPS.fillStroke:\n                  this.fillStroke();\n                  break;\n\n                case _util.OPS.eoFillStroke:\n                  this.eoFillStroke();\n                  break;\n\n                case _util.OPS.clip:\n                  this.clip(\"nonzero\");\n                  break;\n\n                case _util.OPS.eoClip:\n                  this.clip(\"evenodd\");\n                  break;\n\n                case _util.OPS.paintSolidColorImageMask:\n                  this.paintSolidColorImageMask();\n                  break;\n\n                case _util.OPS.paintImageXObject:\n                  this.paintImageXObject(args[0]);\n                  break;\n\n                case _util.OPS.paintInlineImageXObject:\n                  this.paintInlineImageXObject(args[0]);\n                  break;\n\n                case _util.OPS.paintImageMaskXObject:\n                  this.paintImageMaskXObject(args[0]);\n                  break;\n\n                case _util.OPS.paintFormXObjectBegin:\n                  this.paintFormXObjectBegin(args[0], args[1]);\n                  break;\n\n                case _util.OPS.paintFormXObjectEnd:\n                  this.paintFormXObjectEnd();\n                  break;\n\n                case _util.OPS.closePath:\n                  this.closePath();\n                  break;\n\n                case _util.OPS.closeStroke:\n                  this.closeStroke();\n                  break;\n\n                case _util.OPS.closeFillStroke:\n                  this.closeFillStroke();\n                  break;\n\n                case _util.OPS.closeEOFillStroke:\n                  this.closeEOFillStroke();\n                  break;\n\n                case _util.OPS.nextLine:\n                  this.nextLine();\n                  break;\n\n                case _util.OPS.transform:\n                  this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                  break;\n\n                case _util.OPS.constructPath:\n                  this.constructPath(args[0], args[1]);\n                  break;\n\n                case _util.OPS.endPath:\n                  this.endPath();\n                  break;\n\n                case 92:\n                  this.group(opTreeElement.items);\n                  break;\n\n                default:\n                  (0, _util.warn)(`Unimplemented operator ${fn}`);\n                  break;\n              }\n            }\n          }\n\n          setWordSpacing(wordSpacing) {\n            this.current.wordSpacing = wordSpacing;\n          }\n\n          setCharSpacing(charSpacing) {\n            this.current.charSpacing = charSpacing;\n          }\n\n          nextLine() {\n            this.moveText(0, this.current.leading);\n          }\n\n          setTextMatrix(a, b, c, d, e, f) {\n            const current = this.current;\n            current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n            current.textMatrixScale = Math.hypot(a, b);\n            current.x = current.lineX = 0;\n            current.y = current.lineY = 0;\n            current.xcoords = [];\n            current.ycoords = [];\n            current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n            current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n            current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n            current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            current.txtElement = this.svgFactory.createElement(\"svg:text\");\n            current.txtElement.append(current.tspan);\n          }\n\n          beginText() {\n            const current = this.current;\n            current.x = current.lineX = 0;\n            current.y = current.lineY = 0;\n            current.textMatrix = _util.IDENTITY_MATRIX;\n            current.lineMatrix = _util.IDENTITY_MATRIX;\n            current.textMatrixScale = 1;\n            current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n            current.txtElement = this.svgFactory.createElement(\"svg:text\");\n            current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n            current.xcoords = [];\n            current.ycoords = [];\n          }\n\n          moveText(x, y) {\n            const current = this.current;\n            current.x = current.lineX += x;\n            current.y = current.lineY += y;\n            current.xcoords = [];\n            current.ycoords = [];\n            current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n            current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n            current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n            current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n          }\n\n          showText(glyphs) {\n            const current = this.current;\n            const font = current.font;\n            const fontSize = current.fontSize;\n\n            if (fontSize === 0) {\n              return;\n            }\n\n            const fontSizeScale = current.fontSizeScale;\n            const charSpacing = current.charSpacing;\n            const wordSpacing = current.wordSpacing;\n            const fontDirection = current.fontDirection;\n            const textHScale = current.textHScale * fontDirection;\n            const vertical = font.vertical;\n            const spacingDir = vertical ? 1 : -1;\n            const defaultVMetrics = font.defaultVMetrics;\n            const widthAdvanceScale = fontSize * current.fontMatrix[0];\n            let x = 0;\n\n            for (const glyph of glyphs) {\n              if (glyph === null) {\n                x += fontDirection * wordSpacing;\n                continue;\n              } else if (typeof glyph === \"number\") {\n                x += spacingDir * glyph * fontSize / 1000;\n                continue;\n              }\n\n              const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n              const character = glyph.fontChar;\n              let scaledX, scaledY;\n              let width = glyph.width;\n\n              if (vertical) {\n                let vx;\n                const vmetric = glyph.vmetric || defaultVMetrics;\n                vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                vx = -vx * widthAdvanceScale;\n                const vy = vmetric[2] * widthAdvanceScale;\n                width = vmetric ? -vmetric[0] : width;\n                scaledX = vx / fontSizeScale;\n                scaledY = (x + vy) / fontSizeScale;\n              } else {\n                scaledX = x / fontSizeScale;\n                scaledY = 0;\n              }\n\n              if (glyph.isInFont || font.missingFile) {\n                current.xcoords.push(current.x + scaledX);\n\n                if (vertical) {\n                  current.ycoords.push(-current.y + scaledY);\n                }\n\n                current.tspan.textContent += character;\n              } else {}\n\n              const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;\n              x += charWidth;\n            }\n\n            current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n            if (vertical) {\n              current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n            } else {\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            }\n\n            if (vertical) {\n              current.y -= x;\n            } else {\n              current.x += x * textHScale;\n            }\n\n            current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n            current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n            if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n              current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n            }\n\n            if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n              current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n            }\n\n            const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n            if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n              if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n              }\n\n              if (current.fillAlpha < 1) {\n                current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n              }\n            } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n              current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n            } else {\n              current.tspan.setAttributeNS(null, \"fill\", \"none\");\n            }\n\n            if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n              const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n              this._setStrokeAttributes(current.tspan, lineWidthScale);\n            }\n\n            let textMatrix = current.textMatrix;\n\n            if (current.textRise !== 0) {\n              textMatrix = textMatrix.slice();\n              textMatrix[5] += current.textRise;\n            }\n\n            current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n            current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n            current.txtElement.append(current.tspan);\n            current.txtgrp.append(current.txtElement);\n\n            this._ensureTransformGroup().append(current.txtElement);\n          }\n\n          setLeadingMoveText(x, y) {\n            this.setLeading(-y);\n            this.moveText(x, y);\n          }\n\n          addFontStyle(fontObj) {\n            if (!fontObj.data) {\n              throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n            }\n\n            if (!this.cssStyle) {\n              this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n              this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n              this.defs.append(this.cssStyle);\n            }\n\n            const url = createObjectURL(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n            this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n          }\n\n          setFont(details) {\n            const current = this.current;\n            const fontObj = this.commonObjs.get(details[0]);\n            let size = details[1];\n            current.font = fontObj;\n\n            if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n              this.addFontStyle(fontObj);\n              this.embeddedFonts[fontObj.loadedName] = fontObj;\n            }\n\n            current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n            let bold = \"normal\";\n\n            if (fontObj.black) {\n              bold = \"900\";\n            } else if (fontObj.bold) {\n              bold = \"bold\";\n            }\n\n            const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n            if (size < 0) {\n              size = -size;\n              current.fontDirection = -1;\n            } else {\n              current.fontDirection = 1;\n            }\n\n            current.fontSize = size;\n            current.fontFamily = fontObj.loadedName;\n            current.fontWeight = bold;\n            current.fontStyle = italic;\n            current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n            current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            current.xcoords = [];\n            current.ycoords = [];\n          }\n\n          endText() {\n            const current = this.current;\n\n            if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {\n              current.element = current.txtElement;\n              this.clip(\"nonzero\");\n              this.endPath();\n            }\n          }\n\n          setLineWidth(width) {\n            if (width > 0) {\n              this.current.lineWidth = width;\n            }\n          }\n\n          setLineCap(style) {\n            this.current.lineCap = LINE_CAP_STYLES[style];\n          }\n\n          setLineJoin(style) {\n            this.current.lineJoin = LINE_JOIN_STYLES[style];\n          }\n\n          setMiterLimit(limit) {\n            this.current.miterLimit = limit;\n          }\n\n          setStrokeAlpha(strokeAlpha) {\n            this.current.strokeAlpha = strokeAlpha;\n          }\n\n          setStrokeRGBColor(r, g, b) {\n            this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n          }\n\n          setFillAlpha(fillAlpha) {\n            this.current.fillAlpha = fillAlpha;\n          }\n\n          setFillRGBColor(r, g, b) {\n            this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n            this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n            this.current.xcoords = [];\n            this.current.ycoords = [];\n          }\n\n          setStrokeColorN(args) {\n            this.current.strokeColor = this._makeColorN_Pattern(args);\n          }\n\n          setFillColorN(args) {\n            this.current.fillColor = this._makeColorN_Pattern(args);\n          }\n\n          shadingFill(args) {\n            const {\n              width,\n              height\n            } = this.viewport;\n\n            const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n            const [x0, y0, x1, y1] = _util.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv);\n\n            const rect = this.svgFactory.createElement(\"svg:rect\");\n            rect.setAttributeNS(null, \"x\", x0);\n            rect.setAttributeNS(null, \"y\", y0);\n            rect.setAttributeNS(null, \"width\", x1 - x0);\n            rect.setAttributeNS(null, \"height\", y1 - y0);\n            rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n            if (this.current.fillAlpha < 1) {\n              rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n            }\n\n            this._ensureTransformGroup().append(rect);\n          }\n\n          _makeColorN_Pattern(args) {\n            if (args[0] === \"TilingPattern\") {\n              return this._makeTilingPattern(args);\n            }\n\n            return this._makeShadingPattern(args);\n          }\n\n          _makeTilingPattern(args) {\n            const color = args[1];\n            const operatorList = args[2];\n            const matrix = args[3] || _util.IDENTITY_MATRIX;\n            const [x0, y0, x1, y1] = args[4];\n            const xstep = args[5];\n            const ystep = args[6];\n            const paintType = args[7];\n            const tilingId = `shading${shadingCount++}`;\n\n            const [tx0, ty0, tx1, ty1] = _util.Util.normalizeRect([..._util.Util.applyTransform([x0, y0], matrix), ..._util.Util.applyTransform([x1, y1], matrix)]);\n\n            const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n            const txstep = xstep * xscale;\n            const tystep = ystep * yscale;\n            const tiling = this.svgFactory.createElement(\"svg:pattern\");\n            tiling.setAttributeNS(null, \"id\", tilingId);\n            tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n            tiling.setAttributeNS(null, \"width\", txstep);\n            tiling.setAttributeNS(null, \"height\", tystep);\n            tiling.setAttributeNS(null, \"x\", `${tx0}`);\n            tiling.setAttributeNS(null, \"y\", `${ty0}`);\n            const svg = this.svg;\n            const transformMatrix = this.transformMatrix;\n            const fillColor = this.current.fillColor;\n            const strokeColor = this.current.strokeColor;\n            const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n            this.svg = bbox;\n            this.transformMatrix = matrix;\n\n            if (paintType === 2) {\n              const cssColor = _util.Util.makeHexColor(...color);\n\n              this.current.fillColor = cssColor;\n              this.current.strokeColor = cssColor;\n            }\n\n            this.executeOpTree(this.convertOpList(operatorList));\n            this.svg = svg;\n            this.transformMatrix = transformMatrix;\n            this.current.fillColor = fillColor;\n            this.current.strokeColor = strokeColor;\n            tiling.append(bbox.childNodes[0]);\n            this.defs.append(tiling);\n            return `url(#${tilingId})`;\n          }\n\n          _makeShadingPattern(args) {\n            if (typeof args === \"string\") {\n              args = this.objs.get(args);\n            }\n\n            switch (args[0]) {\n              case \"RadialAxial\":\n                const shadingId = `shading${shadingCount++}`;\n                const colorStops = args[3];\n                let gradient;\n\n                switch (args[1]) {\n                  case \"axial\":\n                    const point0 = args[4];\n                    const point1 = args[5];\n                    gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                    gradient.setAttributeNS(null, \"id\", shadingId);\n                    gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                    gradient.setAttributeNS(null, \"x1\", point0[0]);\n                    gradient.setAttributeNS(null, \"y1\", point0[1]);\n                    gradient.setAttributeNS(null, \"x2\", point1[0]);\n                    gradient.setAttributeNS(null, \"y2\", point1[1]);\n                    break;\n\n                  case \"radial\":\n                    const focalPoint = args[4];\n                    const circlePoint = args[5];\n                    const focalRadius = args[6];\n                    const circleRadius = args[7];\n                    gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                    gradient.setAttributeNS(null, \"id\", shadingId);\n                    gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                    gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                    gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                    gradient.setAttributeNS(null, \"r\", circleRadius);\n                    gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                    gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                    gradient.setAttributeNS(null, \"fr\", focalRadius);\n                    break;\n\n                  default:\n                    throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                }\n\n                for (const colorStop of colorStops) {\n                  const stop = this.svgFactory.createElement(\"svg:stop\");\n                  stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                  stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                  gradient.append(stop);\n                }\n\n                this.defs.append(gradient);\n                return `url(#${shadingId})`;\n\n              case \"Mesh\":\n                (0, _util.warn)(\"Unimplemented pattern Mesh\");\n                return null;\n\n              case \"Dummy\":\n                return \"hotpink\";\n\n              default:\n                throw new Error(`Unknown IR type: ${args[0]}`);\n            }\n          }\n\n          setDash(dashArray, dashPhase) {\n            this.current.dashArray = dashArray;\n            this.current.dashPhase = dashPhase;\n          }\n\n          constructPath(ops, args) {\n            const current = this.current;\n            let x = current.x,\n                y = current.y;\n            let d = [];\n            let j = 0;\n\n            for (const op of ops) {\n              switch (op | 0) {\n                case _util.OPS.rectangle:\n                  x = args[j++];\n                  y = args[j++];\n                  const width = args[j++];\n                  const height = args[j++];\n                  const xw = x + width;\n                  const yh = y + height;\n                  d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                  break;\n\n                case _util.OPS.moveTo:\n                  x = args[j++];\n                  y = args[j++];\n                  d.push(\"M\", pf(x), pf(y));\n                  break;\n\n                case _util.OPS.lineTo:\n                  x = args[j++];\n                  y = args[j++];\n                  d.push(\"L\", pf(x), pf(y));\n                  break;\n\n                case _util.OPS.curveTo:\n                  x = args[j + 4];\n                  y = args[j + 5];\n                  d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                  j += 6;\n                  break;\n\n                case _util.OPS.curveTo2:\n                  d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  j += 4;\n                  break;\n\n                case _util.OPS.curveTo3:\n                  x = args[j + 2];\n                  y = args[j + 3];\n                  d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                  j += 4;\n                  break;\n\n                case _util.OPS.closePath:\n                  d.push(\"Z\");\n                  break;\n              }\n            }\n\n            d = d.join(\" \");\n\n            if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n              d = current.path.getAttributeNS(null, \"d\") + d;\n            } else {\n              current.path = this.svgFactory.createElement(\"svg:path\");\n\n              this._ensureTransformGroup().append(current.path);\n            }\n\n            current.path.setAttributeNS(null, \"d\", d);\n            current.path.setAttributeNS(null, \"fill\", \"none\");\n            current.element = current.path;\n            current.setCurrentPoint(x, y);\n          }\n\n          endPath() {\n            const current = this.current;\n            current.path = null;\n\n            if (!this.pendingClip) {\n              return;\n            }\n\n            if (!current.element) {\n              this.pendingClip = null;\n              return;\n            }\n\n            const clipId = `clippath${clipCount++}`;\n            const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n            clipPath.setAttributeNS(null, \"id\", clipId);\n            clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n            const clipElement = current.element.cloneNode(true);\n\n            if (this.pendingClip === \"evenodd\") {\n              clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n            } else {\n              clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n            }\n\n            this.pendingClip = null;\n            clipPath.append(clipElement);\n            this.defs.append(clipPath);\n\n            if (current.activeClipUrl) {\n              current.clipGroup = null;\n\n              for (const prev of this.extraStack) {\n                prev.clipGroup = null;\n              }\n\n              clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n            }\n\n            current.activeClipUrl = `url(#${clipId})`;\n            this.tgrp = null;\n          }\n\n          clip(type) {\n            this.pendingClip = type;\n          }\n\n          closePath() {\n            const current = this.current;\n\n            if (current.path) {\n              const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n              current.path.setAttributeNS(null, \"d\", d);\n            }\n          }\n\n          setLeading(leading) {\n            this.current.leading = -leading;\n          }\n\n          setTextRise(textRise) {\n            this.current.textRise = textRise;\n          }\n\n          setTextRenderingMode(textRenderingMode) {\n            this.current.textRenderingMode = textRenderingMode;\n          }\n\n          setHScale(scale) {\n            this.current.textHScale = scale / 100;\n          }\n\n          setRenderingIntent(intent) {}\n\n          setFlatness(flatness) {}\n\n          setGState(states) {\n            for (const [key, value] of states) {\n              switch (key) {\n                case \"LW\":\n                  this.setLineWidth(value);\n                  break;\n\n                case \"LC\":\n                  this.setLineCap(value);\n                  break;\n\n                case \"LJ\":\n                  this.setLineJoin(value);\n                  break;\n\n                case \"ML\":\n                  this.setMiterLimit(value);\n                  break;\n\n                case \"D\":\n                  this.setDash(value[0], value[1]);\n                  break;\n\n                case \"RI\":\n                  this.setRenderingIntent(value);\n                  break;\n\n                case \"FL\":\n                  this.setFlatness(value);\n                  break;\n\n                case \"Font\":\n                  this.setFont(value);\n                  break;\n\n                case \"CA\":\n                  this.setStrokeAlpha(value);\n                  break;\n\n                case \"ca\":\n                  this.setFillAlpha(value);\n                  break;\n\n                default:\n                  (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                  break;\n              }\n            }\n          }\n\n          fill() {\n            const current = this.current;\n\n            if (current.element) {\n              current.element.setAttributeNS(null, \"fill\", current.fillColor);\n              current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n              this.endPath();\n            }\n          }\n\n          stroke() {\n            const current = this.current;\n\n            if (current.element) {\n              this._setStrokeAttributes(current.element);\n\n              current.element.setAttributeNS(null, \"fill\", \"none\");\n              this.endPath();\n            }\n          }\n\n          _setStrokeAttributes(element) {\n            let lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            const current = this.current;\n            let dashArray = current.dashArray;\n\n            if (lineWidthScale !== 1 && dashArray.length > 0) {\n              dashArray = dashArray.map(function (value) {\n                return lineWidthScale * value;\n              });\n            }\n\n            element.setAttributeNS(null, \"stroke\", current.strokeColor);\n            element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n            element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n            element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n            element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n            element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n            element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n            element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n          }\n\n          eoFill() {\n            this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n            this.fill();\n          }\n\n          fillStroke() {\n            this.stroke();\n            this.fill();\n          }\n\n          eoFillStroke() {\n            this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n            this.fillStroke();\n          }\n\n          closeStroke() {\n            this.closePath();\n            this.stroke();\n          }\n\n          closeFillStroke() {\n            this.closePath();\n            this.fillStroke();\n          }\n\n          closeEOFillStroke() {\n            this.closePath();\n            this.eoFillStroke();\n          }\n\n          paintSolidColorImageMask() {\n            const rect = this.svgFactory.createElement(\"svg:rect\");\n            rect.setAttributeNS(null, \"x\", \"0\");\n            rect.setAttributeNS(null, \"y\", \"0\");\n            rect.setAttributeNS(null, \"width\", \"1px\");\n            rect.setAttributeNS(null, \"height\", \"1px\");\n            rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n            this._ensureTransformGroup().append(rect);\n          }\n\n          paintImageXObject(objId) {\n            const imgData = this.getObject(objId);\n\n            if (!imgData) {\n              (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n              return;\n            }\n\n            this.paintInlineImageXObject(imgData);\n          }\n\n          paintInlineImageXObject(imgData, mask) {\n            const width = imgData.width;\n            const height = imgData.height;\n            const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n            const cliprect = this.svgFactory.createElement(\"svg:rect\");\n            cliprect.setAttributeNS(null, \"x\", \"0\");\n            cliprect.setAttributeNS(null, \"y\", \"0\");\n            cliprect.setAttributeNS(null, \"width\", pf(width));\n            cliprect.setAttributeNS(null, \"height\", pf(height));\n            this.current.element = cliprect;\n            this.clip(\"nonzero\");\n            const imgEl = this.svgFactory.createElement(\"svg:image\");\n            imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n            imgEl.setAttributeNS(null, \"x\", \"0\");\n            imgEl.setAttributeNS(null, \"y\", pf(-height));\n            imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n            imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n            imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n            if (mask) {\n              mask.append(imgEl);\n            } else {\n              this._ensureTransformGroup().append(imgEl);\n            }\n          }\n\n          paintImageMaskXObject(img) {\n            const imgData = this.getObject(img.data, img);\n\n            if (imgData.bitmap) {\n              (0, _util.warn)(\"paintImageMaskXObject: ImageBitmap support is not implemented, \" + \"ensure that the `isOffscreenCanvasSupported` API parameter is disabled.\");\n              return;\n            }\n\n            const current = this.current;\n            const width = imgData.width;\n            const height = imgData.height;\n            const fillColor = current.fillColor;\n            current.maskId = `mask${maskCount++}`;\n            const mask = this.svgFactory.createElement(\"svg:mask\");\n            mask.setAttributeNS(null, \"id\", current.maskId);\n            const rect = this.svgFactory.createElement(\"svg:rect\");\n            rect.setAttributeNS(null, \"x\", \"0\");\n            rect.setAttributeNS(null, \"y\", \"0\");\n            rect.setAttributeNS(null, \"width\", pf(width));\n            rect.setAttributeNS(null, \"height\", pf(height));\n            rect.setAttributeNS(null, \"fill\", fillColor);\n            rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n            this.defs.append(mask);\n\n            this._ensureTransformGroup().append(rect);\n\n            this.paintInlineImageXObject(imgData, mask);\n          }\n\n          paintFormXObjectBegin(matrix, bbox) {\n            if (Array.isArray(matrix) && matrix.length === 6) {\n              this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n            }\n\n            if (bbox) {\n              const width = bbox[2] - bbox[0];\n              const height = bbox[3] - bbox[1];\n              const cliprect = this.svgFactory.createElement(\"svg:rect\");\n              cliprect.setAttributeNS(null, \"x\", bbox[0]);\n              cliprect.setAttributeNS(null, \"y\", bbox[1]);\n              cliprect.setAttributeNS(null, \"width\", pf(width));\n              cliprect.setAttributeNS(null, \"height\", pf(height));\n              this.current.element = cliprect;\n              this.clip(\"nonzero\");\n              this.endPath();\n            }\n          }\n\n          paintFormXObjectEnd() {}\n\n          _initialize(viewport) {\n            const svg = this.svgFactory.create(viewport.width, viewport.height);\n            const definitions = this.svgFactory.createElement(\"svg:defs\");\n            svg.append(definitions);\n            this.defs = definitions;\n            const rootGroup = this.svgFactory.createElement(\"svg:g\");\n            rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n            svg.append(rootGroup);\n            this.svg = rootGroup;\n            return svg;\n          }\n\n          _ensureClipGroup() {\n            if (!this.current.clipGroup) {\n              const clipGroup = this.svgFactory.createElement(\"svg:g\");\n              clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n              this.svg.append(clipGroup);\n              this.current.clipGroup = clipGroup;\n            }\n\n            return this.current.clipGroup;\n          }\n\n          _ensureTransformGroup() {\n            if (!this.tgrp) {\n              this.tgrp = this.svgFactory.createElement(\"svg:g\");\n              this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n              if (this.current.activeClipUrl) {\n                this._ensureClipGroup().append(this.tgrp);\n              } else {\n                this.svg.append(this.tgrp);\n              }\n            }\n\n            return this.tgrp;\n          }\n\n        }\n\n        exports.SVGGraphics = SVGGraphics;\n        /***/\n      },\n      /* 25 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaText = void 0;\n\n        class XfaText {\n          static textContent(xfa) {\n            const items = [];\n            const output = {\n              items,\n              styles: Object.create(null)\n            };\n\n            function walk(node) {\n              if (!node) {\n                return;\n              }\n\n              let str = null;\n              const name = node.name;\n\n              if (name === \"#text\") {\n                str = node.value;\n              } else if (!XfaText.shouldBuildText(name)) {\n                return;\n              } else if (node?.attributes?.textContent) {\n                str = node.attributes.textContent;\n              } else if (node.value) {\n                str = node.value;\n              }\n\n              if (str !== null) {\n                items.push({\n                  str\n                });\n              }\n\n              if (!node.children) {\n                return;\n              }\n\n              for (const child of node.children) {\n                walk(child);\n              }\n            }\n\n            walk(xfa);\n            return output;\n          }\n\n          static shouldBuildText(name) {\n            return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n          }\n\n        }\n\n        exports.XfaText = XfaText;\n        /***/\n      },\n      /* 26 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.TextLayerRenderTask = void 0;\n        exports.renderTextLayer = renderTextLayer;\n        exports.updateTextLayer = updateTextLayer;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        const MAX_TEXT_DIVS_TO_RENDER = 100000;\n        const DEFAULT_FONT_SIZE = 30;\n        const DEFAULT_FONT_ASCENT = 0.8;\n        const ascentCache = new Map();\n\n        function getCtx(size, isOffscreenCanvasSupported) {\n          let ctx;\n\n          if (isOffscreenCanvasSupported && _util.FeatureTest.isOffscreenCanvasSupported) {\n            ctx = new OffscreenCanvas(size, size).getContext(\"2d\", {\n              alpha: false\n            });\n          } else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvas.height = size;\n            ctx = canvas.getContext(\"2d\", {\n              alpha: false\n            });\n          }\n\n          return ctx;\n        }\n\n        function getAscent(fontFamily, isOffscreenCanvasSupported) {\n          const cachedAscent = ascentCache.get(fontFamily);\n\n          if (cachedAscent) {\n            return cachedAscent;\n          }\n\n          const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);\n          ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n          const metrics = ctx.measureText(\"\");\n          let ascent = metrics.fontBoundingBoxAscent;\n          let descent = Math.abs(metrics.fontBoundingBoxDescent);\n\n          if (ascent) {\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            ctx.canvas.width = ctx.canvas.height = 0;\n            return ratio;\n          }\n\n          ctx.strokeStyle = \"red\";\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"g\", 0, 0);\n          let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          descent = 0;\n\n          for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n            if (pixels[i] > 0) {\n              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          ascent = 0;\n\n          for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n            if (pixels[i] > 0) {\n              ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.canvas.width = ctx.canvas.height = 0;\n\n          if (ascent) {\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n          return DEFAULT_FONT_ASCENT;\n        }\n\n        function appendText(task, geom, styles) {\n          const textDiv = document.createElement(\"span\");\n          const textDivProperties = {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL,\n            fontSize: 0\n          };\n\n          task._textDivs.push(textDiv);\n\n          const tx = _util.Util.transform(task._transform, geom.transform);\n\n          let angle = Math.atan2(tx[1], tx[0]);\n          const style = styles[geom.fontName];\n\n          if (style.vertical) {\n            angle += Math.PI / 2;\n          }\n\n          const fontHeight = Math.hypot(tx[2], tx[3]);\n          const fontAscent = fontHeight * getAscent(style.fontFamily, task._isOffscreenCanvasSupported);\n          let left, top;\n\n          if (angle === 0) {\n            left = tx[4];\n            top = tx[5] - fontAscent;\n          } else {\n            left = tx[4] + fontAscent * Math.sin(angle);\n            top = tx[5] - fontAscent * Math.cos(angle);\n          }\n\n          const scaleFactorStr = \"calc(var(--scale-factor)*\";\n          const divStyle = textDiv.style;\n\n          if (task._container === task._rootContainer) {\n            divStyle.left = `${(100 * left / task._pageWidth).toFixed(2)}%`;\n            divStyle.top = `${(100 * top / task._pageHeight).toFixed(2)}%`;\n          } else {\n            divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n            divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n          }\n\n          divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;\n          divStyle.fontFamily = style.fontFamily;\n          textDivProperties.fontSize = fontHeight;\n          textDiv.setAttribute(\"role\", \"presentation\");\n          textDiv.textContent = geom.str;\n          textDiv.dir = geom.dir;\n\n          if (task._fontInspectorEnabled) {\n            textDiv.dataset.fontName = geom.fontName;\n          }\n\n          if (angle !== 0) {\n            textDivProperties.angle = angle * (180 / Math.PI);\n          }\n\n          let shouldScaleText = false;\n\n          if (geom.str.length > 1) {\n            shouldScaleText = true;\n          } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n            const absScaleX = Math.abs(geom.transform[0]),\n                  absScaleY = Math.abs(geom.transform[3]);\n\n            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n              shouldScaleText = true;\n            }\n          }\n\n          if (shouldScaleText) {\n            textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n          }\n\n          task._textDivProperties.set(textDiv, textDivProperties);\n\n          if (task._isReadableStream) {\n            task._layoutText(textDiv);\n          }\n        }\n\n        function layout(params) {\n          const {\n            div,\n            scale,\n            properties,\n            ctx,\n            prevFontSize,\n            prevFontFamily\n          } = params;\n          const {\n            style\n          } = div;\n          let transform = \"\";\n\n          if (properties.canvasWidth !== 0 && properties.hasText) {\n            const {\n              fontFamily\n            } = style;\n            const {\n              canvasWidth,\n              fontSize\n            } = properties;\n\n            if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {\n              ctx.font = `${fontSize * scale}px ${fontFamily}`;\n              params.prevFontSize = fontSize;\n              params.prevFontFamily = fontFamily;\n            }\n\n            const {\n              width\n            } = ctx.measureText(div.textContent);\n\n            if (width > 0) {\n              transform = `scaleX(${canvasWidth * scale / width})`;\n            }\n          }\n\n          if (properties.angle !== 0) {\n            transform = `rotate(${properties.angle}deg) ${transform}`;\n          }\n\n          if (transform.length > 0) {\n            style.transform = transform;\n          }\n        }\n\n        function render(task) {\n          if (task._canceled) {\n            return;\n          }\n\n          const textDivs = task._textDivs;\n          const capability = task._capability;\n          const textDivsLength = textDivs.length;\n\n          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n            capability.resolve();\n            return;\n          }\n\n          if (!task._isReadableStream) {\n            for (const textDiv of textDivs) {\n              task._layoutText(textDiv);\n            }\n          }\n\n          capability.resolve();\n        }\n\n        class TextLayerRenderTask {\n          constructor(_ref38) {\n            let {\n              textContentSource,\n              container,\n              viewport,\n              textDivs,\n              textDivProperties,\n              textContentItemsStr,\n              isOffscreenCanvasSupported\n            } = _ref38;\n            this._textContentSource = textContentSource;\n            this._isReadableStream = textContentSource instanceof ReadableStream;\n            this._container = this._rootContainer = container;\n            this._textDivs = textDivs || [];\n            this._textContentItemsStr = textContentItemsStr || [];\n            this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;\n            this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n            this._reader = null;\n            this._textDivProperties = textDivProperties || new WeakMap();\n            this._canceled = false;\n            this._capability = new _util.PromiseCapability();\n            this._layoutTextParams = {\n              prevFontSize: null,\n              prevFontFamily: null,\n              div: null,\n              scale: viewport.scale * (globalThis.devicePixelRatio || 1),\n              properties: null,\n              ctx: getCtx(0, isOffscreenCanvasSupported)\n            };\n            const {\n              pageWidth,\n              pageHeight,\n              pageX,\n              pageY\n            } = viewport.rawDims;\n            this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];\n            this._pageWidth = pageWidth;\n            this._pageHeight = pageHeight;\n            (0, _display_utils.setLayerDimensions)(container, viewport);\n\n            this._capability.promise.finally(() => {\n              this._layoutTextParams = null;\n            }).catch(() => {});\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          cancel() {\n            this._canceled = true;\n\n            if (this._reader) {\n              this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\")).catch(() => {});\n\n              this._reader = null;\n            }\n\n            this._capability.reject(new _util.AbortException(\"TextLayer task cancelled.\"));\n          }\n\n          _processItems(items, styleCache) {\n            for (const item of items) {\n              if (item.str === undefined) {\n                if (item.type === \"beginMarkedContentProps\" || item.type === \"beginMarkedContent\") {\n                  const parent = this._container;\n                  this._container = document.createElement(\"span\");\n\n                  this._container.classList.add(\"markedContent\");\n\n                  if (item.id !== null) {\n                    this._container.setAttribute(\"id\", `${item.id}`);\n                  }\n\n                  parent.append(this._container);\n                } else if (item.type === \"endMarkedContent\") {\n                  this._container = this._container.parentNode;\n                }\n\n                continue;\n              }\n\n              this._textContentItemsStr.push(item.str);\n\n              appendText(this, item, styleCache);\n            }\n          }\n\n          _layoutText(textDiv) {\n            const textDivProperties = this._layoutTextParams.properties = this._textDivProperties.get(textDiv);\n\n            this._layoutTextParams.div = textDiv;\n            layout(this._layoutTextParams);\n\n            if (textDivProperties.hasText) {\n              this._container.append(textDiv);\n            }\n\n            if (textDivProperties.hasEOL) {\n              const br = document.createElement(\"br\");\n              br.setAttribute(\"role\", \"presentation\");\n\n              this._container.append(br);\n            }\n          }\n\n          _render() {\n            const capability = new _util.PromiseCapability();\n            let styleCache = Object.create(null);\n\n            if (this._isReadableStream) {\n              const pump = () => {\n                this._reader.read().then(_ref39 => {\n                  let {\n                    value,\n                    done\n                  } = _ref39;\n\n                  if (done) {\n                    capability.resolve();\n                    return;\n                  }\n\n                  Object.assign(styleCache, value.styles);\n\n                  this._processItems(value.items, styleCache);\n\n                  pump();\n                }, capability.reject);\n              };\n\n              this._reader = this._textContentSource.getReader();\n              pump();\n            } else if (this._textContentSource) {\n              const {\n                items,\n                styles\n              } = this._textContentSource;\n\n              this._processItems(items, styles);\n\n              capability.resolve();\n            } else {\n              throw new Error('No \"textContentSource\" parameter specified.');\n            }\n\n            capability.promise.then(() => {\n              styleCache = null;\n              render(this);\n            }, this._capability.reject);\n          }\n\n        }\n\n        exports.TextLayerRenderTask = TextLayerRenderTask;\n\n        function renderTextLayer(params) {\n          if (!params.textContentSource && (params.textContent || params.textContentStream)) {\n            (0, _display_utils.deprecated)(\"The TextLayerRender `textContent`/`textContentStream` parameters \" + \"will be removed in the future, please use `textContentSource` instead.\");\n            params.textContentSource = params.textContent || params.textContentStream;\n          }\n\n          const {\n            container,\n            viewport\n          } = params;\n          const style = getComputedStyle(container);\n          const visibility = style.getPropertyValue(\"visibility\");\n          const scaleFactor = parseFloat(style.getPropertyValue(\"--scale-factor\"));\n\n          if (visibility === \"visible\" && (!scaleFactor || Math.abs(scaleFactor - viewport.scale) > 1e-5)) {\n            console.error(\"The `--scale-factor` CSS-variable must be set, \" + \"to the same value as `viewport.scale`, \" + \"either on the `container`-element itself or higher up in the DOM.\");\n          }\n\n          const task = new TextLayerRenderTask(params);\n\n          task._render();\n\n          return task;\n        }\n\n        function updateTextLayer(_ref40) {\n          let {\n            container,\n            viewport,\n            textDivs,\n            textDivProperties,\n            isOffscreenCanvasSupported,\n            mustRotate = true,\n            mustRescale = true\n          } = _ref40;\n\n          if (mustRotate) {\n            (0, _display_utils.setLayerDimensions)(container, {\n              rotation: viewport.rotation\n            });\n          }\n\n          if (mustRescale) {\n            const ctx = getCtx(0, isOffscreenCanvasSupported);\n            const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n            const params = {\n              prevFontSize: null,\n              prevFontFamily: null,\n              div: null,\n              scale,\n              properties: null,\n              ctx\n            };\n\n            for (const div of textDivs) {\n              params.properties = textDivProperties.get(div);\n              params.div = div;\n              layout(params);\n            }\n          }\n        }\n        /***/\n\n      },\n      /* 27 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationEditorLayer = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _editor = __w_pdfjs_require__(4);\n\n        var _freetext = __w_pdfjs_require__(28);\n\n        var _ink = __w_pdfjs_require__(33);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _stamp = __w_pdfjs_require__(34);\n\n        class AnnotationEditorLayer {\n          #accessibilityManager;\n          #allowClick = false;\n          #annotationLayer = null;\n          #boundPointerup = this.pointerup.bind(this);\n          #boundPointerdown = this.pointerdown.bind(this);\n          #editors = new Map();\n          #hadPointerDown = false;\n          #isCleaningUp = false;\n          #isDisabling = false;\n          #uiManager;\n          static _initialized = false;\n\n          constructor(_ref41) {\n            let {\n              uiManager,\n              pageIndex,\n              div,\n              accessibilityManager,\n              annotationLayer,\n              viewport,\n              l10n\n            } = _ref41;\n            const editorTypes = [_freetext.FreeTextEditor, _ink.InkEditor, _stamp.StampEditor];\n\n            if (!AnnotationEditorLayer._initialized) {\n              AnnotationEditorLayer._initialized = true;\n\n              for (const editorType of editorTypes) {\n                editorType.initialize(l10n);\n              }\n            }\n\n            uiManager.registerEditorTypes(editorTypes);\n            this.#uiManager = uiManager;\n            this.pageIndex = pageIndex;\n            this.div = div;\n            this.#accessibilityManager = accessibilityManager;\n            this.#annotationLayer = annotationLayer;\n            this.viewport = viewport;\n            this.#uiManager.addLayer(this);\n          }\n\n          get isEmpty() {\n            return this.#editors.size === 0;\n          }\n\n          updateToolbar(mode) {\n            this.#uiManager.updateToolbar(mode);\n          }\n\n          updateMode() {\n            let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.#uiManager.getMode();\n            this.#cleanup();\n\n            if (mode === _util.AnnotationEditorType.INK) {\n              this.addInkEditorIfNeeded(false);\n              this.disableClick();\n            } else {\n              this.enableClick();\n            }\n\n            if (mode !== _util.AnnotationEditorType.NONE) {\n              this.div.classList.toggle(\"freeTextEditing\", mode === _util.AnnotationEditorType.FREETEXT);\n              this.div.classList.toggle(\"inkEditing\", mode === _util.AnnotationEditorType.INK);\n              this.div.classList.toggle(\"stampEditing\", mode === _util.AnnotationEditorType.STAMP);\n              this.div.hidden = false;\n            }\n          }\n\n          addInkEditorIfNeeded(isCommitting) {\n            if (!isCommitting && this.#uiManager.getMode() !== _util.AnnotationEditorType.INK) {\n              return;\n            }\n\n            if (!isCommitting) {\n              for (const editor of this.#editors.values()) {\n                if (editor.isEmpty()) {\n                  editor.setInBackground();\n                  return;\n                }\n              }\n            }\n\n            const editor = this.#createAndAddNewEditor({\n              offsetX: 0,\n              offsetY: 0\n            }, false);\n            editor.setInBackground();\n          }\n\n          setEditingState(isEditing) {\n            this.#uiManager.setEditingState(isEditing);\n          }\n\n          addCommands(params) {\n            this.#uiManager.addCommands(params);\n          }\n\n          enable() {\n            this.div.style.pointerEvents = \"auto\";\n            const annotationElementIds = new Set();\n\n            for (const editor of this.#editors.values()) {\n              editor.enableEditing();\n\n              if (editor.annotationElementId) {\n                annotationElementIds.add(editor.annotationElementId);\n              }\n            }\n\n            if (!this.#annotationLayer) {\n              return;\n            }\n\n            const editables = this.#annotationLayer.getEditableAnnotations();\n\n            for (const editable of editables) {\n              editable.hide();\n\n              if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {\n                continue;\n              }\n\n              if (annotationElementIds.has(editable.data.id)) {\n                continue;\n              }\n\n              const editor = this.deserialize(editable);\n\n              if (!editor) {\n                continue;\n              }\n\n              this.addOrRebuild(editor);\n              editor.enableEditing();\n            }\n          }\n\n          disable() {\n            this.#isDisabling = true;\n            this.div.style.pointerEvents = \"none\";\n            const hiddenAnnotationIds = new Set();\n\n            for (const editor of this.#editors.values()) {\n              editor.disableEditing();\n\n              if (!editor.annotationElementId || editor.serialize() !== null) {\n                hiddenAnnotationIds.add(editor.annotationElementId);\n                continue;\n              }\n\n              this.getEditableAnnotation(editor.annotationElementId)?.show();\n              editor.remove();\n            }\n\n            if (this.#annotationLayer) {\n              const editables = this.#annotationLayer.getEditableAnnotations();\n\n              for (const editable of editables) {\n                const {\n                  id\n                } = editable.data;\n\n                if (hiddenAnnotationIds.has(id) || this.#uiManager.isDeletedAnnotationElement(id)) {\n                  continue;\n                }\n\n                editable.show();\n              }\n            }\n\n            this.#cleanup();\n\n            if (this.isEmpty) {\n              this.div.hidden = true;\n            }\n\n            this.#isDisabling = false;\n          }\n\n          getEditableAnnotation(id) {\n            return this.#annotationLayer?.getEditableAnnotation(id) || null;\n          }\n\n          setActiveEditor(editor) {\n            const currentActive = this.#uiManager.getActive();\n\n            if (currentActive === editor) {\n              return;\n            }\n\n            this.#uiManager.setActiveEditor(editor);\n          }\n\n          enableClick() {\n            this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\n            this.div.addEventListener(\"pointerup\", this.#boundPointerup);\n          }\n\n          disableClick() {\n            this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\n            this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\n          }\n\n          attach(editor) {\n            this.#editors.set(editor.id, editor);\n            const {\n              annotationElementId\n            } = editor;\n\n            if (annotationElementId && this.#uiManager.isDeletedAnnotationElement(annotationElementId)) {\n              this.#uiManager.removeDeletedAnnotationElement(editor);\n            }\n          }\n\n          detach(editor) {\n            this.#editors.delete(editor.id);\n            this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n\n            if (!this.#isDisabling && editor.annotationElementId) {\n              this.#uiManager.addDeletedAnnotationElement(editor);\n            }\n          }\n\n          remove(editor) {\n            this.detach(editor);\n            this.#uiManager.removeEditor(editor);\n\n            if (editor.div.contains(document.activeElement)) {\n              setTimeout(() => {\n                this.#uiManager.focusMainContainer();\n              }, 0);\n            }\n\n            editor.div.remove();\n            editor.isAttachedToDOM = false;\n\n            if (!this.#isCleaningUp) {\n              this.addInkEditorIfNeeded(false);\n            }\n          }\n\n          changeParent(editor) {\n            if (editor.parent === this) {\n              return;\n            }\n\n            if (editor.annotationElementId) {\n              this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);\n\n              _editor.AnnotationEditor.deleteAnnotationElement(editor);\n\n              editor.annotationElementId = null;\n            }\n\n            this.attach(editor);\n            editor.parent?.detach(editor);\n            editor.setParent(this);\n\n            if (editor.div && editor.isAttachedToDOM) {\n              editor.div.remove();\n              this.div.append(editor.div);\n            }\n          }\n\n          add(editor) {\n            this.changeParent(editor);\n            this.#uiManager.addEditor(editor);\n            this.attach(editor);\n\n            if (!editor.isAttachedToDOM) {\n              const div = editor.render();\n              this.div.append(div);\n              editor.isAttachedToDOM = true;\n            }\n\n            editor.fixAndSetPosition();\n            editor.onceAdded();\n            this.#uiManager.addToAnnotationStorage(editor);\n          }\n\n          moveEditorInDOM(editor) {\n            if (!editor.isAttachedToDOM) {\n              return;\n            }\n\n            const {\n              activeElement\n            } = document;\n\n            if (editor.div.contains(activeElement)) {\n              editor._focusEventsAllowed = false;\n              setTimeout(() => {\n                if (!editor.div.contains(document.activeElement)) {\n                  editor.div.addEventListener(\"focusin\", () => {\n                    editor._focusEventsAllowed = true;\n                  }, {\n                    once: true\n                  });\n                  activeElement.focus();\n                } else {\n                  editor._focusEventsAllowed = true;\n                }\n              }, 0);\n            }\n\n            editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);\n          }\n\n          addOrRebuild(editor) {\n            if (editor.needsToBeRebuilt()) {\n              editor.rebuild();\n            } else {\n              this.add(editor);\n            }\n          }\n\n          addUndoableEditor(editor) {\n            const cmd = () => editor._uiManager.rebuild(editor);\n\n            const undo = () => {\n              editor.remove();\n            };\n\n            this.addCommands({\n              cmd,\n              undo,\n              mustExec: false\n            });\n          }\n\n          getNextId() {\n            return this.#uiManager.getId();\n          }\n\n          #createNewEditor(params) {\n            switch (this.#uiManager.getMode()) {\n              case _util.AnnotationEditorType.FREETEXT:\n                return new _freetext.FreeTextEditor(params);\n\n              case _util.AnnotationEditorType.INK:\n                return new _ink.InkEditor(params);\n\n              case _util.AnnotationEditorType.STAMP:\n                return new _stamp.StampEditor(params);\n            }\n\n            return null;\n          }\n\n          pasteEditor(mode, params) {\n            this.#uiManager.updateToolbar(mode);\n            this.#uiManager.updateMode(mode);\n            const {\n              offsetX,\n              offsetY\n            } = this.#getCenterPoint();\n            const id = this.getNextId();\n            const editor = this.#createNewEditor({\n              parent: this,\n              id,\n              x: offsetX,\n              y: offsetY,\n              uiManager: this.#uiManager,\n              isCentered: true,\n              ...params\n            });\n\n            if (editor) {\n              this.add(editor);\n            }\n          }\n\n          deserialize(data) {\n            switch (data.annotationType ?? data.annotationEditorType) {\n              case _util.AnnotationEditorType.FREETEXT:\n                return _freetext.FreeTextEditor.deserialize(data, this, this.#uiManager);\n\n              case _util.AnnotationEditorType.INK:\n                return _ink.InkEditor.deserialize(data, this, this.#uiManager);\n\n              case _util.AnnotationEditorType.STAMP:\n                return _stamp.StampEditor.deserialize(data, this, this.#uiManager);\n            }\n\n            return null;\n          }\n\n          #createAndAddNewEditor(event, isCentered) {\n            const id = this.getNextId();\n            const editor = this.#createNewEditor({\n              parent: this,\n              id,\n              x: event.offsetX,\n              y: event.offsetY,\n              uiManager: this.#uiManager,\n              isCentered\n            });\n\n            if (editor) {\n              this.add(editor);\n            }\n\n            return editor;\n          }\n\n          #getCenterPoint() {\n            const {\n              x,\n              y,\n              width,\n              height\n            } = this.div.getBoundingClientRect();\n            const tlX = Math.max(0, x);\n            const tlY = Math.max(0, y);\n            const brX = Math.min(window.innerWidth, x + width);\n            const brY = Math.min(window.innerHeight, y + height);\n            const centerX = (tlX + brX) / 2 - x;\n            const centerY = (tlY + brY) / 2 - y;\n            const [offsetX, offsetY] = this.viewport.rotation % 180 === 0 ? [centerX, centerY] : [centerY, centerX];\n            return {\n              offsetX,\n              offsetY\n            };\n          }\n\n          addNewEditor() {\n            this.#createAndAddNewEditor(this.#getCenterPoint(), true);\n          }\n\n          setSelected(editor) {\n            this.#uiManager.setSelected(editor);\n          }\n\n          toggleSelected(editor) {\n            this.#uiManager.toggleSelected(editor);\n          }\n\n          isSelected(editor) {\n            return this.#uiManager.isSelected(editor);\n          }\n\n          unselect(editor) {\n            this.#uiManager.unselect(editor);\n          }\n\n          pointerup(event) {\n            const {\n              isMac\n            } = _util.FeatureTest.platform;\n\n            if (event.button !== 0 || event.ctrlKey && isMac) {\n              return;\n            }\n\n            if (event.target !== this.div) {\n              return;\n            }\n\n            if (!this.#hadPointerDown) {\n              return;\n            }\n\n            this.#hadPointerDown = false;\n\n            if (!this.#allowClick) {\n              this.#allowClick = true;\n              return;\n            }\n\n            if (this.#uiManager.getMode() === _util.AnnotationEditorType.STAMP) {\n              this.#uiManager.unselectAll();\n              return;\n            }\n\n            this.#createAndAddNewEditor(event, false);\n          }\n\n          pointerdown(event) {\n            if (this.#hadPointerDown) {\n              this.#hadPointerDown = false;\n              return;\n            }\n\n            const {\n              isMac\n            } = _util.FeatureTest.platform;\n\n            if (event.button !== 0 || event.ctrlKey && isMac) {\n              return;\n            }\n\n            if (event.target !== this.div) {\n              return;\n            }\n\n            this.#hadPointerDown = true;\n            const editor = this.#uiManager.getActive();\n            this.#allowClick = !editor || editor.isEmpty();\n          }\n\n          findNewParent(editor, x, y) {\n            const layer = this.#uiManager.findParent(x, y);\n\n            if (layer === null || layer === this) {\n              return false;\n            }\n\n            layer.changeParent(editor);\n            return true;\n          }\n\n          destroy() {\n            if (this.#uiManager.getActive()?.parent === this) {\n              this.#uiManager.commitOrRemove();\n              this.#uiManager.setActiveEditor(null);\n            }\n\n            for (const editor of this.#editors.values()) {\n              this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n              editor.setParent(null);\n              editor.isAttachedToDOM = false;\n              editor.div.remove();\n            }\n\n            this.div = null;\n            this.#editors.clear();\n            this.#uiManager.removeLayer(this);\n          }\n\n          #cleanup() {\n            this.#isCleaningUp = true;\n\n            for (const editor of this.#editors.values()) {\n              if (editor.isEmpty()) {\n                editor.remove();\n              }\n            }\n\n            this.#isCleaningUp = false;\n          }\n\n          render(_ref42) {\n            let {\n              viewport\n            } = _ref42;\n            this.viewport = viewport;\n            (0, _display_utils.setLayerDimensions)(this.div, viewport);\n\n            for (const editor of this.#uiManager.getEditors(this.pageIndex)) {\n              this.add(editor);\n            }\n\n            this.updateMode();\n          }\n\n          update(_ref43) {\n            let {\n              viewport\n            } = _ref43;\n            this.#uiManager.commitOrRemove();\n            this.viewport = viewport;\n            (0, _display_utils.setLayerDimensions)(this.div, {\n              rotation: viewport.rotation\n            });\n            this.updateMode();\n          }\n\n          get pageDimensions() {\n            const {\n              pageWidth,\n              pageHeight\n            } = this.viewport.rawDims;\n            return [pageWidth, pageHeight];\n          }\n\n        }\n\n        exports.AnnotationEditorLayer = AnnotationEditorLayer;\n        /***/\n      },\n      /* 28 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FreeTextEditor = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _tools = __w_pdfjs_require__(5);\n\n        var _editor = __w_pdfjs_require__(4);\n\n        var _annotation_layer = __w_pdfjs_require__(29);\n\n        class FreeTextEditor extends _editor.AnnotationEditor {\n          #boundEditorDivBlur = this.editorDivBlur.bind(this);\n          #boundEditorDivFocus = this.editorDivFocus.bind(this);\n          #boundEditorDivInput = this.editorDivInput.bind(this);\n          #boundEditorDivKeydown = this.editorDivKeydown.bind(this);\n          #color;\n          #content = \"\";\n          #editorDivId = `${this.id}-editor`;\n          #fontSize;\n          #initialData = null;\n          static _freeTextDefaultContent = \"\";\n          static _internalPadding = 0;\n          static _defaultColor = null;\n          static _defaultFontSize = 10;\n\n          static get _keyboardManager() {\n            const proto = FreeTextEditor.prototype;\n\n            const arrowChecker = self => self.isEmpty();\n\n            const small = _tools.AnnotationEditorUIManager.TRANSLATE_SMALL;\n            const big = _tools.AnnotationEditorUIManager.TRANSLATE_BIG;\n            return (0, _util.shadow)(this, \"_keyboardManager\", new _tools.KeyboardManager([[[\"ctrl+s\", \"mac+meta+s\", \"ctrl+p\", \"mac+meta+p\"], proto.commitOrRemove, {\n              bubbles: true\n            }], [[\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"], proto.commitOrRemove], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto._translateEmpty, {\n              args: [-small, 0],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto._translateEmpty, {\n              args: [-big, 0],\n              checker: arrowChecker\n            }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto._translateEmpty, {\n              args: [small, 0],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto._translateEmpty, {\n              args: [big, 0],\n              checker: arrowChecker\n            }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto._translateEmpty, {\n              args: [0, -small],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto._translateEmpty, {\n              args: [0, -big],\n              checker: arrowChecker\n            }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto._translateEmpty, {\n              args: [0, small],\n              checker: arrowChecker\n            }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto._translateEmpty, {\n              args: [0, big],\n              checker: arrowChecker\n            }]]));\n          }\n\n          static _type = \"freetext\";\n\n          constructor(params) {\n            super({ ...params,\n              name: \"freeTextEditor\"\n            });\n            this.#color = params.color || FreeTextEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor;\n            this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\n          }\n\n          static initialize(l10n) {\n            _editor.AnnotationEditor.initialize(l10n, {\n              strings: [\"free_text2_default_content\", \"editor_free_text2_aria_label\"]\n            });\n\n            const style = getComputedStyle(document.documentElement);\n            this._internalPadding = parseFloat(style.getPropertyValue(\"--freetext-padding\"));\n          }\n\n          static updateDefaultParams(type, value) {\n            switch (type) {\n              case _util.AnnotationEditorParamsType.FREETEXT_SIZE:\n                FreeTextEditor._defaultFontSize = value;\n                break;\n\n              case _util.AnnotationEditorParamsType.FREETEXT_COLOR:\n                FreeTextEditor._defaultColor = value;\n                break;\n            }\n          }\n\n          updateParams(type, value) {\n            switch (type) {\n              case _util.AnnotationEditorParamsType.FREETEXT_SIZE:\n                this.#updateFontSize(value);\n                break;\n\n              case _util.AnnotationEditorParamsType.FREETEXT_COLOR:\n                this.#updateColor(value);\n                break;\n            }\n          }\n\n          static get defaultPropertiesToUpdate() {\n            return [[_util.AnnotationEditorParamsType.FREETEXT_SIZE, FreeTextEditor._defaultFontSize], [_util.AnnotationEditorParamsType.FREETEXT_COLOR, FreeTextEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor]];\n          }\n\n          get propertiesToUpdate() {\n            return [[_util.AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize], [_util.AnnotationEditorParamsType.FREETEXT_COLOR, this.#color]];\n          }\n\n          #updateFontSize(fontSize) {\n            const setFontsize = size => {\n              this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n              this.translate(0, -(size - this.#fontSize) * this.parentScale);\n              this.#fontSize = size;\n              this.#setEditorDimensions();\n            };\n\n            const savedFontsize = this.#fontSize;\n            this.addCommands({\n              cmd: () => {\n                setFontsize(fontSize);\n              },\n              undo: () => {\n                setFontsize(savedFontsize);\n              },\n              mustExec: true,\n              type: _util.AnnotationEditorParamsType.FREETEXT_SIZE,\n              overwriteIfSameType: true,\n              keepUndo: true\n            });\n          }\n\n          #updateColor(color) {\n            const savedColor = this.#color;\n            this.addCommands({\n              cmd: () => {\n                this.#color = this.editorDiv.style.color = color;\n              },\n              undo: () => {\n                this.#color = this.editorDiv.style.color = savedColor;\n              },\n              mustExec: true,\n              type: _util.AnnotationEditorParamsType.FREETEXT_COLOR,\n              overwriteIfSameType: true,\n              keepUndo: true\n            });\n          }\n\n          _translateEmpty(x, y) {\n            this._uiManager.translateSelectedEditors(x, y, true);\n          }\n\n          getInitialTranslation() {\n            const scale = this.parentScale;\n            return [-FreeTextEditor._internalPadding * scale, -(FreeTextEditor._internalPadding + this.#fontSize) * scale];\n          }\n\n          rebuild() {\n            if (!this.parent) {\n              return;\n            }\n\n            super.rebuild();\n\n            if (this.div === null) {\n              return;\n            }\n\n            if (!this.isAttachedToDOM) {\n              this.parent.add(this);\n            }\n          }\n\n          enableEditMode() {\n            if (this.isInEditMode()) {\n              return;\n            }\n\n            this.parent.setEditingState(false);\n            this.parent.updateToolbar(_util.AnnotationEditorType.FREETEXT);\n            super.enableEditMode();\n            this.overlayDiv.classList.remove(\"enabled\");\n            this.editorDiv.contentEditable = true;\n            this._isDraggable = false;\n            this.div.removeAttribute(\"aria-activedescendant\");\n            this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\n            this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\n            this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\n            this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\n          }\n\n          disableEditMode() {\n            if (!this.isInEditMode()) {\n              return;\n            }\n\n            this.parent.setEditingState(true);\n            super.disableEditMode();\n            this.overlayDiv.classList.add(\"enabled\");\n            this.editorDiv.contentEditable = false;\n            this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n            this._isDraggable = true;\n            this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\n            this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\n            this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\n            this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\n            this.div.focus({\n              preventScroll: true\n            });\n            this.isEditing = false;\n            this.parent.div.classList.add(\"freeTextEditing\");\n          }\n\n          focusin(event) {\n            if (!this._focusEventsAllowed) {\n              return;\n            }\n\n            super.focusin(event);\n\n            if (event.target !== this.editorDiv) {\n              this.editorDiv.focus();\n            }\n          }\n\n          onceAdded() {\n            if (this.width) {\n              this.#cheatInitialRect();\n              return;\n            }\n\n            this.enableEditMode();\n            this.editorDiv.focus();\n\n            if (this._initialOptions?.isCentered) {\n              this.center();\n            }\n\n            this._initialOptions = null;\n          }\n\n          isEmpty() {\n            return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n          }\n\n          remove() {\n            this.isEditing = false;\n\n            if (this.parent) {\n              this.parent.setEditingState(true);\n              this.parent.div.classList.add(\"freeTextEditing\");\n            }\n\n            super.remove();\n          }\n\n          #extractText() {\n            const divs = this.editorDiv.getElementsByTagName(\"div\");\n\n            if (divs.length === 0) {\n              return this.editorDiv.innerText;\n            }\n\n            const buffer = [];\n\n            for (const div of divs) {\n              buffer.push(div.innerText.replace(/\\r\\n?|\\n/, \"\"));\n            }\n\n            return buffer.join(\"\\n\");\n          }\n\n          #setEditorDimensions() {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            let rect;\n\n            if (this.isAttachedToDOM) {\n              rect = this.div.getBoundingClientRect();\n            } else {\n              const {\n                currentLayer,\n                div\n              } = this;\n              const savedDisplay = div.style.display;\n              div.style.display = \"hidden\";\n              currentLayer.div.append(this.div);\n              rect = div.getBoundingClientRect();\n              div.remove();\n              div.style.display = savedDisplay;\n            }\n\n            if (this.rotation % 180 === this.parentRotation % 180) {\n              this.width = rect.width / parentWidth;\n              this.height = rect.height / parentHeight;\n            } else {\n              this.width = rect.height / parentWidth;\n              this.height = rect.width / parentHeight;\n            }\n\n            this.fixAndSetPosition();\n          }\n\n          commit() {\n            if (!this.isInEditMode()) {\n              return;\n            }\n\n            super.commit();\n            this.disableEditMode();\n            const savedText = this.#content;\n            const newText = this.#content = this.#extractText().trimEnd();\n\n            if (savedText === newText) {\n              return;\n            }\n\n            const setText = text => {\n              this.#content = text;\n\n              if (!text) {\n                this.remove();\n                return;\n              }\n\n              this.#setContent();\n\n              this._uiManager.rebuild(this);\n\n              this.#setEditorDimensions();\n            };\n\n            this.addCommands({\n              cmd: () => {\n                setText(newText);\n              },\n              undo: () => {\n                setText(savedText);\n              },\n              mustExec: false\n            });\n            this.#setEditorDimensions();\n          }\n\n          shouldGetKeyboardEvents() {\n            return this.isInEditMode();\n          }\n\n          enterInEditMode() {\n            this.enableEditMode();\n            this.editorDiv.focus();\n          }\n\n          dblclick(event) {\n            this.enterInEditMode();\n          }\n\n          keydown(event) {\n            if (event.target === this.div && event.key === \"Enter\") {\n              this.enterInEditMode();\n              event.preventDefault();\n            }\n          }\n\n          editorDivKeydown(event) {\n            FreeTextEditor._keyboardManager.exec(this, event);\n          }\n\n          editorDivFocus(event) {\n            this.isEditing = true;\n          }\n\n          editorDivBlur(event) {\n            this.isEditing = false;\n          }\n\n          editorDivInput(event) {\n            this.parent.div.classList.toggle(\"freeTextEditing\", this.isEmpty());\n          }\n\n          disableEditing() {\n            this.editorDiv.setAttribute(\"role\", \"comment\");\n            this.editorDiv.removeAttribute(\"aria-multiline\");\n          }\n\n          enableEditing() {\n            this.editorDiv.setAttribute(\"role\", \"textbox\");\n            this.editorDiv.setAttribute(\"aria-multiline\", true);\n          }\n\n          render() {\n            if (this.div) {\n              return this.div;\n            }\n\n            let baseX, baseY;\n\n            if (this.width) {\n              baseX = this.x;\n              baseY = this.y;\n            }\n\n            super.render();\n            this.editorDiv = document.createElement(\"div\");\n            this.editorDiv.className = \"internal\";\n            this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n            this.enableEditing();\n\n            _editor.AnnotationEditor._l10nPromise.get(\"editor_free_text2_aria_label\").then(msg => this.editorDiv?.setAttribute(\"aria-label\", msg));\n\n            _editor.AnnotationEditor._l10nPromise.get(\"free_text2_default_content\").then(msg => this.editorDiv?.setAttribute(\"default-content\", msg));\n\n            this.editorDiv.contentEditable = true;\n            const {\n              style\n            } = this.editorDiv;\n            style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n            style.color = this.#color;\n            this.div.append(this.editorDiv);\n            this.overlayDiv = document.createElement(\"div\");\n            this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n            this.div.append(this.overlayDiv);\n            (0, _tools.bindEvents)(this, this.div, [\"dblclick\", \"keydown\"]);\n\n            if (this.width) {\n              const [parentWidth, parentHeight] = this.parentDimensions;\n\n              if (this.annotationElementId) {\n                const {\n                  position\n                } = this.#initialData;\n                let [tx, ty] = this.getInitialTranslation();\n                [tx, ty] = this.pageTranslationToScreen(tx, ty);\n                const [pageWidth, pageHeight] = this.pageDimensions;\n                const [pageX, pageY] = this.pageTranslation;\n                let posX, posY;\n\n                switch (this.rotation) {\n                  case 0:\n                    posX = baseX + (position[0] - pageX) / pageWidth;\n                    posY = baseY + this.height - (position[1] - pageY) / pageHeight;\n                    break;\n\n                  case 90:\n                    posX = baseX + (position[0] - pageX) / pageWidth;\n                    posY = baseY - (position[1] - pageY) / pageHeight;\n                    [tx, ty] = [ty, -tx];\n                    break;\n\n                  case 180:\n                    posX = baseX - this.width + (position[0] - pageX) / pageWidth;\n                    posY = baseY - (position[1] - pageY) / pageHeight;\n                    [tx, ty] = [-tx, -ty];\n                    break;\n\n                  case 270:\n                    posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;\n                    posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;\n                    [tx, ty] = [-ty, tx];\n                    break;\n                }\n\n                this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\n              } else {\n                this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n              }\n\n              this.#setContent();\n              this._isDraggable = true;\n              this.editorDiv.contentEditable = false;\n            } else {\n              this._isDraggable = false;\n              this.editorDiv.contentEditable = true;\n            }\n\n            return this.div;\n          }\n\n          #setContent() {\n            this.editorDiv.replaceChildren();\n\n            if (!this.#content) {\n              return;\n            }\n\n            for (const line of this.#content.split(\"\\n\")) {\n              const div = document.createElement(\"div\");\n              div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\n              this.editorDiv.append(div);\n            }\n          }\n\n          get contentDiv() {\n            return this.editorDiv;\n          }\n\n          static deserialize(data, parent, uiManager) {\n            let initialData = null;\n\n            if (data instanceof _annotation_layer.FreeTextAnnotationElement) {\n              const {\n                data: {\n                  defaultAppearanceData: {\n                    fontSize,\n                    fontColor\n                  },\n                  rect,\n                  rotation,\n                  id\n                },\n                textContent,\n                textPosition,\n                parent: {\n                  page: {\n                    pageNumber\n                  }\n                }\n              } = data;\n\n              if (!textContent || textContent.length === 0) {\n                return null;\n              }\n\n              initialData = data = {\n                annotationType: _util.AnnotationEditorType.FREETEXT,\n                color: Array.from(fontColor),\n                fontSize,\n                value: textContent.join(\"\\n\"),\n                position: textPosition,\n                pageIndex: pageNumber - 1,\n                rect,\n                rotation,\n                id,\n                deleted: false\n              };\n            }\n\n            const editor = super.deserialize(data, parent, uiManager);\n            editor.#fontSize = data.fontSize;\n            editor.#color = _util.Util.makeHexColor(...data.color);\n            editor.#content = data.value;\n            editor.annotationElementId = data.id || null;\n            editor.#initialData = initialData;\n            return editor;\n          }\n\n          serialize() {\n            let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (this.isEmpty()) {\n              return null;\n            }\n\n            if (this.deleted) {\n              return {\n                pageIndex: this.pageIndex,\n                id: this.annotationElementId,\n                deleted: true\n              };\n            }\n\n            const padding = FreeTextEditor._internalPadding * this.parentScale;\n            const rect = this.getRect(padding, padding);\n\n            const color = _editor.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#color);\n\n            const serialized = {\n              annotationType: _util.AnnotationEditorType.FREETEXT,\n              color,\n              fontSize: this.#fontSize,\n              value: this.#content,\n              pageIndex: this.pageIndex,\n              rect,\n              rotation: this.rotation,\n              structTreeParentId: this._structTreeParentId\n            };\n\n            if (isForCopying) {\n              return serialized;\n            }\n\n            if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\n              return null;\n            }\n\n            serialized.id = this.annotationElementId;\n            return serialized;\n          }\n\n          #hasElementChanged(serialized) {\n            const {\n              value,\n              fontSize,\n              color,\n              rect,\n              pageIndex\n            } = this.#initialData;\n            return serialized.value !== value || serialized.fontSize !== fontSize || serialized.rect.some((x, i) => Math.abs(x - rect[i]) >= 1) || serialized.color.some((c, i) => c !== color[i]) || serialized.pageIndex !== pageIndex;\n          }\n\n          #cheatInitialRect() {\n            let delayed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.annotationElementId) {\n              return;\n            }\n\n            this.#setEditorDimensions();\n\n            if (!delayed && (this.width === 0 || this.height === 0)) {\n              setTimeout(() => this.#cheatInitialRect(true), 0);\n              return;\n            }\n\n            const padding = FreeTextEditor._internalPadding * this.parentScale;\n            this.#initialData.rect = this.getRect(padding, padding);\n          }\n\n        }\n\n        exports.FreeTextEditor = FreeTextEditor;\n        /***/\n      },\n      /* 29 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StampAnnotationElement = exports.InkAnnotationElement = exports.FreeTextAnnotationElement = exports.AnnotationLayer = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _annotation_storage = __w_pdfjs_require__(3);\n\n        var _scripting_utils = __w_pdfjs_require__(30);\n\n        var _displayL10n_utils = __w_pdfjs_require__(31);\n\n        var _xfa_layer = __w_pdfjs_require__(32);\n\n        const DEFAULT_TAB_INDEX = 1000;\n        const DEFAULT_FONT_SIZE = 9;\n        const GetElementsByNameSet = new WeakSet();\n\n        function getRectDims(rect) {\n          return {\n            width: rect[2] - rect[0],\n            height: rect[3] - rect[1]\n          };\n        }\n\n        class AnnotationElementFactory {\n          static create(parameters) {\n            const subtype = parameters.data.annotationType;\n\n            switch (subtype) {\n              case _util.AnnotationType.LINK:\n                return new LinkAnnotationElement(parameters);\n\n              case _util.AnnotationType.TEXT:\n                return new TextAnnotationElement(parameters);\n\n              case _util.AnnotationType.WIDGET:\n                const fieldType = parameters.data.fieldType;\n\n                switch (fieldType) {\n                  case \"Tx\":\n                    return new TextWidgetAnnotationElement(parameters);\n\n                  case \"Btn\":\n                    if (parameters.data.radioButton) {\n                      return new RadioButtonWidgetAnnotationElement(parameters);\n                    } else if (parameters.data.checkBox) {\n                      return new CheckboxWidgetAnnotationElement(parameters);\n                    }\n\n                    return new PushButtonWidgetAnnotationElement(parameters);\n\n                  case \"Ch\":\n                    return new ChoiceWidgetAnnotationElement(parameters);\n\n                  case \"Sig\":\n                    return new SignatureWidgetAnnotationElement(parameters);\n                }\n\n                return new WidgetAnnotationElement(parameters);\n\n              case _util.AnnotationType.POPUP:\n                return new PopupAnnotationElement(parameters);\n\n              case _util.AnnotationType.FREETEXT:\n                return new FreeTextAnnotationElement(parameters);\n\n              case _util.AnnotationType.LINE:\n                return new LineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUARE:\n                return new SquareAnnotationElement(parameters);\n\n              case _util.AnnotationType.CIRCLE:\n                return new CircleAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYLINE:\n                return new PolylineAnnotationElement(parameters);\n\n              case _util.AnnotationType.CARET:\n                return new CaretAnnotationElement(parameters);\n\n              case _util.AnnotationType.INK:\n                return new InkAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYGON:\n                return new PolygonAnnotationElement(parameters);\n\n              case _util.AnnotationType.HIGHLIGHT:\n                return new HighlightAnnotationElement(parameters);\n\n              case _util.AnnotationType.UNDERLINE:\n                return new UnderlineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUIGGLY:\n                return new SquigglyAnnotationElement(parameters);\n\n              case _util.AnnotationType.STRIKEOUT:\n                return new StrikeOutAnnotationElement(parameters);\n\n              case _util.AnnotationType.STAMP:\n                return new StampAnnotationElement(parameters);\n\n              case _util.AnnotationType.FILEATTACHMENT:\n                return new FileAttachmentAnnotationElement(parameters);\n\n              default:\n                return new AnnotationElement(parameters);\n            }\n          }\n\n        }\n\n        class AnnotationElement {\n          #hasBorder = false;\n\n          constructor(parameters) {\n            let {\n              isRenderable = false,\n              ignoreBorder = false,\n              createQuadrilaterals = false\n            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.isRenderable = isRenderable;\n            this.data = parameters.data;\n            this.layer = parameters.layer;\n            this.linkService = parameters.linkService;\n            this.downloadManager = parameters.downloadManager;\n            this.imageResourcesPath = parameters.imageResourcesPath;\n            this.renderForms = parameters.renderForms;\n            this.svgFactory = parameters.svgFactory;\n            this.annotationStorage = parameters.annotationStorage;\n            this.enableScripting = parameters.enableScripting;\n            this.hasJSActions = parameters.hasJSActions;\n            this._fieldObjects = parameters.fieldObjects;\n            this.parent = parameters.parent;\n\n            if (isRenderable) {\n              this.container = this._createContainer(ignoreBorder);\n            }\n\n            if (createQuadrilaterals) {\n              this._createQuadrilaterals();\n            }\n          }\n\n          static _hasPopupData(_ref44) {\n            let {\n              titleObj,\n              contentsObj,\n              richText\n            } = _ref44;\n            return !!(titleObj?.str || contentsObj?.str || richText?.str);\n          }\n\n          get hasPopupData() {\n            return AnnotationElement._hasPopupData(this.data);\n          }\n\n          _createContainer(ignoreBorder) {\n            const {\n              data,\n              parent: {\n                page,\n                viewport\n              }\n            } = this;\n            const container = document.createElement(\"section\");\n            container.setAttribute(\"data-annotation-id\", data.id);\n\n            if (!(this instanceof WidgetAnnotationElement)) {\n              container.tabIndex = DEFAULT_TAB_INDEX;\n            }\n\n            container.style.zIndex = this.parent.zIndex++;\n\n            if (this.data.popupRef) {\n              container.setAttribute(\"aria-haspopup\", \"dialog\");\n            }\n\n            if (data.noRotate) {\n              container.classList.add(\"norotate\");\n            }\n\n            const {\n              pageWidth,\n              pageHeight,\n              pageX,\n              pageY\n            } = viewport.rawDims;\n\n            if (!data.rect || this instanceof PopupAnnotationElement) {\n              const {\n                rotation\n              } = data;\n\n              if (!data.hasOwnCanvas && rotation !== 0) {\n                this.setRotation(rotation, container);\n              }\n\n              return container;\n            }\n\n            const {\n              width,\n              height\n            } = getRectDims(data.rect);\n\n            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n            if (!ignoreBorder && data.borderStyle.width > 0) {\n              container.style.borderWidth = `${data.borderStyle.width}px`;\n              const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n              const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n              if (horizontalRadius > 0 || verticalRadius > 0) {\n                const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n                container.style.borderRadius = radius;\n              } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n                const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n                container.style.borderRadius = radius;\n              }\n\n              switch (data.borderStyle.style) {\n                case _util.AnnotationBorderStyleType.SOLID:\n                  container.style.borderStyle = \"solid\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.DASHED:\n                  container.style.borderStyle = \"dashed\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.BEVELED:\n                  (0, _util.warn)(\"Unimplemented border style: beveled\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.INSET:\n                  (0, _util.warn)(\"Unimplemented border style: inset\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.UNDERLINE:\n                  container.style.borderBottomStyle = \"solid\";\n                  break;\n\n                default:\n                  break;\n              }\n\n              const borderColor = data.borderColor || null;\n\n              if (borderColor) {\n                this.#hasBorder = true;\n                container.style.borderColor = _util.Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);\n              } else {\n                container.style.borderWidth = 0;\n              }\n            }\n\n            container.style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\n            container.style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;\n            const {\n              rotation\n            } = data;\n\n            if (data.hasOwnCanvas || rotation === 0) {\n              container.style.width = `${100 * width / pageWidth}%`;\n              container.style.height = `${100 * height / pageHeight}%`;\n            } else {\n              this.setRotation(rotation, container);\n            }\n\n            return container;\n          }\n\n          setRotation(angle) {\n            let container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;\n\n            if (!this.data.rect) {\n              return;\n            }\n\n            const {\n              pageWidth,\n              pageHeight\n            } = this.parent.viewport.rawDims;\n            const {\n              width,\n              height\n            } = getRectDims(this.data.rect);\n            let elementWidth, elementHeight;\n\n            if (angle % 180 === 0) {\n              elementWidth = 100 * width / pageWidth;\n              elementHeight = 100 * height / pageHeight;\n            } else {\n              elementWidth = 100 * height / pageWidth;\n              elementHeight = 100 * width / pageHeight;\n            }\n\n            container.style.width = `${elementWidth}%`;\n            container.style.height = `${elementHeight}%`;\n            container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n          }\n\n          get _commonActions() {\n            const setColor = (jsName, styleName, event) => {\n              const color = event.detail[jsName];\n              const colorType = color[0];\n              const colorArray = color.slice(1);\n              event.target.style[styleName] = _scripting_utils.ColorConverters[`${colorType}_HTML`](colorArray);\n              this.annotationStorage.setValue(this.data.id, {\n                [styleName]: _scripting_utils.ColorConverters[`${colorType}_rgb`](colorArray)\n              });\n            };\n\n            return (0, _util.shadow)(this, \"_commonActions\", {\n              display: event => {\n                const {\n                  display\n                } = event.detail;\n                const hidden = display % 2 === 1;\n                this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  noView: hidden,\n                  noPrint: display === 1 || display === 2\n                });\n              },\n              print: event => {\n                this.annotationStorage.setValue(this.data.id, {\n                  noPrint: !event.detail.print\n                });\n              },\n              hidden: event => {\n                const {\n                  hidden\n                } = event.detail;\n                this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  noPrint: hidden,\n                  noView: hidden\n                });\n              },\n              focus: event => {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n              userName: event => {\n                event.target.title = event.detail.userName;\n              },\n              readonly: event => {\n                event.target.disabled = event.detail.readonly;\n              },\n              required: event => {\n                this._setRequired(event.target, event.detail.required);\n              },\n              bgColor: event => {\n                setColor(\"bgColor\", \"backgroundColor\", event);\n              },\n              fillColor: event => {\n                setColor(\"fillColor\", \"backgroundColor\", event);\n              },\n              fgColor: event => {\n                setColor(\"fgColor\", \"color\", event);\n              },\n              textColor: event => {\n                setColor(\"textColor\", \"color\", event);\n              },\n              borderColor: event => {\n                setColor(\"borderColor\", \"borderColor\", event);\n              },\n              strokeColor: event => {\n                setColor(\"strokeColor\", \"borderColor\", event);\n              },\n              rotation: event => {\n                const angle = event.detail.rotation;\n                this.setRotation(angle);\n                this.annotationStorage.setValue(this.data.id, {\n                  rotation: angle\n                });\n              }\n            });\n          }\n\n          _dispatchEventFromSandbox(actions, jsEvent) {\n            const commonActions = this._commonActions;\n\n            for (const name of Object.keys(jsEvent.detail)) {\n              const action = actions[name] || commonActions[name];\n              action?.(jsEvent);\n            }\n          }\n\n          _setDefaultPropertiesFromJS(element) {\n            if (!this.enableScripting) {\n              return;\n            }\n\n            const storedData = this.annotationStorage.getRawValue(this.data.id);\n\n            if (!storedData) {\n              return;\n            }\n\n            const commonActions = this._commonActions;\n\n            for (const [actionName, detail] of Object.entries(storedData)) {\n              const action = commonActions[actionName];\n\n              if (action) {\n                const eventProxy = {\n                  detail: {\n                    [actionName]: detail\n                  },\n                  target: element\n                };\n                action(eventProxy);\n                delete storedData[actionName];\n              }\n            }\n          }\n\n          _createQuadrilaterals() {\n            if (!this.container) {\n              return;\n            }\n\n            const {\n              quadPoints\n            } = this.data;\n\n            if (!quadPoints) {\n              return;\n            }\n\n            const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect;\n\n            if (quadPoints.length === 1) {\n              const [, {\n                x: trX,\n                y: trY\n              }, {\n                x: blX,\n                y: blY\n              }] = quadPoints[0];\n\n              if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {\n                return;\n              }\n            }\n\n            const {\n              style\n            } = this.container;\n            let svgBuffer;\n\n            if (this.#hasBorder) {\n              const {\n                borderColor,\n                borderWidth\n              } = style;\n              style.borderWidth = 0;\n              svgBuffer = [\"url('data:image/svg+xml;utf8,\", `<svg xmlns=\"http://www.w3.org/2000/svg\"`, ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`, `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`];\n              this.container.classList.add(\"hasBorder\");\n            }\n\n            const width = rectTrX - rectBlX;\n            const height = rectTrY - rectBlY;\n            const {\n              svgFactory\n            } = this;\n            const svg = svgFactory.createElement(\"svg\");\n            svg.classList.add(\"quadrilateralsContainer\");\n            svg.setAttribute(\"width\", 0);\n            svg.setAttribute(\"height\", 0);\n            const defs = svgFactory.createElement(\"defs\");\n            svg.append(defs);\n            const clipPath = svgFactory.createElement(\"clipPath\");\n            const id = `clippath_${this.data.id}`;\n            clipPath.setAttribute(\"id\", id);\n            clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n            defs.append(clipPath);\n\n            for (const [, {\n              x: trX,\n              y: trY\n            }, {\n              x: blX,\n              y: blY\n            }] of quadPoints) {\n              const rect = svgFactory.createElement(\"rect\");\n              const x = (blX - rectBlX) / width;\n              const y = (rectTrY - trY) / height;\n              const rectWidth = (trX - blX) / width;\n              const rectHeight = (trY - blY) / height;\n              rect.setAttribute(\"x\", x);\n              rect.setAttribute(\"y\", y);\n              rect.setAttribute(\"width\", rectWidth);\n              rect.setAttribute(\"height\", rectHeight);\n              clipPath.append(rect);\n              svgBuffer?.push(`<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`);\n            }\n\n            if (this.#hasBorder) {\n              svgBuffer.push(`</g></svg>')`);\n              style.backgroundImage = svgBuffer.join(\"\");\n            }\n\n            this.container.append(svg);\n            this.container.style.clipPath = `url(#${id})`;\n          }\n\n          _createPopup() {\n            const {\n              container,\n              data\n            } = this;\n            container.setAttribute(\"aria-haspopup\", \"dialog\");\n            const popup = new PopupAnnotationElement({\n              data: {\n                color: data.color,\n                titleObj: data.titleObj,\n                modificationDate: data.modificationDate,\n                contentsObj: data.contentsObj,\n                richText: data.richText,\n                parentRect: data.rect,\n                borderStyle: 0,\n                id: `popup_${data.id}`,\n                rotation: data.rotation\n              },\n              parent: this.parent,\n              elements: [this]\n            });\n            this.parent.div.append(popup.render());\n          }\n\n          render() {\n            (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n          }\n\n          _getElementsByName(name) {\n            let skipId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const fields = [];\n\n            if (this._fieldObjects) {\n              const fieldObj = this._fieldObjects[name];\n\n              if (fieldObj) {\n                for (const {\n                  page,\n                  id,\n                  exportValues\n                } of fieldObj) {\n                  if (page === -1) {\n                    continue;\n                  }\n\n                  if (id === skipId) {\n                    continue;\n                  }\n\n                  const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n                  const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n\n                  if (domElement && !GetElementsByNameSet.has(domElement)) {\n                    (0, _util.warn)(`_getElementsByName - element not allowed: ${id}`);\n                    continue;\n                  }\n\n                  fields.push({\n                    id,\n                    exportValue,\n                    domElement\n                  });\n                }\n              }\n\n              return fields;\n            }\n\n            for (const domElement of document.getElementsByName(name)) {\n              const {\n                exportValue\n              } = domElement;\n              const id = domElement.getAttribute(\"data-element-id\");\n\n              if (id === skipId) {\n                continue;\n              }\n\n              if (!GetElementsByNameSet.has(domElement)) {\n                continue;\n              }\n\n              fields.push({\n                id,\n                exportValue,\n                domElement\n              });\n            }\n\n            return fields;\n          }\n\n          show() {\n            if (this.container) {\n              this.container.hidden = false;\n            }\n\n            this.popup?.maybeShow();\n          }\n\n          hide() {\n            if (this.container) {\n              this.container.hidden = true;\n            }\n\n            this.popup?.forceHide();\n          }\n\n          getElementsToTriggerPopup() {\n            return this.container;\n          }\n\n          addHighlightArea() {\n            const triggers = this.getElementsToTriggerPopup();\n\n            if (Array.isArray(triggers)) {\n              for (const element of triggers) {\n                element.classList.add(\"highlightArea\");\n              }\n            } else {\n              triggers.classList.add(\"highlightArea\");\n            }\n          }\n\n          _editOnDoubleClick() {\n            const {\n              annotationEditorType: mode,\n              data: {\n                id: editId\n              }\n            } = this;\n            this.container.addEventListener(\"dblclick\", () => {\n              this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\n                source: this,\n                mode,\n                editId\n              });\n            });\n          }\n\n        }\n\n        class LinkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: !!options?.ignoreBorder,\n              createQuadrilaterals: true\n            });\n            this.isTooltipOnly = parameters.data.isTooltipOnly;\n          }\n\n          render() {\n            const {\n              data,\n              linkService\n            } = this;\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"data-element-id\", data.id);\n            let isBound = false;\n\n            if (data.url) {\n              linkService.addLinkAttributes(link, data.url, data.newWindow);\n              isBound = true;\n            } else if (data.action) {\n              this._bindNamedAction(link, data.action);\n\n              isBound = true;\n            } else if (data.attachment) {\n              this._bindAttachment(link, data.attachment);\n\n              isBound = true;\n            } else if (data.setOCGState) {\n              this.#bindSetOCGState(link, data.setOCGState);\n              isBound = true;\n            } else if (data.dest) {\n              this._bindLink(link, data.dest);\n\n              isBound = true;\n            } else {\n              if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n                this._bindJSAction(link, data);\n\n                isBound = true;\n              }\n\n              if (data.resetForm) {\n                this._bindResetFormAction(link, data.resetForm);\n\n                isBound = true;\n              } else if (this.isTooltipOnly && !isBound) {\n                this._bindLink(link, \"\");\n\n                isBound = true;\n              }\n            }\n\n            this.container.classList.add(\"linkAnnotation\");\n\n            if (isBound) {\n              this.container.append(link);\n            }\n\n            return this.container;\n          }\n\n          #setInternalLink() {\n            this.container.setAttribute(\"data-internal-link\", \"\");\n          }\n\n          _bindLink(link, destination) {\n            link.href = this.linkService.getDestinationHash(destination);\n\n            link.onclick = () => {\n              if (destination) {\n                this.linkService.goToDestination(destination);\n              }\n\n              return false;\n            };\n\n            if (destination || destination === \"\") {\n              this.#setInternalLink();\n            }\n          }\n\n          _bindNamedAction(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeNamedAction(action);\n              return false;\n            };\n\n            this.#setInternalLink();\n          }\n\n          _bindAttachment(link, attachment) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.downloadManager?.openOrDownloadData(this.container, attachment.content, attachment.filename);\n              return false;\n            };\n\n            this.#setInternalLink();\n          }\n\n          #bindSetOCGState(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeSetOCGState(action);\n              return false;\n            };\n\n            this.#setInternalLink();\n          }\n\n          _bindJSAction(link, data) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n            const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n            for (const name of Object.keys(data.actions)) {\n              const jsName = map.get(name);\n\n              if (!jsName) {\n                continue;\n              }\n\n              link[jsName] = () => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: data.id,\n                    name\n                  }\n                });\n                return false;\n              };\n            }\n\n            if (!link.onclick) {\n              link.onclick = () => false;\n            }\n\n            this.#setInternalLink();\n          }\n\n          _bindResetFormAction(link, resetForm) {\n            const otherClickAction = link.onclick;\n\n            if (!otherClickAction) {\n              link.href = this.linkService.getAnchorUrl(\"\");\n            }\n\n            this.#setInternalLink();\n\n            if (!this._fieldObjects) {\n              (0, _util.warn)(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n\n              if (!otherClickAction) {\n                link.onclick = () => false;\n              }\n\n              return;\n            }\n\n            link.onclick = () => {\n              otherClickAction?.();\n              const {\n                fields: resetFormFields,\n                refs: resetFormRefs,\n                include\n              } = resetForm;\n              const allFields = [];\n\n              if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n                const fieldIds = new Set(resetFormRefs);\n\n                for (const fieldName of resetFormFields) {\n                  const fields = this._fieldObjects[fieldName] || [];\n\n                  for (const {\n                    id\n                  } of fields) {\n                    fieldIds.add(id);\n                  }\n                }\n\n                for (const fields of Object.values(this._fieldObjects)) {\n                  for (const field of fields) {\n                    if (fieldIds.has(field.id) === include) {\n                      allFields.push(field);\n                    }\n                  }\n                }\n              } else {\n                for (const fields of Object.values(this._fieldObjects)) {\n                  allFields.push(...fields);\n                }\n              }\n\n              const storage = this.annotationStorage;\n              const allIds = [];\n\n              for (const field of allFields) {\n                const {\n                  id\n                } = field;\n                allIds.push(id);\n\n                switch (field.type) {\n                  case \"text\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  case \"checkbox\":\n                  case \"radiobutton\":\n                    {\n                      const value = field.defaultValue === field.exportValues;\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  case \"combobox\":\n                  case \"listbox\":\n                    {\n                      const value = field.defaultValue || \"\";\n                      storage.setValue(id, {\n                        value\n                      });\n                      break;\n                    }\n\n                  default:\n                    continue;\n                }\n\n                const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n\n                if (!domElement) {\n                  continue;\n                } else if (!GetElementsByNameSet.has(domElement)) {\n                  (0, _util.warn)(`_bindResetFormAction - element not allowed: ${id}`);\n                  continue;\n                }\n\n                domElement.dispatchEvent(new Event(\"resetform\"));\n              }\n\n              if (this.enableScripting) {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: \"app\",\n                    ids: allIds,\n                    name: \"ResetForm\"\n                  }\n                });\n              }\n\n              return false;\n            };\n          }\n\n        }\n\n        class TextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"textAnnotation\");\n            const image = document.createElement(\"img\");\n            image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n            image.alt = \"[{{type}} Annotation]\";\n            image.dataset.l10nId = \"text_annotation_type\";\n            image.dataset.l10nArgs = JSON.stringify({\n              type: this.data.name\n            });\n\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            this.container.append(image);\n            return this.container;\n          }\n\n        }\n\n        class WidgetAnnotationElement extends AnnotationElement {\n          render() {\n            if (this.data.alternativeText) {\n              this.container.title = this.data.alternativeText;\n            }\n\n            return this.container;\n          }\n\n          showElementAndHideCanvas(element) {\n            if (this.data.hasOwnCanvas) {\n              if (element.previousSibling?.nodeName === \"CANVAS\") {\n                element.previousSibling.hidden = true;\n              }\n\n              element.hidden = false;\n            }\n          }\n\n          _getKeyModifier(event) {\n            const {\n              isWin,\n              isMac\n            } = _util.FeatureTest.platform;\n            return isWin && event.ctrlKey || isMac && event.metaKey;\n          }\n\n          _setEventListener(element, elementData, baseName, eventName, valueGetter) {\n            if (baseName.includes(\"mouse\")) {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event),\n                    shift: event.shiftKey,\n                    modifier: this._getKeyModifier(event)\n                  }\n                });\n              });\n            } else {\n              element.addEventListener(baseName, event => {\n                if (baseName === \"blur\") {\n                  if (!elementData.focused || !event.relatedTarget) {\n                    return;\n                  }\n\n                  elementData.focused = false;\n                } else if (baseName === \"focus\") {\n                  if (elementData.focused) {\n                    return;\n                  }\n\n                  elementData.focused = true;\n                }\n\n                if (!valueGetter) {\n                  return;\n                }\n\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event)\n                  }\n                });\n              });\n            }\n          }\n\n          _setEventListeners(element, elementData, names, getter) {\n            for (const [baseName, eventName] of names) {\n              if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n                if (eventName === \"Focus\" || eventName === \"Blur\") {\n                  elementData ||= {\n                    focused: false\n                  };\n                }\n\n                this._setEventListener(element, elementData, baseName, eventName, getter);\n\n                if (eventName === \"Focus\" && !this.data.actions?.Blur) {\n                  this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\n                } else if (eventName === \"Blur\" && !this.data.actions?.Focus) {\n                  this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\n                }\n              }\n            }\n          }\n\n          _setBackgroundColor(element) {\n            const color = this.data.backgroundColor || null;\n            element.style.backgroundColor = color === null ? \"transparent\" : _util.Util.makeHexColor(color[0], color[1], color[2]);\n          }\n\n          _setTextStyle(element) {\n            const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n            const {\n              fontColor\n            } = this.data.defaultAppearanceData;\n            const fontSize = this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;\n            const style = element.style;\n            let computedFontSize;\n            const BORDER_SIZE = 2;\n\n            const roundToOneDecimal = x => Math.round(10 * x) / 10;\n\n            if (this.data.multiLine) {\n              const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n              const numberOfLines = Math.round(height / (_util.LINE_FACTOR * fontSize)) || 1;\n              const lineHeight = height / numberOfLines;\n              computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / _util.LINE_FACTOR));\n            } else {\n              const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n              computedFontSize = Math.min(fontSize, roundToOneDecimal(height / _util.LINE_FACTOR));\n            }\n\n            style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n            if (this.data.textAlignment !== null) {\n              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n            }\n          }\n\n          _setRequired(element, isRequired) {\n            if (isRequired) {\n              element.setAttribute(\"required\", true);\n            } else {\n              element.removeAttribute(\"required\");\n            }\n\n            element.setAttribute(\"aria-required\", isRequired);\n          }\n\n        }\n\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            const isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          setPropertyOnSiblings(base, key, value, keyInStorage) {\n            const storage = this.annotationStorage;\n\n            for (const element of this._getElementsByName(base.name, base.id)) {\n              if (element.domElement) {\n                element.domElement[key] = value;\n              }\n\n              storage.setValue(element.id, {\n                [keyInStorage]: value\n              });\n            }\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            this.container.classList.add(\"textWidgetAnnotation\");\n            let element = null;\n\n            if (this.renderForms) {\n              const storedData = storage.getValue(id, {\n                value: this.data.fieldValue\n              });\n              let textContent = storedData.value || \"\";\n              const maxLen = storage.getValue(id, {\n                charLimit: this.data.maxLen\n              }).charLimit;\n\n              if (maxLen && textContent.length > maxLen) {\n                textContent = textContent.slice(0, maxLen);\n              }\n\n              let fieldFormattedValues = storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n\n              if (fieldFormattedValues && this.data.comb) {\n                fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n              }\n\n              const elementData = {\n                userValue: textContent,\n                formattedValue: fieldFormattedValues,\n                lastCommittedValue: null,\n                commitKey: 1,\n                focused: false\n              };\n\n              if (this.data.multiLine) {\n                element = document.createElement(\"textarea\");\n                element.textContent = fieldFormattedValues ?? textContent;\n\n                if (this.data.doNotScroll) {\n                  element.style.overflowY = \"hidden\";\n                }\n              } else {\n                element = document.createElement(\"input\");\n                element.type = \"text\";\n                element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\n\n                if (this.data.doNotScroll) {\n                  element.style.overflowX = \"hidden\";\n                }\n              }\n\n              if (this.data.hasOwnCanvas) {\n                element.hidden = true;\n              }\n\n              GetElementsByNameSet.add(element);\n              element.setAttribute(\"data-element-id\", id);\n              element.disabled = this.data.readOnly;\n              element.name = this.data.fieldName;\n              element.tabIndex = DEFAULT_TAB_INDEX;\n\n              this._setRequired(element, this.data.required);\n\n              if (maxLen) {\n                element.maxLength = maxLen;\n              }\n\n              element.addEventListener(\"input\", event => {\n                storage.setValue(id, {\n                  value: event.target.value\n                });\n                this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n                elementData.formattedValue = null;\n              });\n              element.addEventListener(\"resetform\", event => {\n                const defaultValue = this.data.defaultFieldValue ?? \"\";\n                element.value = elementData.userValue = defaultValue;\n                elementData.formattedValue = null;\n              });\n\n              let blurListener = event => {\n                const {\n                  formattedValue\n                } = elementData;\n\n                if (formattedValue !== null && formattedValue !== undefined) {\n                  event.target.value = formattedValue;\n                }\n\n                event.target.scrollLeft = 0;\n              };\n\n              if (this.enableScripting && this.hasJSActions) {\n                element.addEventListener(\"focus\", event => {\n                  if (elementData.focused) {\n                    return;\n                  }\n\n                  const {\n                    target\n                  } = event;\n\n                  if (elementData.userValue) {\n                    target.value = elementData.userValue;\n                  }\n\n                  elementData.lastCommittedValue = target.value;\n                  elementData.commitKey = 1;\n                  elementData.focused = true;\n                });\n                element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                  this.showElementAndHideCanvas(jsEvent.target);\n                  const actions = {\n                    value(event) {\n                      elementData.userValue = event.detail.value ?? \"\";\n                      storage.setValue(id, {\n                        value: elementData.userValue.toString()\n                      });\n                      event.target.value = elementData.userValue;\n                    },\n\n                    formattedValue(event) {\n                      const {\n                        formattedValue\n                      } = event.detail;\n                      elementData.formattedValue = formattedValue;\n\n                      if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {\n                        event.target.value = formattedValue;\n                      }\n\n                      storage.setValue(id, {\n                        formattedValue\n                      });\n                    },\n\n                    selRange(event) {\n                      event.target.setSelectionRange(...event.detail.selRange);\n                    },\n\n                    charLimit: event => {\n                      const {\n                        charLimit\n                      } = event.detail;\n                      const {\n                        target\n                      } = event;\n\n                      if (charLimit === 0) {\n                        target.removeAttribute(\"maxLength\");\n                        return;\n                      }\n\n                      target.setAttribute(\"maxLength\", charLimit);\n                      let value = elementData.userValue;\n\n                      if (!value || value.length <= charLimit) {\n                        return;\n                      }\n\n                      value = value.slice(0, charLimit);\n                      target.value = elementData.userValue = value;\n                      storage.setValue(id, {\n                        value\n                      });\n                      this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                        source: this,\n                        detail: {\n                          id,\n                          name: \"Keystroke\",\n                          value,\n                          willCommit: true,\n                          commitKey: 1,\n                          selStart: target.selectionStart,\n                          selEnd: target.selectionEnd\n                        }\n                      });\n                    }\n                  };\n\n                  this._dispatchEventFromSandbox(actions, jsEvent);\n                });\n                element.addEventListener(\"keydown\", event => {\n                  elementData.commitKey = 1;\n                  let commitKey = -1;\n\n                  if (event.key === \"Escape\") {\n                    commitKey = 0;\n                  } else if (event.key === \"Enter\" && !this.data.multiLine) {\n                    commitKey = 2;\n                  } else if (event.key === \"Tab\") {\n                    elementData.commitKey = 3;\n                  }\n\n                  if (commitKey === -1) {\n                    return;\n                  }\n\n                  const {\n                    value\n                  } = event.target;\n\n                  if (elementData.lastCommittedValue === value) {\n                    return;\n                  }\n\n                  elementData.lastCommittedValue = value;\n                  elementData.userValue = value;\n                  this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                    source: this,\n                    detail: {\n                      id,\n                      name: \"Keystroke\",\n                      value,\n                      willCommit: true,\n                      commitKey,\n                      selStart: event.target.selectionStart,\n                      selEnd: event.target.selectionEnd\n                    }\n                  });\n                });\n                const _blurListener = blurListener;\n                blurListener = null;\n                element.addEventListener(\"blur\", event => {\n                  if (!elementData.focused || !event.relatedTarget) {\n                    return;\n                  }\n\n                  elementData.focused = false;\n                  const {\n                    value\n                  } = event.target;\n                  elementData.userValue = value;\n\n                  if (elementData.lastCommittedValue !== value) {\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value,\n                        willCommit: true,\n                        commitKey: elementData.commitKey,\n                        selStart: event.target.selectionStart,\n                        selEnd: event.target.selectionEnd\n                      }\n                    });\n                  }\n\n                  _blurListener(event);\n                });\n\n                if (this.data.actions?.Keystroke) {\n                  element.addEventListener(\"beforeinput\", event => {\n                    elementData.lastCommittedValue = null;\n                    const {\n                      data,\n                      target\n                    } = event;\n                    const {\n                      value,\n                      selectionStart,\n                      selectionEnd\n                    } = target;\n                    let selStart = selectionStart,\n                        selEnd = selectionEnd;\n\n                    switch (event.inputType) {\n                      case \"deleteWordBackward\":\n                        {\n                          const match = value.substring(0, selectionStart).match(/\\w*[^\\w]*$/);\n\n                          if (match) {\n                            selStart -= match[0].length;\n                          }\n\n                          break;\n                        }\n\n                      case \"deleteWordForward\":\n                        {\n                          const match = value.substring(selectionStart).match(/^[^\\w]*\\w*/);\n\n                          if (match) {\n                            selEnd += match[0].length;\n                          }\n\n                          break;\n                        }\n\n                      case \"deleteContentBackward\":\n                        if (selectionStart === selectionEnd) {\n                          selStart -= 1;\n                        }\n\n                        break;\n\n                      case \"deleteContentForward\":\n                        if (selectionStart === selectionEnd) {\n                          selEnd += 1;\n                        }\n\n                        break;\n                    }\n\n                    event.preventDefault();\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value,\n                        change: data || \"\",\n                        willCommit: false,\n                        selStart,\n                        selEnd\n                      }\n                    });\n                  });\n                }\n\n                this._setEventListeners(element, elementData, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n              }\n\n              if (blurListener) {\n                element.addEventListener(\"blur\", blurListener);\n              }\n\n              if (this.data.comb) {\n                const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                const combWidth = fieldWidth / maxLen;\n                element.classList.add(\"comb\");\n                element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n              }\n            } else {\n              element = document.createElement(\"div\");\n              element.textContent = this.data.fieldValue;\n              element.style.verticalAlign = \"middle\";\n              element.style.display = \"table-cell\";\n            }\n\n            this._setTextStyle(element);\n\n            this._setBackgroundColor(element);\n\n            this._setDefaultPropertiesFromJS(element);\n\n            this.container.append(element);\n            return this.container;\n          }\n\n        }\n\n        class SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: !!parameters.data.hasOwnCanvas\n            });\n          }\n\n        }\n\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.exportValue === data.fieldValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== \"Off\";\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.setAttribute(\"data-element-id\", id);\n            element.disabled = data.readOnly;\n\n            this._setRequired(element, this.data.required);\n\n            element.type = \"checkbox\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"exportValue\", data.exportValue);\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const checkbox of this._getElementsByName(name, id)) {\n                const curChecked = checked && checkbox.exportValue === data.exportValue;\n\n                if (checkbox.domElement) {\n                  checkbox.domElement.checked = curChecked;\n                }\n\n                storage.setValue(checkbox.id, {\n                  value: curChecked\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue || \"Off\";\n              event.target.checked = defaultValue === data.exportValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    event.target.checked = event.detail.value !== \"Off\";\n                    storage.setValue(id, {\n                      value: event.target.checked\n                    });\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this._setDefaultPropertiesFromJS(element);\n\n            this.container.append(element);\n            return this.container;\n          }\n\n        }\n\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.fieldValue === data.buttonValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== data.buttonValue;\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            const element = document.createElement(\"input\");\n            GetElementsByNameSet.add(element);\n            element.setAttribute(\"data-element-id\", id);\n            element.disabled = data.readOnly;\n\n            this._setRequired(element, this.data.required);\n\n            element.type = \"radio\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.tabIndex = DEFAULT_TAB_INDEX;\n            element.addEventListener(\"change\", event => {\n              const {\n                name,\n                checked\n              } = event.target;\n\n              for (const radio of this._getElementsByName(name, id)) {\n                storage.setValue(radio.id, {\n                  value: false\n                });\n              }\n\n              storage.setValue(id, {\n                value: checked\n              });\n            });\n            element.addEventListener(\"resetform\", event => {\n              const defaultValue = data.defaultFieldValue;\n              event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              const pdfButtonValue = data.buttonValue;\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value: event => {\n                    const checked = pdfButtonValue === event.detail.value;\n\n                    for (const radio of this._getElementsByName(event.target.name)) {\n                      const curChecked = checked && radio.id === id;\n\n                      if (radio.domElement) {\n                        radio.domElement.checked = curChecked;\n                      }\n\n                      storage.setValue(radio.id, {\n                        value: curChecked\n                      });\n                    }\n                  }\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this._setBackgroundColor(element);\n\n            this._setDefaultPropertiesFromJS(element);\n\n            this.container.append(element);\n            return this.container;\n          }\n\n        }\n\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              ignoreBorder: parameters.data.hasAppearance\n            });\n          }\n\n          render() {\n            const container = super.render();\n            container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n\n            if (this.data.alternativeText) {\n              container.title = this.data.alternativeText;\n            }\n\n            const linkElement = container.lastChild;\n\n            if (this.enableScripting && this.hasJSActions && linkElement) {\n              this._setDefaultPropertiesFromJS(linkElement);\n\n              linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n                this._dispatchEventFromSandbox({}, jsEvent);\n              });\n            }\n\n            return container;\n          }\n\n        }\n\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderForms\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"choiceWidgetAnnotation\");\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            const storedData = storage.getValue(id, {\n              value: this.data.fieldValue\n            });\n            const selectElement = document.createElement(\"select\");\n            GetElementsByNameSet.add(selectElement);\n            selectElement.setAttribute(\"data-element-id\", id);\n            selectElement.disabled = this.data.readOnly;\n\n            this._setRequired(selectElement, this.data.required);\n\n            selectElement.name = this.data.fieldName;\n            selectElement.tabIndex = DEFAULT_TAB_INDEX;\n            let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n\n            if (!this.data.combo) {\n              selectElement.size = this.data.options.length;\n\n              if (this.data.multiSelect) {\n                selectElement.multiple = true;\n              }\n            }\n\n            selectElement.addEventListener(\"resetform\", event => {\n              const defaultValue = this.data.defaultFieldValue;\n\n              for (const option of selectElement.options) {\n                option.selected = option.value === defaultValue;\n              }\n            });\n\n            for (const option of this.data.options) {\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = option.displayValue;\n              optionElement.value = option.exportValue;\n\n              if (storedData.value.includes(option.exportValue)) {\n                optionElement.setAttribute(\"selected\", true);\n                addAnEmptyEntry = false;\n              }\n\n              selectElement.append(optionElement);\n            }\n\n            let removeEmptyEntry = null;\n\n            if (addAnEmptyEntry) {\n              const noneOptionElement = document.createElement(\"option\");\n              noneOptionElement.value = \" \";\n              noneOptionElement.setAttribute(\"hidden\", true);\n              noneOptionElement.setAttribute(\"selected\", true);\n              selectElement.prepend(noneOptionElement);\n\n              removeEmptyEntry = () => {\n                noneOptionElement.remove();\n                selectElement.removeEventListener(\"input\", removeEmptyEntry);\n                removeEmptyEntry = null;\n              };\n\n              selectElement.addEventListener(\"input\", removeEmptyEntry);\n            }\n\n            const getValue = isExport => {\n              const name = isExport ? \"value\" : \"textContent\";\n              const {\n                options,\n                multiple\n              } = selectElement;\n\n              if (!multiple) {\n                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n              }\n\n              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n            };\n\n            let selectedValues = getValue(false);\n\n            const getItems = event => {\n              const options = event.target.options;\n              return Array.prototype.map.call(options, option => {\n                return {\n                  displayValue: option.textContent,\n                  exportValue: option.value\n                };\n              });\n            };\n\n            if (this.enableScripting && this.hasJSActions) {\n              selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    removeEmptyEntry?.();\n                    const value = event.detail.value;\n                    const values = new Set(Array.isArray(value) ? value : [value]);\n\n                    for (const option of selectElement.options) {\n                      option.selected = values.has(option.value);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(true)\n                    });\n                    selectedValues = getValue(false);\n                  },\n\n                  multipleSelection(event) {\n                    selectElement.multiple = true;\n                  },\n\n                  remove(event) {\n                    const options = selectElement.options;\n                    const index = event.detail.remove;\n                    options[index].selected = false;\n                    selectElement.remove(index);\n\n                    if (options.length > 0) {\n                      const i = Array.prototype.findIndex.call(options, option => option.selected);\n\n                      if (i === -1) {\n                        options[0].selected = true;\n                      }\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(true),\n                      items: getItems(event)\n                    });\n                    selectedValues = getValue(false);\n                  },\n\n                  clear(event) {\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    storage.setValue(id, {\n                      value: null,\n                      items: []\n                    });\n                    selectedValues = getValue(false);\n                  },\n\n                  insert(event) {\n                    const {\n                      index,\n                      displayValue,\n                      exportValue\n                    } = event.detail.insert;\n                    const selectChild = selectElement.children[index];\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = displayValue;\n                    optionElement.value = exportValue;\n\n                    if (selectChild) {\n                      selectChild.before(optionElement);\n                    } else {\n                      selectElement.append(optionElement);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(true),\n                      items: getItems(event)\n                    });\n                    selectedValues = getValue(false);\n                  },\n\n                  items(event) {\n                    const {\n                      items\n                    } = event.detail;\n\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    for (const item of items) {\n                      const {\n                        displayValue,\n                        exportValue\n                      } = item;\n                      const optionElement = document.createElement(\"option\");\n                      optionElement.textContent = displayValue;\n                      optionElement.value = exportValue;\n                      selectElement.append(optionElement);\n                    }\n\n                    if (selectElement.options.length > 0) {\n                      selectElement.options[0].selected = true;\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(true),\n                      items: getItems(event)\n                    });\n                    selectedValues = getValue(false);\n                  },\n\n                  indices(event) {\n                    const indices = new Set(event.detail.indices);\n\n                    for (const option of event.target.options) {\n                      option.selected = indices.has(option.index);\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(true)\n                    });\n                    selectedValues = getValue(false);\n                  },\n\n                  editable(event) {\n                    event.target.disabled = !event.detail.editable;\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n              selectElement.addEventListener(\"input\", event => {\n                const exportValue = getValue(true);\n                storage.setValue(id, {\n                  value: exportValue\n                });\n                event.preventDefault();\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value: selectedValues,\n                    changeEx: exportValue,\n                    willCommit: false,\n                    commitKey: 1,\n                    keyDown: false\n                  }\n                });\n              });\n\n              this._setEventListeners(selectElement, null, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"], [\"input\", \"Validate\"]], event => event.target.value);\n            } else {\n              selectElement.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: getValue(true)\n                });\n              });\n            }\n\n            if (this.data.combo) {\n              this._setTextStyle(selectElement);\n            } else {}\n\n            this._setBackgroundColor(selectElement);\n\n            this._setDefaultPropertiesFromJS(selectElement);\n\n            this.container.append(selectElement);\n            return this.container;\n          }\n\n        }\n\n        class PopupAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const {\n              data,\n              elements\n            } = parameters;\n            super(parameters, {\n              isRenderable: AnnotationElement._hasPopupData(data)\n            });\n            this.elements = elements;\n          }\n\n          render() {\n            this.container.classList.add(\"popupAnnotation\");\n            const popup = new PopupElement({\n              container: this.container,\n              color: this.data.color,\n              titleObj: this.data.titleObj,\n              modificationDate: this.data.modificationDate,\n              contentsObj: this.data.contentsObj,\n              richText: this.data.richText,\n              rect: this.data.rect,\n              parentRect: this.data.parentRect || null,\n              parent: this.parent,\n              elements: this.elements,\n              open: this.data.open\n            });\n            const elementIds = [];\n\n            for (const element of this.elements) {\n              element.popup = popup;\n              elementIds.push(element.data.id);\n              element.addHighlightArea();\n            }\n\n            this.container.setAttribute(\"aria-controls\", elementIds.map(id => `${_util.AnnotationPrefix}${id}`).join(\",\"));\n            return this.container;\n          }\n\n        }\n\n        class PopupElement {\n          #dateTimePromise = null;\n          #boundKeyDown = this.#keyDown.bind(this);\n          #boundHide = this.#hide.bind(this);\n          #boundShow = this.#show.bind(this);\n          #boundToggle = this.#toggle.bind(this);\n          #color = null;\n          #container = null;\n          #contentsObj = null;\n          #elements = null;\n          #parent = null;\n          #parentRect = null;\n          #pinned = false;\n          #popup = null;\n          #rect = null;\n          #richText = null;\n          #titleObj = null;\n          #wasVisible = false;\n\n          constructor(_ref45) {\n            let {\n              container,\n              color,\n              elements,\n              titleObj,\n              modificationDate,\n              contentsObj,\n              richText,\n              parent,\n              rect,\n              parentRect,\n              open\n            } = _ref45;\n            this.#container = container;\n            this.#titleObj = titleObj;\n            this.#contentsObj = contentsObj;\n            this.#richText = richText;\n            this.#parent = parent;\n            this.#color = color;\n            this.#rect = rect;\n            this.#parentRect = parentRect;\n            this.#elements = elements;\n\n            const dateObject = _display_utils.PDFDateString.toDateObject(modificationDate);\n\n            if (dateObject) {\n              this.#dateTimePromise = parent.l10n.get(\"annotation_date_string\", {\n                date: dateObject.toLocaleDateString(),\n                time: dateObject.toLocaleTimeString()\n              });\n            }\n\n            this.trigger = elements.flatMap(e => e.getElementsToTriggerPopup());\n\n            for (const element of this.trigger) {\n              element.addEventListener(\"click\", this.#boundToggle);\n              element.addEventListener(\"mouseenter\", this.#boundShow);\n              element.addEventListener(\"mouseleave\", this.#boundHide);\n              element.classList.add(\"popupTriggerArea\");\n            }\n\n            for (const element of elements) {\n              element.container?.addEventListener(\"keydown\", this.#boundKeyDown);\n            }\n\n            this.#container.hidden = true;\n\n            if (open) {\n              this.#toggle();\n            }\n          }\n\n          render() {\n            if (this.#popup) {\n              return;\n            }\n\n            const {\n              page: {\n                view\n              },\n              viewport: {\n                rawDims: {\n                  pageWidth,\n                  pageHeight,\n                  pageX,\n                  pageY\n                }\n              }\n            } = this.#parent;\n            const popup = this.#popup = document.createElement(\"div\");\n            popup.className = \"popup\";\n\n            if (this.#color) {\n              const baseColor = popup.style.outlineColor = _util.Util.makeHexColor(...this.#color);\n\n              if (CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")) {\n                popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\n              } else {\n                const BACKGROUND_ENLIGHT = 0.7;\n                popup.style.backgroundColor = _util.Util.makeHexColor(...this.#color.map(c => Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)));\n              }\n            }\n\n            const header = document.createElement(\"span\");\n            header.className = \"header\";\n            const title = document.createElement(\"h1\");\n            header.append(title);\n            ({\n              dir: title.dir,\n              str: title.textContent\n            } = this.#titleObj);\n            popup.append(header);\n\n            if (this.#dateTimePromise) {\n              const modificationDate = document.createElement(\"span\");\n              modificationDate.classList.add(\"popupDate\");\n              this.#dateTimePromise.then(localized => {\n                modificationDate.textContent = localized;\n              });\n              header.append(modificationDate);\n            }\n\n            const contentsObj = this.#contentsObj;\n            const richText = this.#richText;\n\n            if (richText?.str && (!contentsObj?.str || contentsObj.str === richText.str)) {\n              _xfa_layer.XfaLayer.render({\n                xfaHtml: richText.html,\n                intent: \"richText\",\n                div: popup\n              });\n\n              popup.lastChild.classList.add(\"richText\", \"popupContent\");\n            } else {\n              const contents = this._formatContents(contentsObj);\n\n              popup.append(contents);\n            }\n\n            let useParentRect = !!this.#parentRect;\n            let rect = useParentRect ? this.#parentRect : this.#rect;\n\n            for (const element of this.#elements) {\n              if (!rect || _util.Util.intersect(element.data.rect, rect) !== null) {\n                rect = element.data.rect;\n                useParentRect = true;\n                break;\n              }\n            }\n\n            const normalizedRect = _util.Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);\n\n            const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\n            const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;\n            const popupLeft = normalizedRect[0] + parentWidth;\n            const popupTop = normalizedRect[1];\n            const {\n              style\n            } = this.#container;\n            style.left = `${100 * (popupLeft - pageX) / pageWidth}%`;\n            style.top = `${100 * (popupTop - pageY) / pageHeight}%`;\n            this.#container.append(popup);\n          }\n\n          _formatContents(_ref46) {\n            let {\n              str,\n              dir\n            } = _ref46;\n            const p = document.createElement(\"p\");\n            p.classList.add(\"popupContent\");\n            p.dir = dir;\n            const lines = str.split(/(?:\\r\\n?|\\n)/);\n\n            for (let i = 0, ii = lines.length; i < ii; ++i) {\n              const line = lines[i];\n              p.append(document.createTextNode(line));\n\n              if (i < ii - 1) {\n                p.append(document.createElement(\"br\"));\n              }\n            }\n\n            return p;\n          }\n\n          #keyDown(event) {\n            if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n              return;\n            }\n\n            if (event.key === \"Enter\" || event.key === \"Escape\" && this.#pinned) {\n              this.#toggle();\n            }\n          }\n\n          #toggle() {\n            this.#pinned = !this.#pinned;\n\n            if (this.#pinned) {\n              this.#show();\n              this.#container.addEventListener(\"click\", this.#boundToggle);\n              this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\n            } else {\n              this.#hide();\n              this.#container.removeEventListener(\"click\", this.#boundToggle);\n              this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\n            }\n          }\n\n          #show() {\n            if (!this.#popup) {\n              this.render();\n            }\n\n            if (!this.isVisible) {\n              this.#container.hidden = false;\n              this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1000;\n            } else if (this.#pinned) {\n              this.#container.classList.add(\"focused\");\n            }\n          }\n\n          #hide() {\n            this.#container.classList.remove(\"focused\");\n\n            if (this.#pinned || !this.isVisible) {\n              return;\n            }\n\n            this.#container.hidden = true;\n            this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1000;\n          }\n\n          forceHide() {\n            this.#wasVisible = this.isVisible;\n\n            if (!this.#wasVisible) {\n              return;\n            }\n\n            this.#container.hidden = true;\n          }\n\n          maybeShow() {\n            if (!this.#wasVisible) {\n              return;\n            }\n\n            this.#wasVisible = false;\n            this.#container.hidden = false;\n          }\n\n          get isVisible() {\n            return this.#container.hidden === false;\n          }\n\n        }\n\n        class FreeTextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n            this.textContent = parameters.data.textContent;\n            this.textPosition = parameters.data.textPosition;\n            this.annotationEditorType = _util.AnnotationEditorType.FREETEXT;\n          }\n\n          render() {\n            this.container.classList.add(\"freeTextAnnotation\");\n\n            if (this.textContent) {\n              const content = document.createElement(\"div\");\n              content.classList.add(\"annotationTextContent\");\n              content.setAttribute(\"role\", \"comment\");\n\n              for (const line of this.textContent) {\n                const lineSpan = document.createElement(\"span\");\n                lineSpan.textContent = line;\n                content.append(lineSpan);\n              }\n\n              this.container.append(content);\n            }\n\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            this._editOnDoubleClick();\n\n            return this.container;\n          }\n\n        }\n\n        exports.FreeTextAnnotationElement = FreeTextAnnotationElement;\n\n        class LineAnnotationElement extends AnnotationElement {\n          #line = null;\n\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"lineAnnotation\");\n            const data = this.data;\n            const {\n              width,\n              height\n            } = getRectDims(data.rect);\n            const svg = this.svgFactory.create(width, height, true);\n            const line = this.#line = this.svgFactory.createElement(\"svg:line\");\n            line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n            line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n            line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n            line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n            line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            line.setAttribute(\"stroke\", \"transparent\");\n            line.setAttribute(\"fill\", \"transparent\");\n            svg.append(line);\n            this.container.append(svg);\n\n            if (!data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            return this.container;\n          }\n\n          getElementsToTriggerPopup() {\n            return this.#line;\n          }\n\n          addHighlightArea() {\n            this.container.classList.add(\"highlightArea\");\n          }\n\n        }\n\n        class SquareAnnotationElement extends AnnotationElement {\n          #square = null;\n\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"squareAnnotation\");\n            const data = this.data;\n            const {\n              width,\n              height\n            } = getRectDims(data.rect);\n            const svg = this.svgFactory.create(width, height, true);\n            const borderWidth = data.borderStyle.width;\n            const square = this.#square = this.svgFactory.createElement(\"svg:rect\");\n            square.setAttribute(\"x\", borderWidth / 2);\n            square.setAttribute(\"y\", borderWidth / 2);\n            square.setAttribute(\"width\", width - borderWidth);\n            square.setAttribute(\"height\", height - borderWidth);\n            square.setAttribute(\"stroke-width\", borderWidth || 1);\n            square.setAttribute(\"stroke\", \"transparent\");\n            square.setAttribute(\"fill\", \"transparent\");\n            svg.append(square);\n            this.container.append(svg);\n\n            if (!data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            return this.container;\n          }\n\n          getElementsToTriggerPopup() {\n            return this.#square;\n          }\n\n          addHighlightArea() {\n            this.container.classList.add(\"highlightArea\");\n          }\n\n        }\n\n        class CircleAnnotationElement extends AnnotationElement {\n          #circle = null;\n\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"circleAnnotation\");\n            const data = this.data;\n            const {\n              width,\n              height\n            } = getRectDims(data.rect);\n            const svg = this.svgFactory.create(width, height, true);\n            const borderWidth = data.borderStyle.width;\n            const circle = this.#circle = this.svgFactory.createElement(\"svg:ellipse\");\n            circle.setAttribute(\"cx\", width / 2);\n            circle.setAttribute(\"cy\", height / 2);\n            circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n            circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n            circle.setAttribute(\"stroke-width\", borderWidth || 1);\n            circle.setAttribute(\"stroke\", \"transparent\");\n            circle.setAttribute(\"fill\", \"transparent\");\n            svg.append(circle);\n            this.container.append(svg);\n\n            if (!data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            return this.container;\n          }\n\n          getElementsToTriggerPopup() {\n            return this.#circle;\n          }\n\n          addHighlightArea() {\n            this.container.classList.add(\"highlightArea\");\n          }\n\n        }\n\n        class PolylineAnnotationElement extends AnnotationElement {\n          #polyline = null;\n\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"polylineAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.classList.add(this.containerClassName);\n            const data = this.data;\n            const {\n              width,\n              height\n            } = getRectDims(data.rect);\n            const svg = this.svgFactory.create(width, height, true);\n            let points = [];\n\n            for (const coordinate of data.vertices) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(x + \",\" + y);\n            }\n\n            points = points.join(\" \");\n            const polyline = this.#polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute(\"points\", points);\n            polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            polyline.setAttribute(\"stroke\", \"transparent\");\n            polyline.setAttribute(\"fill\", \"transparent\");\n            svg.append(polyline);\n            this.container.append(svg);\n\n            if (!data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            return this.container;\n          }\n\n          getElementsToTriggerPopup() {\n            return this.#polyline;\n          }\n\n          addHighlightArea() {\n            this.container.classList.add(\"highlightArea\");\n          }\n\n        }\n\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n          constructor(parameters) {\n            super(parameters);\n            this.containerClassName = \"polygonAnnotation\";\n            this.svgElementName = \"svg:polygon\";\n          }\n\n        }\n\n        class CaretAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"caretAnnotation\");\n\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class InkAnnotationElement extends AnnotationElement {\n          #polylines = [];\n\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"inkAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n            this.annotationEditorType = _util.AnnotationEditorType.INK;\n          }\n\n          render() {\n            this.container.classList.add(this.containerClassName);\n            const data = this.data;\n            const {\n              width,\n              height\n            } = getRectDims(data.rect);\n            const svg = this.svgFactory.create(width, height, true);\n\n            for (const inkList of data.inkLists) {\n              let points = [];\n\n              for (const coordinate of inkList) {\n                const x = coordinate.x - data.rect[0];\n                const y = data.rect[3] - coordinate.y;\n                points.push(`${x},${y}`);\n              }\n\n              points = points.join(\" \");\n              const polyline = this.svgFactory.createElement(this.svgElementName);\n              this.#polylines.push(polyline);\n              polyline.setAttribute(\"points\", points);\n              polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n              polyline.setAttribute(\"stroke\", \"transparent\");\n              polyline.setAttribute(\"fill\", \"transparent\");\n\n              if (!data.popupRef && this.hasPopupData) {\n                this._createPopup();\n              }\n\n              svg.append(polyline);\n            }\n\n            this.container.append(svg);\n            return this.container;\n          }\n\n          getElementsToTriggerPopup() {\n            return this.#polylines;\n          }\n\n          addHighlightArea() {\n            this.container.classList.add(\"highlightArea\");\n          }\n\n        }\n\n        exports.InkAnnotationElement = InkAnnotationElement;\n\n        class HighlightAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            this.container.classList.add(\"highlightAnnotation\");\n            return this.container;\n          }\n\n        }\n\n        class UnderlineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            this.container.classList.add(\"underlineAnnotation\");\n            return this.container;\n          }\n\n        }\n\n        class SquigglyAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            this.container.classList.add(\"squigglyAnnotation\");\n            return this.container;\n          }\n\n        }\n\n        class StrikeOutAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            this.container.classList.add(\"strikeoutAnnotation\");\n            return this.container;\n          }\n\n        }\n\n        class StampAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"stampAnnotation\");\n\n            if (!this.data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            }\n\n            return this.container;\n          }\n\n        }\n\n        exports.StampAnnotationElement = StampAnnotationElement;\n\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n          #trigger = null;\n\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true\n            });\n            const {\n              filename,\n              content\n            } = this.data.file;\n            this.filename = (0, _display_utils.getFilenameFromUrl)(filename, true);\n            this.content = content;\n            this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n              source: this,\n              filename,\n              content\n            });\n          }\n\n          render() {\n            this.container.classList.add(\"fileAttachmentAnnotation\");\n            const {\n              container,\n              data\n            } = this;\n            let trigger;\n\n            if (data.hasAppearance || data.fillAlpha === 0) {\n              trigger = document.createElement(\"div\");\n            } else {\n              trigger = document.createElement(\"img\");\n              trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"}.svg`;\n\n              if (data.fillAlpha && data.fillAlpha < 1) {\n                trigger.style = `filter: opacity(${Math.round(data.fillAlpha * 100)}%);`;\n              }\n            }\n\n            trigger.addEventListener(\"dblclick\", this.#download.bind(this));\n            this.#trigger = trigger;\n            const {\n              isMac\n            } = _util.FeatureTest.platform;\n            container.addEventListener(\"keydown\", evt => {\n              if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\n                this.#download();\n              }\n            });\n\n            if (!data.popupRef && this.hasPopupData) {\n              this._createPopup();\n            } else {\n              trigger.classList.add(\"popupTriggerArea\");\n            }\n\n            container.append(trigger);\n            return container;\n          }\n\n          getElementsToTriggerPopup() {\n            return this.#trigger;\n          }\n\n          addHighlightArea() {\n            this.container.classList.add(\"highlightArea\");\n          }\n\n          #download() {\n            this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);\n          }\n\n        }\n\n        class AnnotationLayer {\n          #accessibilityManager = null;\n          #annotationCanvasMap = null;\n          #editableAnnotations = new Map();\n\n          constructor(_ref47) {\n            let {\n              div,\n              accessibilityManager,\n              annotationCanvasMap,\n              l10n,\n              page,\n              viewport\n            } = _ref47;\n            this.div = div;\n            this.#accessibilityManager = accessibilityManager;\n            this.#annotationCanvasMap = annotationCanvasMap;\n            this.l10n = l10n;\n            this.page = page;\n            this.viewport = viewport;\n            this.zIndex = 0;\n            this.l10n ||= _displayL10n_utils.NullL10n;\n          }\n\n          #appendElement(element, id) {\n            const contentElement = element.firstChild || element;\n            contentElement.id = `${_util.AnnotationPrefix}${id}`;\n            this.div.append(element);\n            this.#accessibilityManager?.moveElementInDOM(this.div, element, contentElement, false);\n          }\n\n          async render(params) {\n            const {\n              annotations\n            } = params;\n            const layer = this.div;\n            (0, _display_utils.setLayerDimensions)(layer, this.viewport);\n            const popupToElements = new Map();\n            const elementParams = {\n              data: null,\n              layer,\n              linkService: params.linkService,\n              downloadManager: params.downloadManager,\n              imageResourcesPath: params.imageResourcesPath || \"\",\n              renderForms: params.renderForms !== false,\n              svgFactory: new _display_utils.DOMSVGFactory(),\n              annotationStorage: params.annotationStorage || new _annotation_storage.AnnotationStorage(),\n              enableScripting: params.enableScripting === true,\n              hasJSActions: params.hasJSActions,\n              fieldObjects: params.fieldObjects,\n              parent: this,\n              elements: null\n            };\n\n            for (const data of annotations) {\n              if (data.noHTML) {\n                continue;\n              }\n\n              const isPopupAnnotation = data.annotationType === _util.AnnotationType.POPUP;\n\n              if (!isPopupAnnotation) {\n                const {\n                  width,\n                  height\n                } = getRectDims(data.rect);\n\n                if (width <= 0 || height <= 0) {\n                  continue;\n                }\n              } else {\n                const elements = popupToElements.get(data.id);\n\n                if (!elements) {\n                  continue;\n                }\n\n                elementParams.elements = elements;\n              }\n\n              elementParams.data = data;\n              const element = AnnotationElementFactory.create(elementParams);\n\n              if (!element.isRenderable) {\n                continue;\n              }\n\n              if (!isPopupAnnotation && data.popupRef) {\n                const elements = popupToElements.get(data.popupRef);\n\n                if (!elements) {\n                  popupToElements.set(data.popupRef, [element]);\n                } else {\n                  elements.push(element);\n                }\n              }\n\n              if (element.annotationEditorType > 0) {\n                this.#editableAnnotations.set(element.data.id, element);\n              }\n\n              const rendered = element.render();\n\n              if (data.hidden) {\n                rendered.style.visibility = \"hidden\";\n              }\n\n              this.#appendElement(rendered, data.id);\n            }\n\n            this.#setAnnotationCanvasMap();\n            await this.l10n.translate(layer);\n          }\n\n          update(_ref48) {\n            let {\n              viewport\n            } = _ref48;\n            const layer = this.div;\n            this.viewport = viewport;\n            (0, _display_utils.setLayerDimensions)(layer, {\n              rotation: viewport.rotation\n            });\n            this.#setAnnotationCanvasMap();\n            layer.hidden = false;\n          }\n\n          #setAnnotationCanvasMap() {\n            if (!this.#annotationCanvasMap) {\n              return;\n            }\n\n            const layer = this.div;\n\n            for (const [id, canvas] of this.#annotationCanvasMap) {\n              const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\n\n              if (!element) {\n                continue;\n              }\n\n              const {\n                firstChild\n              } = element;\n\n              if (!firstChild) {\n                element.append(canvas);\n              } else if (firstChild.nodeName === \"CANVAS\") {\n                firstChild.replaceWith(canvas);\n              } else {\n                firstChild.before(canvas);\n              }\n            }\n\n            this.#annotationCanvasMap.clear();\n          }\n\n          getEditableAnnotations() {\n            return Array.from(this.#editableAnnotations.values());\n          }\n\n          getEditableAnnotation(id) {\n            return this.#editableAnnotations.get(id);\n          }\n\n        }\n\n        exports.AnnotationLayer = AnnotationLayer;\n        /***/\n      },\n      /* 30 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorConverters = void 0;\n\n        function makeColorComp(n) {\n          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n\n        function scaleAndClamp(x) {\n          return Math.max(0, Math.min(255, 255 * x));\n        }\n\n        class ColorConverters {\n          static CMYK_G(_ref49) {\n            let [c, y, m, k] = _ref49;\n            return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n          }\n\n          static G_CMYK(_ref50) {\n            let [g] = _ref50;\n            return [\"CMYK\", 0, 0, 0, 1 - g];\n          }\n\n          static G_RGB(_ref51) {\n            let [g] = _ref51;\n            return [\"RGB\", g, g, g];\n          }\n\n          static G_rgb(_ref52) {\n            let [g] = _ref52;\n            g = scaleAndClamp(g);\n            return [g, g, g];\n          }\n\n          static G_HTML(_ref53) {\n            let [g] = _ref53;\n            const G = makeColorComp(g);\n            return `#${G}${G}${G}`;\n          }\n\n          static RGB_G(_ref54) {\n            let [r, g, b] = _ref54;\n            return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n          }\n\n          static RGB_rgb(color) {\n            return color.map(scaleAndClamp);\n          }\n\n          static RGB_HTML(color) {\n            return `#${color.map(makeColorComp).join(\"\")}`;\n          }\n\n          static T_HTML() {\n            return \"#00000000\";\n          }\n\n          static T_rgb() {\n            return [null];\n          }\n\n          static CMYK_RGB(_ref55) {\n            let [c, y, m, k] = _ref55;\n            return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n          }\n\n          static CMYK_rgb(_ref56) {\n            let [c, y, m, k] = _ref56;\n            return [scaleAndClamp(1 - Math.min(1, c + k)), scaleAndClamp(1 - Math.min(1, m + k)), scaleAndClamp(1 - Math.min(1, y + k))];\n          }\n\n          static CMYK_HTML(components) {\n            const rgb = this.CMYK_RGB(components).slice(1);\n            return this.RGB_HTML(rgb);\n          }\n\n          static RGB_CMYK(_ref57) {\n            let [r, g, b] = _ref57;\n            const c = 1 - r;\n            const m = 1 - g;\n            const y = 1 - b;\n            const k = Math.min(c, m, y);\n            return [\"CMYK\", c, m, y, k];\n          }\n\n        }\n\n        exports.ColorConverters = ColorConverters;\n        /***/\n      },\n      /* 31 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NullL10n = void 0;\n        exports.getL10nFallback = getL10nFallback;\n        const DEFAULT_L10N_STRINGS = {\n          of_pages: \"of {{pagesCount}}\",\n          page_of_pages: \"({{pageNumber}} of {{pagesCount}})\",\n          document_properties_kb: \"{{size_kb}} KB ({{size_b}} bytes)\",\n          document_properties_mb: \"{{size_mb}} MB ({{size_b}} bytes)\",\n          document_properties_date_string: \"{{date}}, {{time}}\",\n          document_properties_page_size_unit_inches: \"in\",\n          document_properties_page_size_unit_millimeters: \"mm\",\n          document_properties_page_size_orientation_portrait: \"portrait\",\n          document_properties_page_size_orientation_landscape: \"landscape\",\n          document_properties_page_size_name_a3: \"A3\",\n          document_properties_page_size_name_a4: \"A4\",\n          document_properties_page_size_name_letter: \"Letter\",\n          document_properties_page_size_name_legal: \"Legal\",\n          document_properties_page_size_dimension_string: \"{{width}} × {{height}} {{unit}} ({{orientation}})\",\n          document_properties_page_size_dimension_name_string: \"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})\",\n          document_properties_linearized_yes: \"Yes\",\n          document_properties_linearized_no: \"No\",\n          additional_layers: \"Additional Layers\",\n          page_landmark: \"Page {{page}}\",\n          thumb_page_title: \"Page {{page}}\",\n          thumb_page_canvas: \"Thumbnail of Page {{page}}\",\n          find_reached_top: \"Reached top of document, continued from bottom\",\n          find_reached_bottom: \"Reached end of document, continued from top\",\n          \"find_match_count[one]\": \"{{current}} of {{total}} match\",\n          \"find_match_count[other]\": \"{{current}} of {{total}} matches\",\n          \"find_match_count_limit[one]\": \"More than {{limit}} match\",\n          \"find_match_count_limit[other]\": \"More than {{limit}} matches\",\n          find_not_found: \"Phrase not found\",\n          page_scale_width: \"Page Width\",\n          page_scale_fit: \"Page Fit\",\n          page_scale_auto: \"Automatic Zoom\",\n          page_scale_actual: \"Actual Size\",\n          page_scale_percent: \"{{scale}}%\",\n          loading_error: \"An error occurred while loading the PDF.\",\n          invalid_file_error: \"Invalid or corrupted PDF file.\",\n          missing_file_error: \"Missing PDF file.\",\n          unexpected_response_error: \"Unexpected server response.\",\n          rendering_error: \"An error occurred while rendering the page.\",\n          annotation_date_string: \"{{date}}, {{time}}\",\n          printing_not_supported: \"Warning: Printing is not fully supported by this browser.\",\n          printing_not_ready: \"Warning: The PDF is not fully loaded for printing.\",\n          web_fonts_disabled: \"Web fonts are disabled: unable to use embedded PDF fonts.\",\n          free_text2_default_content: \"Start typing…\",\n          editor_free_text2_aria_label: \"Text Editor\",\n          editor_ink2_aria_label: \"Draw Editor\",\n          editor_ink_canvas_aria_label: \"User-created image\",\n          editor_alt_text_button_label: \"Alt text\",\n          editor_alt_text_edit_button_label: \"Edit alt text\",\n          editor_alt_text_decorative_tooltip: \"Marked as decorative\"\n        };\n        {\n          DEFAULT_L10N_STRINGS.print_progress_percent = \"{{progress}}%\";\n        }\n\n        function getL10nFallback(key, args) {\n          switch (key) {\n            case \"find_match_count\":\n              key = `find_match_count[${args.total === 1 ? \"one\" : \"other\"}]`;\n              break;\n\n            case \"find_match_count_limit\":\n              key = `find_match_count_limit[${args.limit === 1 ? \"one\" : \"other\"}]`;\n              break;\n          }\n\n          return DEFAULT_L10N_STRINGS[key] || \"\";\n        }\n\n        function formatL10nValue(text, args) {\n          if (!args) {\n            return text;\n          }\n\n          return text.replaceAll(/\\{\\{\\s*(\\w+)\\s*\\}\\}/g, (all, name) => {\n            return name in args ? args[name] : \"{{\" + name + \"}}\";\n          });\n        }\n\n        const NullL10n = {\n          async getLanguage() {\n            return \"en-us\";\n          },\n\n          async getDirection() {\n            return \"ltr\";\n          },\n\n          async get(key) {\n            let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            let fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getL10nFallback(key, args);\n            return formatL10nValue(fallback, args);\n          },\n\n          async translate(element) {}\n\n        };\n        exports.NullL10n = NullL10n;\n        /***/\n      },\n      /* 32 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaLayer = void 0;\n\n        var _xfa_text = __w_pdfjs_require__(25);\n\n        class XfaLayer {\n          static setupStorage(html, id, element, storage, intent) {\n            const storedData = storage.getValue(id, {\n              value: null\n            });\n\n            switch (element.name) {\n              case \"textarea\":\n                if (storedData.value !== null) {\n                  html.textContent = storedData.value;\n                }\n\n                if (intent === \"print\") {\n                  break;\n                }\n\n                html.addEventListener(\"input\", event => {\n                  storage.setValue(id, {\n                    value: event.target.value\n                  });\n                });\n                break;\n\n              case \"input\":\n                if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n                  if (storedData.value === element.attributes.xfaOn) {\n                    html.setAttribute(\"checked\", true);\n                  } else if (storedData.value === element.attributes.xfaOff) {\n                    html.removeAttribute(\"checked\");\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"change\", event => {\n                    storage.setValue(id, {\n                      value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n                    });\n                  });\n                } else {\n                  if (storedData.value !== null) {\n                    html.setAttribute(\"value\", storedData.value);\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"input\", event => {\n                    storage.setValue(id, {\n                      value: event.target.value\n                    });\n                  });\n                }\n\n                break;\n\n              case \"select\":\n                if (storedData.value !== null) {\n                  html.setAttribute(\"value\", storedData.value);\n\n                  for (const option of element.children) {\n                    if (option.attributes.value === storedData.value) {\n                      option.attributes.selected = true;\n                    } else if (option.attributes.hasOwnProperty(\"selected\")) {\n                      delete option.attributes.selected;\n                    }\n                  }\n                }\n\n                html.addEventListener(\"input\", event => {\n                  const options = event.target.options;\n                  const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n                  storage.setValue(id, {\n                    value\n                  });\n                });\n                break;\n            }\n          }\n\n          static setAttributes(_ref58) {\n            let {\n              html,\n              element,\n              storage = null,\n              intent,\n              linkService\n            } = _ref58;\n            const {\n              attributes\n            } = element;\n            const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n            if (attributes.type === \"radio\") {\n              attributes.name = `${attributes.name}-${intent}`;\n            }\n\n            for (const [key, value] of Object.entries(attributes)) {\n              if (value === null || value === undefined) {\n                continue;\n              }\n\n              switch (key) {\n                case \"class\":\n                  if (value.length) {\n                    html.setAttribute(key, value.join(\" \"));\n                  }\n\n                  break;\n\n                case \"dataId\":\n                  break;\n\n                case \"id\":\n                  html.setAttribute(\"data-element-id\", value);\n                  break;\n\n                case \"style\":\n                  Object.assign(html.style, value);\n                  break;\n\n                case \"textContent\":\n                  html.textContent = value;\n                  break;\n\n                default:\n                  if (!isHTMLAnchorElement || key !== \"href\" && key !== \"newWindow\") {\n                    html.setAttribute(key, value);\n                  }\n\n              }\n            }\n\n            if (isHTMLAnchorElement) {\n              linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);\n            }\n\n            if (storage && attributes.dataId) {\n              this.setupStorage(html, attributes.dataId, element, storage);\n            }\n          }\n\n          static render(parameters) {\n            const storage = parameters.annotationStorage;\n            const linkService = parameters.linkService;\n            const root = parameters.xfaHtml;\n            const intent = parameters.intent || \"display\";\n            const rootHtml = document.createElement(root.name);\n\n            if (root.attributes) {\n              this.setAttributes({\n                html: rootHtml,\n                element: root,\n                intent,\n                linkService\n              });\n            }\n\n            const stack = [[root, -1, rootHtml]];\n            const rootDiv = parameters.div;\n            rootDiv.append(rootHtml);\n\n            if (parameters.viewport) {\n              const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n              rootDiv.style.transform = transform;\n            }\n\n            if (intent !== \"richText\") {\n              rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n            }\n\n            const textDivs = [];\n\n            while (stack.length > 0) {\n              const [parent, i, html] = stack.at(-1);\n\n              if (i + 1 === parent.children.length) {\n                stack.pop();\n                continue;\n              }\n\n              const child = parent.children[++stack.at(-1)[1]];\n\n              if (child === null) {\n                continue;\n              }\n\n              const {\n                name\n              } = child;\n\n              if (name === \"#text\") {\n                const node = document.createTextNode(child.value);\n                textDivs.push(node);\n                html.append(node);\n                continue;\n              }\n\n              const childHtml = child?.attributes?.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);\n              html.append(childHtml);\n\n              if (child.attributes) {\n                this.setAttributes({\n                  html: childHtml,\n                  element: child,\n                  storage,\n                  intent,\n                  linkService\n                });\n              }\n\n              if (child.children && child.children.length > 0) {\n                stack.push([child, -1, childHtml]);\n              } else if (child.value) {\n                const node = document.createTextNode(child.value);\n\n                if (_xfa_text.XfaText.shouldBuildText(name)) {\n                  textDivs.push(node);\n                }\n\n                childHtml.append(node);\n              }\n            }\n\n            for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n              el.setAttribute(\"readOnly\", true);\n            }\n\n            return {\n              textDivs\n            };\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            parameters.div.style.transform = transform;\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.XfaLayer = XfaLayer;\n        /***/\n      },\n      /* 33 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.InkEditor = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _editor = __w_pdfjs_require__(4);\n\n        var _annotation_layer = __w_pdfjs_require__(29);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _tools = __w_pdfjs_require__(5);\n\n        class InkEditor extends _editor.AnnotationEditor {\n          #baseHeight = 0;\n          #baseWidth = 0;\n          #boundCanvasPointermove = this.canvasPointermove.bind(this);\n          #boundCanvasPointerleave = this.canvasPointerleave.bind(this);\n          #boundCanvasPointerup = this.canvasPointerup.bind(this);\n          #boundCanvasPointerdown = this.canvasPointerdown.bind(this);\n          #currentPath2D = new Path2D();\n          #disableEditing = false;\n          #hasSomethingToDraw = false;\n          #isCanvasInitialized = false;\n          #observer = null;\n          #realWidth = 0;\n          #realHeight = 0;\n          #requestFrameCallback = null;\n          static _defaultColor = null;\n          static _defaultOpacity = 1;\n          static _defaultThickness = 1;\n          static _type = \"ink\";\n\n          constructor(params) {\n            super({ ...params,\n              name: \"inkEditor\"\n            });\n            this.color = params.color || null;\n            this.thickness = params.thickness || null;\n            this.opacity = params.opacity || null;\n            this.paths = [];\n            this.bezierPath2D = [];\n            this.allRawPaths = [];\n            this.currentPath = [];\n            this.scaleFactor = 1;\n            this.translationX = this.translationY = 0;\n            this.x = 0;\n            this.y = 0;\n            this._willKeepAspectRatio = true;\n          }\n\n          static initialize(l10n) {\n            _editor.AnnotationEditor.initialize(l10n, {\n              strings: [\"editor_ink_canvas_aria_label\", \"editor_ink2_aria_label\"]\n            });\n          }\n\n          static updateDefaultParams(type, value) {\n            switch (type) {\n              case _util.AnnotationEditorParamsType.INK_THICKNESS:\n                InkEditor._defaultThickness = value;\n                break;\n\n              case _util.AnnotationEditorParamsType.INK_COLOR:\n                InkEditor._defaultColor = value;\n                break;\n\n              case _util.AnnotationEditorParamsType.INK_OPACITY:\n                InkEditor._defaultOpacity = value / 100;\n                break;\n            }\n          }\n\n          updateParams(type, value) {\n            switch (type) {\n              case _util.AnnotationEditorParamsType.INK_THICKNESS:\n                this.#updateThickness(value);\n                break;\n\n              case _util.AnnotationEditorParamsType.INK_COLOR:\n                this.#updateColor(value);\n                break;\n\n              case _util.AnnotationEditorParamsType.INK_OPACITY:\n                this.#updateOpacity(value);\n                break;\n            }\n          }\n\n          static get defaultPropertiesToUpdate() {\n            return [[_util.AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness], [_util.AnnotationEditorParamsType.INK_COLOR, InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor], [_util.AnnotationEditorParamsType.INK_OPACITY, Math.round(InkEditor._defaultOpacity * 100)]];\n          }\n\n          get propertiesToUpdate() {\n            return [[_util.AnnotationEditorParamsType.INK_THICKNESS, this.thickness || InkEditor._defaultThickness], [_util.AnnotationEditorParamsType.INK_COLOR, this.color || InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor], [_util.AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity))]];\n          }\n\n          #updateThickness(thickness) {\n            const savedThickness = this.thickness;\n            this.addCommands({\n              cmd: () => {\n                this.thickness = thickness;\n                this.#fitToContent();\n              },\n              undo: () => {\n                this.thickness = savedThickness;\n                this.#fitToContent();\n              },\n              mustExec: true,\n              type: _util.AnnotationEditorParamsType.INK_THICKNESS,\n              overwriteIfSameType: true,\n              keepUndo: true\n            });\n          }\n\n          #updateColor(color) {\n            const savedColor = this.color;\n            this.addCommands({\n              cmd: () => {\n                this.color = color;\n                this.#redraw();\n              },\n              undo: () => {\n                this.color = savedColor;\n                this.#redraw();\n              },\n              mustExec: true,\n              type: _util.AnnotationEditorParamsType.INK_COLOR,\n              overwriteIfSameType: true,\n              keepUndo: true\n            });\n          }\n\n          #updateOpacity(opacity) {\n            opacity /= 100;\n            const savedOpacity = this.opacity;\n            this.addCommands({\n              cmd: () => {\n                this.opacity = opacity;\n                this.#redraw();\n              },\n              undo: () => {\n                this.opacity = savedOpacity;\n                this.#redraw();\n              },\n              mustExec: true,\n              type: _util.AnnotationEditorParamsType.INK_OPACITY,\n              overwriteIfSameType: true,\n              keepUndo: true\n            });\n          }\n\n          rebuild() {\n            if (!this.parent) {\n              return;\n            }\n\n            super.rebuild();\n\n            if (this.div === null) {\n              return;\n            }\n\n            if (!this.canvas) {\n              this.#createCanvas();\n              this.#createObserver();\n            }\n\n            if (!this.isAttachedToDOM) {\n              this.parent.add(this);\n              this.#setCanvasDims();\n            }\n\n            this.#fitToContent();\n          }\n\n          remove() {\n            if (this.canvas === null) {\n              return;\n            }\n\n            if (!this.isEmpty()) {\n              this.commit();\n            }\n\n            this.canvas.width = this.canvas.height = 0;\n            this.canvas.remove();\n            this.canvas = null;\n            this.#observer.disconnect();\n            this.#observer = null;\n            super.remove();\n          }\n\n          setParent(parent) {\n            if (!this.parent && parent) {\n              this._uiManager.removeShouldRescale(this);\n            } else if (this.parent && parent === null) {\n              this._uiManager.addShouldRescale(this);\n            }\n\n            super.setParent(parent);\n          }\n\n          onScaleChanging() {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            const width = this.width * parentWidth;\n            const height = this.height * parentHeight;\n            this.setDimensions(width, height);\n          }\n\n          enableEditMode() {\n            if (this.#disableEditing || this.canvas === null) {\n              return;\n            }\n\n            super.enableEditMode();\n            this._isDraggable = false;\n            this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n          }\n\n          disableEditMode() {\n            if (!this.isInEditMode() || this.canvas === null) {\n              return;\n            }\n\n            super.disableEditMode();\n            this._isDraggable = !this.isEmpty();\n            this.div.classList.remove(\"editing\");\n            this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n          }\n\n          onceAdded() {\n            this._isDraggable = !this.isEmpty();\n          }\n\n          isEmpty() {\n            return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;\n          }\n\n          #getInitialBBox() {\n            const {\n              parentRotation,\n              parentDimensions: [width, height]\n            } = this;\n\n            switch (parentRotation) {\n              case 90:\n                return [0, height, height, width];\n\n              case 180:\n                return [width, height, width, height];\n\n              case 270:\n                return [width, 0, height, width];\n\n              default:\n                return [0, 0, width, height];\n            }\n          }\n\n          #setStroke() {\n            const {\n              ctx,\n              color,\n              opacity,\n              thickness,\n              parentScale,\n              scaleFactor\n            } = this;\n            ctx.lineWidth = thickness * parentScale / scaleFactor;\n            ctx.lineCap = \"round\";\n            ctx.lineJoin = \"round\";\n            ctx.miterLimit = 10;\n            ctx.strokeStyle = `${color}${(0, _tools.opacityToHex)(opacity)}`;\n          }\n\n          #startDrawing(x, y) {\n            this.canvas.addEventListener(\"contextmenu\", _display_utils.noContextMenu);\n            this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n            this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\n            this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\n            this.canvas.removeEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n            this.isEditing = true;\n\n            if (!this.#isCanvasInitialized) {\n              this.#isCanvasInitialized = true;\n              this.#setCanvasDims();\n              this.thickness ||= InkEditor._defaultThickness;\n              this.color ||= InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor;\n              this.opacity ??= InkEditor._defaultOpacity;\n            }\n\n            this.currentPath.push([x, y]);\n            this.#hasSomethingToDraw = false;\n            this.#setStroke();\n\n            this.#requestFrameCallback = () => {\n              this.#drawPoints();\n\n              if (this.#requestFrameCallback) {\n                window.requestAnimationFrame(this.#requestFrameCallback);\n              }\n            };\n\n            window.requestAnimationFrame(this.#requestFrameCallback);\n          }\n\n          #draw(x, y) {\n            const [lastX, lastY] = this.currentPath.at(-1);\n\n            if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n              return;\n            }\n\n            const currentPath = this.currentPath;\n            let path2D = this.#currentPath2D;\n            currentPath.push([x, y]);\n            this.#hasSomethingToDraw = true;\n\n            if (currentPath.length <= 2) {\n              path2D.moveTo(...currentPath[0]);\n              path2D.lineTo(x, y);\n              return;\n            }\n\n            if (currentPath.length === 3) {\n              this.#currentPath2D = path2D = new Path2D();\n              path2D.moveTo(...currentPath[0]);\n            }\n\n            this.#makeBezierCurve(path2D, ...currentPath.at(-3), ...currentPath.at(-2), x, y);\n          }\n\n          #endPath() {\n            if (this.currentPath.length === 0) {\n              return;\n            }\n\n            const lastPoint = this.currentPath.at(-1);\n            this.#currentPath2D.lineTo(...lastPoint);\n          }\n\n          #stopDrawing(x, y) {\n            this.#requestFrameCallback = null;\n            x = Math.min(Math.max(x, 0), this.canvas.width);\n            y = Math.min(Math.max(y, 0), this.canvas.height);\n            this.#draw(x, y);\n            this.#endPath();\n            let bezier;\n\n            if (this.currentPath.length !== 1) {\n              bezier = this.#generateBezierPoints();\n            } else {\n              const xy = [x, y];\n              bezier = [[xy, xy.slice(), xy.slice(), xy]];\n            }\n\n            const path2D = this.#currentPath2D;\n            const currentPath = this.currentPath;\n            this.currentPath = [];\n            this.#currentPath2D = new Path2D();\n\n            const cmd = () => {\n              this.allRawPaths.push(currentPath);\n              this.paths.push(bezier);\n              this.bezierPath2D.push(path2D);\n              this.rebuild();\n            };\n\n            const undo = () => {\n              this.allRawPaths.pop();\n              this.paths.pop();\n              this.bezierPath2D.pop();\n\n              if (this.paths.length === 0) {\n                this.remove();\n              } else {\n                if (!this.canvas) {\n                  this.#createCanvas();\n                  this.#createObserver();\n                }\n\n                this.#fitToContent();\n              }\n            };\n\n            this.addCommands({\n              cmd,\n              undo,\n              mustExec: true\n            });\n          }\n\n          #drawPoints() {\n            if (!this.#hasSomethingToDraw) {\n              return;\n            }\n\n            this.#hasSomethingToDraw = false;\n            const thickness = Math.ceil(this.thickness * this.parentScale);\n            const lastPoints = this.currentPath.slice(-3);\n            const x = lastPoints.map(xy => xy[0]);\n            const y = lastPoints.map(xy => xy[1]);\n            const xMin = Math.min(...x) - thickness;\n            const xMax = Math.max(...x) + thickness;\n            const yMin = Math.min(...y) - thickness;\n            const yMax = Math.max(...y) + thickness;\n            const {\n              ctx\n            } = this;\n            ctx.save();\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n            for (const path of this.bezierPath2D) {\n              ctx.stroke(path);\n            }\n\n            ctx.stroke(this.#currentPath2D);\n            ctx.restore();\n          }\n\n          #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\n            const prevX = (x0 + x1) / 2;\n            const prevY = (y0 + y1) / 2;\n            const x3 = (x1 + x2) / 2;\n            const y3 = (y1 + y2) / 2;\n            path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);\n          }\n\n          #generateBezierPoints() {\n            const path = this.currentPath;\n\n            if (path.length <= 2) {\n              return [[path[0], path[0], path.at(-1), path.at(-1)]];\n            }\n\n            const bezierPoints = [];\n            let i;\n            let [x0, y0] = path[0];\n\n            for (i = 1; i < path.length - 2; i++) {\n              const [x1, y1] = path[i];\n              const [x2, y2] = path[i + 1];\n              const x3 = (x1 + x2) / 2;\n              const y3 = (y1 + y2) / 2;\n              const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\n              const control2 = [x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3];\n              bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\n              [x0, y0] = [x3, y3];\n            }\n\n            const [x1, y1] = path[i];\n            const [x2, y2] = path[i + 1];\n            const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\n            const control2 = [x2 + 2 * (x1 - x2) / 3, y2 + 2 * (y1 - y2) / 3];\n            bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\n            return bezierPoints;\n          }\n\n          #redraw() {\n            if (this.isEmpty()) {\n              this.#updateTransform();\n              return;\n            }\n\n            this.#setStroke();\n            const {\n              canvas,\n              ctx\n            } = this;\n            ctx.setTransform(1, 0, 0, 1, 0, 0);\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            this.#updateTransform();\n\n            for (const path of this.bezierPath2D) {\n              ctx.stroke(path);\n            }\n          }\n\n          commit() {\n            if (this.#disableEditing) {\n              return;\n            }\n\n            super.commit();\n            this.isEditing = false;\n            this.disableEditMode();\n            this.setInForeground();\n            this.#disableEditing = true;\n            this.div.classList.add(\"disabled\");\n            this.#fitToContent(true);\n            this.makeResizable();\n            this.parent.addInkEditorIfNeeded(true);\n            this.moveInDOM();\n            this.div.focus({\n              preventScroll: true\n            });\n          }\n\n          focusin(event) {\n            if (!this._focusEventsAllowed) {\n              return;\n            }\n\n            super.focusin(event);\n            this.enableEditMode();\n          }\n\n          canvasPointerdown(event) {\n            if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n              return;\n            }\n\n            this.setInForeground();\n            event.preventDefault();\n\n            if (event.type !== \"mouse\") {\n              this.div.focus();\n            }\n\n            this.#startDrawing(event.offsetX, event.offsetY);\n          }\n\n          canvasPointermove(event) {\n            event.preventDefault();\n            this.#draw(event.offsetX, event.offsetY);\n          }\n\n          canvasPointerup(event) {\n            event.preventDefault();\n            this.#endDrawing(event);\n          }\n\n          canvasPointerleave(event) {\n            this.#endDrawing(event);\n          }\n\n          #endDrawing(event) {\n            this.canvas.removeEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n            this.canvas.removeEventListener(\"pointermove\", this.#boundCanvasPointermove);\n            this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\n            this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n            setTimeout(() => {\n              this.canvas.removeEventListener(\"contextmenu\", _display_utils.noContextMenu);\n            }, 10);\n            this.#stopDrawing(event.offsetX, event.offsetY);\n            this.addToAnnotationStorage();\n            this.setInBackground();\n          }\n\n          #createCanvas() {\n            this.canvas = document.createElement(\"canvas\");\n            this.canvas.width = this.canvas.height = 0;\n            this.canvas.className = \"inkEditorCanvas\";\n\n            _editor.AnnotationEditor._l10nPromise.get(\"editor_ink_canvas_aria_label\").then(msg => this.canvas?.setAttribute(\"aria-label\", msg));\n\n            this.div.append(this.canvas);\n            this.ctx = this.canvas.getContext(\"2d\");\n          }\n\n          #createObserver() {\n            this.#observer = new ResizeObserver(entries => {\n              const rect = entries[0].contentRect;\n\n              if (rect.width && rect.height) {\n                this.setDimensions(rect.width, rect.height);\n              }\n            });\n            this.#observer.observe(this.div);\n          }\n\n          get isResizable() {\n            return !this.isEmpty() && this.#disableEditing;\n          }\n\n          render() {\n            if (this.div) {\n              return this.div;\n            }\n\n            let baseX, baseY;\n\n            if (this.width) {\n              baseX = this.x;\n              baseY = this.y;\n            }\n\n            super.render();\n\n            _editor.AnnotationEditor._l10nPromise.get(\"editor_ink2_aria_label\").then(msg => this.div?.setAttribute(\"aria-label\", msg));\n\n            const [x, y, w, h] = this.#getInitialBBox();\n            this.setAt(x, y, 0, 0);\n            this.setDims(w, h);\n            this.#createCanvas();\n\n            if (this.width) {\n              const [parentWidth, parentHeight] = this.parentDimensions;\n              this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\n              this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n              this.#isCanvasInitialized = true;\n              this.#setCanvasDims();\n              this.setDims(this.width * parentWidth, this.height * parentHeight);\n              this.#redraw();\n              this.div.classList.add(\"disabled\");\n            } else {\n              this.div.classList.add(\"editing\");\n              this.enableEditMode();\n            }\n\n            this.#createObserver();\n            return this.div;\n          }\n\n          #setCanvasDims() {\n            if (!this.#isCanvasInitialized) {\n              return;\n            }\n\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.canvas.width = Math.ceil(this.width * parentWidth);\n            this.canvas.height = Math.ceil(this.height * parentHeight);\n            this.#updateTransform();\n          }\n\n          setDimensions(width, height) {\n            const roundedWidth = Math.round(width);\n            const roundedHeight = Math.round(height);\n\n            if (this.#realWidth === roundedWidth && this.#realHeight === roundedHeight) {\n              return;\n            }\n\n            this.#realWidth = roundedWidth;\n            this.#realHeight = roundedHeight;\n            this.canvas.style.visibility = \"hidden\";\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.width = width / parentWidth;\n            this.height = height / parentHeight;\n            this.fixAndSetPosition();\n\n            if (this.#disableEditing) {\n              this.#setScaleFactor(width, height);\n            }\n\n            this.#setCanvasDims();\n            this.#redraw();\n            this.canvas.style.visibility = \"visible\";\n            this.fixDims();\n          }\n\n          #setScaleFactor(width, height) {\n            const padding = this.#getPadding();\n            const scaleFactorW = (width - padding) / this.#baseWidth;\n            const scaleFactorH = (height - padding) / this.#baseHeight;\n            this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n          }\n\n          #updateTransform() {\n            const padding = this.#getPadding() / 2;\n            this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);\n          }\n\n          static #buildPath2D(bezier) {\n            const path2D = new Path2D();\n\n            for (let i = 0, ii = bezier.length; i < ii; i++) {\n              const [first, control1, control2, second] = bezier[i];\n\n              if (i === 0) {\n                path2D.moveTo(...first);\n              }\n\n              path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);\n            }\n\n            return path2D;\n          }\n\n          static #toPDFCoordinates(points, rect, rotation) {\n            const [blX, blY, trX, trY] = rect;\n\n            switch (rotation) {\n              case 0:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  points[i] += blX;\n                  points[i + 1] = trY - points[i + 1];\n                }\n\n                break;\n\n              case 90:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  const x = points[i];\n                  points[i] = points[i + 1] + blX;\n                  points[i + 1] = x + blY;\n                }\n\n                break;\n\n              case 180:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  points[i] = trX - points[i];\n                  points[i + 1] += blY;\n                }\n\n                break;\n\n              case 270:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  const x = points[i];\n                  points[i] = trX - points[i + 1];\n                  points[i + 1] = trY - x;\n                }\n\n                break;\n\n              default:\n                throw new Error(\"Invalid rotation\");\n            }\n\n            return points;\n          }\n\n          static #fromPDFCoordinates(points, rect, rotation) {\n            const [blX, blY, trX, trY] = rect;\n\n            switch (rotation) {\n              case 0:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  points[i] -= blX;\n                  points[i + 1] = trY - points[i + 1];\n                }\n\n                break;\n\n              case 90:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  const x = points[i];\n                  points[i] = points[i + 1] - blY;\n                  points[i + 1] = x - blX;\n                }\n\n                break;\n\n              case 180:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  points[i] = trX - points[i];\n                  points[i + 1] -= blY;\n                }\n\n                break;\n\n              case 270:\n                for (let i = 0, ii = points.length; i < ii; i += 2) {\n                  const x = points[i];\n                  points[i] = trY - points[i + 1];\n                  points[i + 1] = trX - x;\n                }\n\n                break;\n\n              default:\n                throw new Error(\"Invalid rotation\");\n            }\n\n            return points;\n          }\n\n          #serializePaths(s, tx, ty, rect) {\n            const paths = [];\n            const padding = this.thickness / 2;\n            const shiftX = s * tx + padding;\n            const shiftY = s * ty + padding;\n\n            for (const bezier of this.paths) {\n              const buffer = [];\n              const points = [];\n\n              for (let j = 0, jj = bezier.length; j < jj; j++) {\n                const [first, control1, control2, second] = bezier[j];\n                const p10 = s * first[0] + shiftX;\n                const p11 = s * first[1] + shiftY;\n                const p20 = s * control1[0] + shiftX;\n                const p21 = s * control1[1] + shiftY;\n                const p30 = s * control2[0] + shiftX;\n                const p31 = s * control2[1] + shiftY;\n                const p40 = s * second[0] + shiftX;\n                const p41 = s * second[1] + shiftY;\n\n                if (j === 0) {\n                  buffer.push(p10, p11);\n                  points.push(p10, p11);\n                }\n\n                buffer.push(p20, p21, p30, p31, p40, p41);\n                points.push(p20, p21);\n\n                if (j === jj - 1) {\n                  points.push(p40, p41);\n                }\n              }\n\n              paths.push({\n                bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),\n                points: InkEditor.#toPDFCoordinates(points, rect, this.rotation)\n              });\n            }\n\n            return paths;\n          }\n\n          #getBbox() {\n            let xMin = Infinity;\n            let xMax = -Infinity;\n            let yMin = Infinity;\n            let yMax = -Infinity;\n\n            for (const path of this.paths) {\n              for (const [first, control1, control2, second] of path) {\n                const bbox = _util.Util.bezierBoundingBox(...first, ...control1, ...control2, ...second);\n\n                xMin = Math.min(xMin, bbox[0]);\n                yMin = Math.min(yMin, bbox[1]);\n                xMax = Math.max(xMax, bbox[2]);\n                yMax = Math.max(yMax, bbox[3]);\n              }\n            }\n\n            return [xMin, yMin, xMax, yMax];\n          }\n\n          #getPadding() {\n            return this.#disableEditing ? Math.ceil(this.thickness * this.parentScale) : 0;\n          }\n\n          #fitToContent() {\n            let firstTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (this.isEmpty()) {\n              return;\n            }\n\n            if (!this.#disableEditing) {\n              this.#redraw();\n              return;\n            }\n\n            const bbox = this.#getBbox();\n            const padding = this.#getPadding();\n            this.#baseWidth = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n            this.#baseHeight = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n            const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\n            const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.width = width / parentWidth;\n            this.height = height / parentHeight;\n            this.setAspectRatio(width, height);\n            const prevTranslationX = this.translationX;\n            const prevTranslationY = this.translationY;\n            this.translationX = -bbox[0];\n            this.translationY = -bbox[1];\n            this.#setCanvasDims();\n            this.#redraw();\n            this.#realWidth = width;\n            this.#realHeight = height;\n            this.setDims(width, height);\n            const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n            this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);\n          }\n\n          static deserialize(data, parent, uiManager) {\n            if (data instanceof _annotation_layer.InkAnnotationElement) {\n              return null;\n            }\n\n            const editor = super.deserialize(data, parent, uiManager);\n            editor.thickness = data.thickness;\n            editor.color = _util.Util.makeHexColor(...data.color);\n            editor.opacity = data.opacity;\n            const [pageWidth, pageHeight] = editor.pageDimensions;\n            const width = editor.width * pageWidth;\n            const height = editor.height * pageHeight;\n            const scaleFactor = editor.parentScale;\n            const padding = data.thickness / 2;\n            editor.#disableEditing = true;\n            editor.#realWidth = Math.round(width);\n            editor.#realHeight = Math.round(height);\n            const {\n              paths,\n              rect,\n              rotation\n            } = data;\n\n            for (let {\n              bezier\n            } of paths) {\n              bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);\n              const path = [];\n              editor.paths.push(path);\n              let p0 = scaleFactor * (bezier[0] - padding);\n              let p1 = scaleFactor * (bezier[1] - padding);\n\n              for (let i = 2, ii = bezier.length; i < ii; i += 6) {\n                const p10 = scaleFactor * (bezier[i] - padding);\n                const p11 = scaleFactor * (bezier[i + 1] - padding);\n                const p20 = scaleFactor * (bezier[i + 2] - padding);\n                const p21 = scaleFactor * (bezier[i + 3] - padding);\n                const p30 = scaleFactor * (bezier[i + 4] - padding);\n                const p31 = scaleFactor * (bezier[i + 5] - padding);\n                path.push([[p0, p1], [p10, p11], [p20, p21], [p30, p31]]);\n                p0 = p30;\n                p1 = p31;\n              }\n\n              const path2D = this.#buildPath2D(path);\n              editor.bezierPath2D.push(path2D);\n            }\n\n            const bbox = editor.#getBbox();\n            editor.#baseWidth = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n            editor.#baseHeight = Math.max(_editor.AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n            editor.#setScaleFactor(width, height);\n            return editor;\n          }\n\n          serialize() {\n            if (this.isEmpty()) {\n              return null;\n            }\n\n            const rect = this.getRect(0, 0);\n\n            const color = _editor.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n\n            return {\n              annotationType: _util.AnnotationEditorType.INK,\n              color,\n              thickness: this.thickness,\n              opacity: this.opacity,\n              paths: this.#serializePaths(this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),\n              pageIndex: this.pageIndex,\n              rect,\n              rotation: this.rotation,\n              structTreeParentId: this._structTreeParentId\n            };\n          }\n\n        }\n\n        exports.InkEditor = InkEditor;\n        /***/\n      },\n      /* 34 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.StampEditor = void 0;\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _editor = __w_pdfjs_require__(4);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _annotation_layer = __w_pdfjs_require__(29);\n\n        class StampEditor extends _editor.AnnotationEditor {\n          #bitmap = null;\n          #bitmapId = null;\n          #bitmapPromise = null;\n          #bitmapUrl = null;\n          #bitmapFile = null;\n          #canvas = null;\n          #observer = null;\n          #resizeTimeoutId = null;\n          #isSvg = false;\n          #hasBeenAddedInUndoStack = false;\n          static _type = \"stamp\";\n\n          constructor(params) {\n            super({ ...params,\n              name: \"stampEditor\"\n            });\n            this.#bitmapUrl = params.bitmapUrl;\n            this.#bitmapFile = params.bitmapFile;\n          }\n\n          static initialize(l10n) {\n            _editor.AnnotationEditor.initialize(l10n);\n          }\n\n          static get supportedTypes() {\n            const types = [\"apng\", \"avif\", \"bmp\", \"gif\", \"jpeg\", \"png\", \"svg+xml\", \"webp\", \"x-icon\"];\n            return (0, _util.shadow)(this, \"supportedTypes\", types.map(type => `image/${type}`));\n          }\n\n          static get supportedTypesStr() {\n            return (0, _util.shadow)(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n          }\n\n          static isHandlingMimeForPasting(mime) {\n            return this.supportedTypes.includes(mime);\n          }\n\n          static paste(item, parent) {\n            parent.pasteEditor(_util.AnnotationEditorType.STAMP, {\n              bitmapFile: item.getAsFile()\n            });\n          }\n\n          #getBitmapFetched(data) {\n            let fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n            if (!data) {\n              this.remove();\n              return;\n            }\n\n            this.#bitmap = data.bitmap;\n\n            if (!fromId) {\n              this.#bitmapId = data.id;\n              this.#isSvg = data.isSvg;\n            }\n\n            this.#createCanvas();\n          }\n\n          #getBitmapDone() {\n            this.#bitmapPromise = null;\n\n            this._uiManager.enableWaiting(false);\n\n            if (this.#canvas) {\n              this.div.focus();\n            }\n          }\n\n          #getBitmap() {\n            if (this.#bitmapId) {\n              this._uiManager.enableWaiting(true);\n\n              this._uiManager.imageManager.getFromId(this.#bitmapId).then(data => this.#getBitmapFetched(data, true)).finally(() => this.#getBitmapDone());\n\n              return;\n            }\n\n            if (this.#bitmapUrl) {\n              const url = this.#bitmapUrl;\n              this.#bitmapUrl = null;\n\n              this._uiManager.enableWaiting(true);\n\n              this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url).then(data => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());\n              return;\n            }\n\n            if (this.#bitmapFile) {\n              const file = this.#bitmapFile;\n              this.#bitmapFile = null;\n\n              this._uiManager.enableWaiting(true);\n\n              this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file).then(data => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());\n              return;\n            }\n\n            const input = document.createElement(\"input\");\n            input.type = \"file\";\n            input.accept = StampEditor.supportedTypesStr;\n            this.#bitmapPromise = new Promise(resolve => {\n              input.addEventListener(\"change\", async () => {\n                if (!input.files || input.files.length === 0) {\n                  this.remove();\n                } else {\n                  this._uiManager.enableWaiting(true);\n\n                  const data = await this._uiManager.imageManager.getFromFile(input.files[0]);\n                  this.#getBitmapFetched(data);\n                }\n\n                resolve();\n              });\n              input.addEventListener(\"cancel\", () => {\n                this.remove();\n                resolve();\n              });\n            }).finally(() => this.#getBitmapDone());\n            input.click();\n          }\n\n          remove() {\n            if (this.#bitmapId) {\n              this.#bitmap = null;\n\n              this._uiManager.imageManager.deleteId(this.#bitmapId);\n\n              this.#canvas?.remove();\n              this.#canvas = null;\n              this.#observer?.disconnect();\n              this.#observer = null;\n            }\n\n            super.remove();\n          }\n\n          rebuild() {\n            if (!this.parent) {\n              if (this.#bitmapId) {\n                this.#getBitmap();\n              }\n\n              return;\n            }\n\n            super.rebuild();\n\n            if (this.div === null) {\n              return;\n            }\n\n            if (this.#bitmapId) {\n              this.#getBitmap();\n            }\n\n            if (!this.isAttachedToDOM) {\n              this.parent.add(this);\n            }\n          }\n\n          onceAdded() {\n            this._isDraggable = true;\n            this.div.focus();\n          }\n\n          isEmpty() {\n            return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile);\n          }\n\n          get isResizable() {\n            return true;\n          }\n\n          render() {\n            if (this.div) {\n              return this.div;\n            }\n\n            let baseX, baseY;\n\n            if (this.width) {\n              baseX = this.x;\n              baseY = this.y;\n            }\n\n            super.render();\n            this.div.hidden = true;\n\n            if (this.#bitmap) {\n              this.#createCanvas();\n            } else {\n              this.#getBitmap();\n            }\n\n            if (this.width) {\n              const [parentWidth, parentHeight] = this.parentDimensions;\n              this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n            }\n\n            return this.div;\n          }\n\n          #createCanvas() {\n            const {\n              div\n            } = this;\n            let {\n              width,\n              height\n            } = this.#bitmap;\n            const [pageWidth, pageHeight] = this.pageDimensions;\n            const MAX_RATIO = 0.75;\n\n            if (this.width) {\n              width = this.width * pageWidth;\n              height = this.height * pageHeight;\n            } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {\n              const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);\n              width *= factor;\n              height *= factor;\n            }\n\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.setDims(width * parentWidth / pageWidth, height * parentHeight / pageHeight);\n\n            this._uiManager.enableWaiting(false);\n\n            const canvas = this.#canvas = document.createElement(\"canvas\");\n            div.append(canvas);\n            div.hidden = false;\n            this.#drawBitmap(width, height);\n            this.#createObserver();\n\n            if (!this.#hasBeenAddedInUndoStack) {\n              this.parent.addUndoableEditor(this);\n              this.#hasBeenAddedInUndoStack = true;\n            }\n\n            this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n              source: this,\n              details: {\n                type: \"editing\",\n                subtype: this.editorType,\n                data: {\n                  action: \"inserted_image\"\n                }\n              }\n            });\n\n            this.addAltTextButton();\n          }\n\n          #setDimensions(width, height) {\n            const [parentWidth, parentHeight] = this.parentDimensions;\n            this.width = width / parentWidth;\n            this.height = height / parentHeight;\n            this.setDims(width, height);\n\n            if (this._initialOptions?.isCentered) {\n              this.center();\n            } else {\n              this.fixAndSetPosition();\n            }\n\n            this._initialOptions = null;\n\n            if (this.#resizeTimeoutId !== null) {\n              clearTimeout(this.#resizeTimeoutId);\n            }\n\n            const TIME_TO_WAIT = 200;\n            this.#resizeTimeoutId = setTimeout(() => {\n              this.#resizeTimeoutId = null;\n              this.#drawBitmap(width, height);\n            }, TIME_TO_WAIT);\n          }\n\n          #scaleBitmap(width, height) {\n            const {\n              width: bitmapWidth,\n              height: bitmapHeight\n            } = this.#bitmap;\n            let newWidth = bitmapWidth;\n            let newHeight = bitmapHeight;\n            let bitmap = this.#bitmap;\n\n            while (newWidth > 2 * width || newHeight > 2 * height) {\n              const prevWidth = newWidth;\n              const prevHeight = newHeight;\n\n              if (newWidth > 2 * width) {\n                newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);\n              }\n\n              if (newHeight > 2 * height) {\n                newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);\n              }\n\n              const offscreen = new OffscreenCanvas(newWidth, newHeight);\n              const ctx = offscreen.getContext(\"2d\");\n              ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);\n              bitmap = offscreen.transferToImageBitmap();\n            }\n\n            return bitmap;\n          }\n\n          #drawBitmap(width, height) {\n            width = Math.ceil(width);\n            height = Math.ceil(height);\n            const canvas = this.#canvas;\n\n            if (!canvas || canvas.width === width && canvas.height === height) {\n              return;\n            }\n\n            canvas.width = width;\n            canvas.height = height;\n            const bitmap = this.#isSvg ? this.#bitmap : this.#scaleBitmap(width, height);\n            const ctx = canvas.getContext(\"2d\");\n            ctx.filter = this._uiManager.hcmFilter;\n            ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, width, height);\n          }\n\n          #serializeBitmap(toUrl) {\n            if (toUrl) {\n              if (this.#isSvg) {\n                const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\n\n                if (url) {\n                  return url;\n                }\n              }\n\n              const canvas = document.createElement(\"canvas\");\n              ({\n                width: canvas.width,\n                height: canvas.height\n              } = this.#bitmap);\n              const ctx = canvas.getContext(\"2d\");\n              ctx.drawImage(this.#bitmap, 0, 0);\n              return canvas.toDataURL();\n            }\n\n            if (this.#isSvg) {\n              const [pageWidth, pageHeight] = this.pageDimensions;\n              const width = Math.round(this.width * pageWidth * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n              const height = Math.round(this.height * pageHeight * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);\n              const offscreen = new OffscreenCanvas(width, height);\n              const ctx = offscreen.getContext(\"2d\");\n              ctx.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width, height);\n              return offscreen.transferToImageBitmap();\n            }\n\n            return structuredClone(this.#bitmap);\n          }\n\n          #createObserver() {\n            this.#observer = new ResizeObserver(entries => {\n              const rect = entries[0].contentRect;\n\n              if (rect.width && rect.height) {\n                this.#setDimensions(rect.width, rect.height);\n              }\n            });\n            this.#observer.observe(this.div);\n          }\n\n          static deserialize(data, parent, uiManager) {\n            if (data instanceof _annotation_layer.StampAnnotationElement) {\n              return null;\n            }\n\n            const editor = super.deserialize(data, parent, uiManager);\n            const {\n              rect,\n              bitmapUrl,\n              bitmapId,\n              isSvg,\n              accessibilityData\n            } = data;\n\n            if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\n              editor.#bitmapId = bitmapId;\n            } else {\n              editor.#bitmapUrl = bitmapUrl;\n            }\n\n            editor.#isSvg = isSvg;\n            const [parentWidth, parentHeight] = editor.pageDimensions;\n            editor.width = (rect[2] - rect[0]) / parentWidth;\n            editor.height = (rect[3] - rect[1]) / parentHeight;\n\n            if (accessibilityData) {\n              editor.altTextData = accessibilityData;\n            }\n\n            return editor;\n          }\n\n          serialize() {\n            let isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (this.isEmpty()) {\n              return null;\n            }\n\n            const serialized = {\n              annotationType: _util.AnnotationEditorType.STAMP,\n              bitmapId: this.#bitmapId,\n              pageIndex: this.pageIndex,\n              rect: this.getRect(0, 0),\n              rotation: this.rotation,\n              isSvg: this.#isSvg,\n              structTreeParentId: this._structTreeParentId\n            };\n\n            if (isForCopying) {\n              serialized.bitmapUrl = this.#serializeBitmap(true);\n              serialized.accessibilityData = this.altTextData;\n              return serialized;\n            }\n\n            const {\n              decorative,\n              altText\n            } = this.altTextData;\n\n            if (!decorative && altText) {\n              serialized.accessibilityData = {\n                type: \"Figure\",\n                alt: altText\n              };\n            }\n\n            if (context === null) {\n              return serialized;\n            }\n\n            context.stamps ||= new Map();\n            const area = this.#isSvg ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;\n\n            if (!context.stamps.has(this.#bitmapId)) {\n              context.stamps.set(this.#bitmapId, {\n                area,\n                serialized\n              });\n              serialized.bitmap = this.#serializeBitmap(false);\n            } else if (this.#isSvg) {\n              const prevData = context.stamps.get(this.#bitmapId);\n\n              if (area > prevData.area) {\n                prevData.area = area;\n                prevData.serialized.bitmap.close();\n                prevData.serialized.bitmap = this.#serializeBitmap(false);\n              }\n            }\n\n            return serialized;\n          }\n\n        }\n\n        exports.StampEditor = StampEditor;\n        /***/\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"AbortException\", {\n          enumerable: true,\n          get: function () {\n            return _util.AbortException;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationEditorLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_editor_layer.AnnotationEditorLayer;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationEditorParamsType\", {\n          enumerable: true,\n          get: function () {\n            return _util.AnnotationEditorParamsType;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationEditorType\", {\n          enumerable: true,\n          get: function () {\n            return _util.AnnotationEditorType;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationEditorUIManager\", {\n          enumerable: true,\n          get: function () {\n            return _tools.AnnotationEditorUIManager;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_layer.AnnotationLayer;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationMode\", {\n          enumerable: true,\n          get: function () {\n            return _util.AnnotationMode;\n          }\n        });\n        Object.defineProperty(exports, \"CMapCompressionType\", {\n          enumerable: true,\n          get: function () {\n            return _util.CMapCompressionType;\n          }\n        });\n        Object.defineProperty(exports, \"DOMSVGFactory\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.DOMSVGFactory;\n          }\n        });\n        Object.defineProperty(exports, \"FeatureTest\", {\n          enumerable: true,\n          get: function () {\n            return _util.FeatureTest;\n          }\n        });\n        Object.defineProperty(exports, \"GlobalWorkerOptions\", {\n          enumerable: true,\n          get: function () {\n            return _worker_options.GlobalWorkerOptions;\n          }\n        });\n        Object.defineProperty(exports, \"ImageKind\", {\n          enumerable: true,\n          get: function () {\n            return _util.ImageKind;\n          }\n        });\n        Object.defineProperty(exports, \"InvalidPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.InvalidPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"MissingPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.MissingPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"OPS\", {\n          enumerable: true,\n          get: function () {\n            return _util.OPS;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDataRangeTransport\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFDataRangeTransport;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDateString\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PDFDateString;\n          }\n        });\n        Object.defineProperty(exports, \"PDFWorker\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFWorker;\n          }\n        });\n        Object.defineProperty(exports, \"PasswordResponses\", {\n          enumerable: true,\n          get: function () {\n            return _util.PasswordResponses;\n          }\n        });\n        Object.defineProperty(exports, \"PermissionFlag\", {\n          enumerable: true,\n          get: function () {\n            return _util.PermissionFlag;\n          }\n        });\n        Object.defineProperty(exports, \"PixelsPerInch\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PixelsPerInch;\n          }\n        });\n        Object.defineProperty(exports, \"PromiseCapability\", {\n          enumerable: true,\n          get: function () {\n            return _util.PromiseCapability;\n          }\n        });\n        Object.defineProperty(exports, \"RenderingCancelledException\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.RenderingCancelledException;\n          }\n        });\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _api.SVGGraphics;\n          }\n        });\n        Object.defineProperty(exports, \"UnexpectedResponseException\", {\n          enumerable: true,\n          get: function () {\n            return _util.UnexpectedResponseException;\n          }\n        });\n        Object.defineProperty(exports, \"Util\", {\n          enumerable: true,\n          get: function () {\n            return _util.Util;\n          }\n        });\n        Object.defineProperty(exports, \"VerbosityLevel\", {\n          enumerable: true,\n          get: function () {\n            return _util.VerbosityLevel;\n          }\n        });\n        Object.defineProperty(exports, \"XfaLayer\", {\n          enumerable: true,\n          get: function () {\n            return _xfa_layer.XfaLayer;\n          }\n        });\n        Object.defineProperty(exports, \"build\", {\n          enumerable: true,\n          get: function () {\n            return _api.build;\n          }\n        });\n        Object.defineProperty(exports, \"createValidAbsoluteUrl\", {\n          enumerable: true,\n          get: function () {\n            return _util.createValidAbsoluteUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getDocument\", {\n          enumerable: true,\n          get: function () {\n            return _api.getDocument;\n          }\n        });\n        Object.defineProperty(exports, \"getFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getPdfFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getPdfFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getXfaPageViewport\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getXfaPageViewport;\n          }\n        });\n        Object.defineProperty(exports, \"isDataScheme\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isDataScheme;\n          }\n        });\n        Object.defineProperty(exports, \"isPdfFile\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isPdfFile;\n          }\n        });\n        Object.defineProperty(exports, \"loadScript\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.loadScript;\n          }\n        });\n        Object.defineProperty(exports, \"noContextMenu\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.noContextMenu;\n          }\n        });\n        Object.defineProperty(exports, \"normalizeUnicode\", {\n          enumerable: true,\n          get: function () {\n            return _util.normalizeUnicode;\n          }\n        });\n        Object.defineProperty(exports, \"renderTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.renderTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"setLayerDimensions\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.setLayerDimensions;\n          }\n        });\n        Object.defineProperty(exports, \"shadow\", {\n          enumerable: true,\n          get: function () {\n            return _util.shadow;\n          }\n        });\n        Object.defineProperty(exports, \"updateTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.updateTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"version\", {\n          enumerable: true,\n          get: function () {\n            return _api.version;\n          }\n        });\n\n        var _util = __w_pdfjs_require__(1);\n\n        var _api = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(6);\n\n        var _text_layer = __w_pdfjs_require__(26);\n\n        var _annotation_editor_layer = __w_pdfjs_require__(27);\n\n        var _tools = __w_pdfjs_require__(5);\n\n        var _annotation_layer = __w_pdfjs_require__(29);\n\n        var _worker_options = __w_pdfjs_require__(14);\n\n        var _xfa_layer = __w_pdfjs_require__(32);\n\n        const pdfjsVersion = '3.11.174';\n        const pdfjsBuild = 'ce8716743';\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"sources":["webpack://pdfjs-dist/build/pdf/webpack/universalModuleDefinition","webpack://pdfjs-dist/build/pdf/src/shared/util.js","webpack://pdfjs-dist/build/pdf/src/display/api.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_storage.js","webpack://pdfjs-dist/build/pdf/src/display/editor/editor.js","webpack://pdfjs-dist/build/pdf/src/display/editor/tools.js","webpack://pdfjs-dist/build/pdf/src/display/display_utils.js","webpack://pdfjs-dist/build/pdf/src/display/base_factory.js","webpack://pdfjs-dist/build/pdf/src/shared/murmurhash3.js","webpack://pdfjs-dist/build/pdf/src/display/font_loader.js","webpack://pdfjs-dist/build/pdf/src/display/node_utils.js","webpack://pdfjs-dist/build/pdf/src/display/canvas.js","webpack://pdfjs-dist/build/pdf/src/display/pattern_helper.js","webpack://pdfjs-dist/build/pdf/src/shared/image_utils.js","webpack://pdfjs-dist/build/pdf/src/display/worker_options.js","webpack://pdfjs-dist/build/pdf/src/shared/message_handler.js","webpack://pdfjs-dist/build/pdf/src/display/metadata.js","webpack://pdfjs-dist/build/pdf/src/display/optional_content_config.js","webpack://pdfjs-dist/build/pdf/src/display/transport_stream.js","webpack://pdfjs-dist/build/pdf/src/display/fetch_stream.js","webpack://pdfjs-dist/build/pdf/src/display/network_utils.js","webpack://pdfjs-dist/build/pdf/src/display/content_disposition.js","webpack://pdfjs-dist/build/pdf/src/display/network.js","webpack://pdfjs-dist/build/pdf/src/display/node_stream.js","webpack://pdfjs-dist/build/pdf/src/display/svg.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_text.js","webpack://pdfjs-dist/build/pdf/src/display/text_layer.js","webpack://pdfjs-dist/build/pdf/src/display/editor/annotation_editor_layer.js","webpack://pdfjs-dist/build/pdf/src/display/editor/freetext.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_layer.js","webpack://pdfjs-dist/build/pdf/src/shared/scripting_utils.js","webpack://pdfjs-dist/build/pdf/web/l10n_utils.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_layer.js","webpack://pdfjs-dist/build/pdf/src/display/editor/ink.js","webpack://pdfjs-dist/build/pdf/src/display/editor/stamp.js","webpack://pdfjs-dist/build/pdf/webpack/bootstrap","webpack://pdfjs-dist/build/pdf/src/pdf.js"],"names":["exports","isNodeJS","process","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","MAX_IMAGE_SIZE_TO_CACHE","LINE_FACTOR","LINE_DESCENT_FACTOR","BASELINE_FACTOR","RenderingIntentFlag","ANY","DISPLAY","PRINT","SAVE","ANNOTATIONS_FORMS","ANNOTATIONS_STORAGE","ANNOTATIONS_DISABLE","OPLIST","AnnotationMode","DISABLE","ENABLE","ENABLE_FORMS","ENABLE_STORAGE","AnnotationEditorPrefix","AnnotationEditorType","NONE","FREETEXT","STAMP","INK","AnnotationEditorParamsType","RESIZE","CREATE","FREETEXT_SIZE","FREETEXT_COLOR","FREETEXT_OPACITY","INK_COLOR","INK_THICKNESS","INK_OPACITY","PermissionFlag","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","CARET","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","VerbosityLevel","ERRORS","WARNINGS","INFOS","CMapCompressionType","BINARY","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotation","endAnnotation","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","console","unreachable","url","baseUrl","options","dots","stringToUTF8String","absoluteUrl","_isValidProtocol","nonSerializable","Object","enumerable","configurable","writable","BaseException","constructor","bytes","length","MAX_ARGUMENT_COUNT","String","strBuf","i","chunkEnd","Math","chunk","str","value","obj","buffer8","view32","isLittleEndian","shadow","isEvalSupported","isOffscreenCanvasSupported","platform","isWin","isMac","navigator","isCSSRoundSupported","globalThis","hexNumbers","Array","n","makeHexColor","scaleMinMax","temp","minMax","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","p2","r","p3","p4","inverseTransform","singularValueDecompose2dScale","transpose","a","b","c","first","second","sx","sy","normalizeRect","rect","intersect","xLow","rect1","rect2","xHigh","yLow","yHigh","bezierBoundingBox","tvalues","bounds","t","b2ac","sqrtb2ac","t1","t2","j","jlen","mt","PDFStringTranslateTable","encoding","decoder","fatal","buffer","stringToBytes","warn","ex","ii","code","decodeURIComponent","escape","unescape","encodeURIComponent","v","arr1","arr2","date","data","resolve","reason","reject","settled","NormalizeRegex","NormalizationMap","crypto","buf","bytesToString","AnnotationPrefix","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DELAYED_CLEANUP_TIMEOUT","DefaultCanvasFactory","NodeCanvasFactory","DOMCanvasFactory","DefaultCMapReaderFactory","NodeCMapReaderFactory","DOMCMapReaderFactory","DefaultFilterFactory","NodeFilterFactory","DOMFilterFactory","DefaultStandardFontDataFactory","NodeStandardFontDataFactory","DOMStandardFontDataFactory","src","task","docId","getUrlProp","getDataProp","httpHeaders","withCredentials","password","rangeTransport","rangeChunkSize","worker","docBaseUrl","cMapUrl","cMapPacked","CMapReaderFactory","standardFontDataUrl","StandardFontDataFactory","ignoreErrors","maxImageSize","canvasMaxAreaInBytes","disableFontFace","fontExtraProperties","enableXfa","ownerDocument","disableRange","disableStream","disableAutoFetch","pdfBug","useSystemFonts","useWorkerFetch","document","canvasFactory","filterFactory","styleElement","transportFactory","isCompressed","workerParams","port","GlobalWorkerOptions","workerPort","PDFWorker","fetchDocParams","apiVersion","evaluatorOptions","transportParams","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","PDFDataTransportStream","initialData","progressiveDone","contentDispositionFilename","createPDFNetworkStream","params","PDFNodeStream","PDFFetchStream","PDFNetworkStream","messageHandler","MessageHandler","transport","workerId","source","val","window","isNaN","PromiseCapability","PDFDocumentLoadingTask","promise","destroy","addRangeListener","addProgressListener","addProgressiveReadListener","addProgressiveDoneListener","onDataRange","listener","onDataProgress","onDataProgressiveRead","onDataProgressiveDone","transportReady","requestDataRange","abort","js","jsArr","annotationStorage","numPages","fingerprints","isPureXfa","allXfaHtml","getPage","getPageIndex","getDestinations","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","saveDocument","getDownloadInfo","cleanup","keepLoadedFonts","loadingParams","loadingTask","getFieldObjects","hasJSActions","getCalculationOrderIds","StatTimer","pageNumber","rotate","ref","userUnit","view","getViewport","rotation","offsetX","offsetY","dontFlip","PageViewport","viewBox","getAnnotations","intent","intentArgs","getXfa","render","annotationMode","background","optionalContentConfigPromise","annotationCanvasMap","pageColors","printAnnotationStorage","intentState","clearTimeout","intentPrint","fnArray","argsArray","lastChunk","separateAnnots","complete","error","internalRenderTask","callback","objs","commonObjs","operatorList","pageIndex","useRequestAnimationFrame","renderTask","Promise","optionalContentConfig","getOperatorList","opListTask","streamTextContent","includeMarkedContent","disableNormalization","TEXT_CONTENT_CHUNK_SIZE","highWaterMark","size","textContent","getTextContent","xfa","XfaText","readableStream","reader","done","pump","items","styles","getStructTree","_destroy","waitOn","force","resetStats","success","delayed","renderTasks","_startRenderPage","_renderPageChunk","operatorListChunk","_pumpOperatorList","annotationStorageSerializable","transfers","map","_abortOperatorList","RenderingCancelledException","delay","AbortException","curIntentState","stats","postMessage","event","structuredClone","transfer","addEventListener","removeEventListener","terminate","PDFWorkerUtil","isWorkerDisabled","fallbackWorkerSrc","fakeWorkerId","pdfjsFilePath","base","other","wrapper","URL","name","_initializeFromPort","_initialize","workerSrc","terminateEarly","onWorkerError","sendTest","testObj","_setupFakeWorker","WorkerMessageHandler","id","workerHandler","message","fromPort","cachedPort","_mainThreadWorkerMessageHandler","_setupFakeWorkerGlobal","loader","mainWorkerMessageHandler","eval","FontLoader","factory","cachedPromise","AnnotationStorage","getRenderingIntent","isOpList","renderingIntent","SerializableEmpty","PrintAnnotationStorage","cacheKey","page","terminated","setupMessageHandler","evt","loaded","total","sink","readyReason","headersCapability","fullReader","isStreamingSupported","isRangeSupported","contentLength","rangeReader","pdfInfo","PasswordException","InvalidPDFException","MissingPDFException","UnexpectedResponseException","UnknownErrorException","exception","updatePassword","exportedError","exportedData","inspectFont","font","FontFaceObject","pageProxy","imageData","height","width","filename","pageInfo","num","gen","getDocJSActions","getPageJSActions","results","OptionalContentConfig","info","metadata","Metadata","startCleanup","cleanupSuccessful","capability","get","objId","has","clear","cancel","extraDelay","completed","initializeGraphics","transparency","InternalRenderTask","CanvasGraphics","operatorListChanged","_continue","_scheduleNext","_next","version","build","hash","undefined","getValue","getRawValue","remove","AnnotationEditor","setValue","modified","getAll","setAll","resetModified","print","serializable","MurmurHash3_64","context","hasBitmap","serialized","key","JSON","parent","clone","_initialOptions","_uiManager","_focusEventsAllowed","_l10nPromise","_borderLineWidth","_colorManager","ColorManager","_zIndex","SMALL_EDITOR_SIZE","parameters","rawDims","pageY","editorType","_defaultLineColor","deleteAnnotationElement","fakeEditor","editor","uiManager","initialize","l10n","style","getComputedStyle","parseFloat","updateDefaultParams","defaultPropertiesToUpdate","isHandlingMimeForPasting","paste","propertiesToUpdate","_isDraggable","center","pageWidth","pageHeight","addCommands","currentLayer","setInBackground","setInForeground","setParent","focusin","focusout","target","commitOrRemove","commit","addToAnnotationStorage","setAt","x","y","translate","translateInPage","block","drag","tx","ty","fixAndSetPosition","screenToPageTranslation","pageTranslationToScreen","parentScale","parentRotation","parentDimensions","pageDimensions","scaledWidth","scaledHeight","FeatureTest","setDims","fixDims","widthPercent","heightPercent","getInitialTranslation","classes","div","noContextMenu","boundResizerPointermove","savedDraggable","pointerMoveOptions","passive","capture","savedX","savedY","savedWidth","savedHeight","savedParentCursor","savedCursor","pointerUpCallback","newX","newY","newWidth","newHeight","cmd","parentWidth","parentHeight","undo","mustExec","minWidth","minHeight","round","rotationMatrix","transf","invRotationMatrix","invTransf","isDiagonal","isHorizontal","getPoint","getOpposite","w","h","point","oppositePoint","transfOppositePoint","oppositeX","oppositeY","ratioX","ratioY","deltaX","deltaY","oldDiag","addAltTextButton","altText","msg","PERCENT","button","tooltip","DELAY_TO_SHOW_TOOLTIP","details","type","subtype","action","getClientDimensions","altTextData","decorative","pointerdown","isSelected","pointerMoveCallback","e","moveInDOM","_setParentAndPosition","getRect","scale","shiftX","shiftY","getRectInCurrentCoords","x2","y2","onceAdded","isEmpty","enableEditMode","disableEditMode","isInEditMode","shouldGetKeyboardEvents","needsToBeRebuilt","rebuild","serialize","isForCopying","deserialize","isResizable","makeResizable","select","unselect","updateParams","disableEditing","enableEditing","enterInEditMode","contentDiv","isEditing","setAspectRatio","aspectRatio","MIN_SIZE","deleted","element","getId","_isSVGFittingCanvas","svg","canvas","ctx","image","bitmap","refCounter","isSvg","response","fetch","mustRemoveAspectRatioPromise","ImageManager","fileReader","imageElement","imagePromise","createImageBitmap","getFromFile","lastModified","getFromUrl","getFromId","getSvgUrl","deleteId","isValidId","maxSize","add","overwriteIfSameType","keepUndo","next","redo","hasSomethingToUndo","hasSomethingToRedo","isMacKey","exec","bubbles","args","checker","_colorsMapping","_colors","colors","convert","rgb","RGB","getHexCode","Util","hasSelectedEditor","TRANSLATE_SMALL","TRANSLATE_BIG","_keyboardManager","proto","AnnotationEditorUIManager","arrowChecker","self","activeElement","small","big","pdfDocument","realScale","PixelsPerInch","layer","hcmFilter","direction","editAltText","onPageChanging","focusMainContainer","findParent","layerX","layerY","disableUserSelect","addShouldRescale","removeShouldRescale","onScaleChanging","onRotationChanging","pagesRotation","blur","focus","lastActiveElement","lastEditor","once","addEditListeners","removeEditListeners","copy","editors","cut","clipboardData","item","newEditors","deserializedEditor","keydown","onEditingAction","hasChanged","setEditingState","registerEditorTypes","getLayer","currentPageIndex","addLayer","removeLayer","updateMode","editId","mode","updateToolbar","enableWaiting","mustWait","getEditors","getEditor","addEditor","removeEditor","addDeletedAnnotationElement","isDeletedAnnotationElement","removeDeletedAnnotationElement","setActiveEditor","toggleSelected","hasSelection","setSelected","ed","delete","hasSomethingToControl","selectAll","unselectAll","translateSelectedEditors","noCommit","TIME_TO_WAIT","setUpDragSession","savedPageIndex","newPageIndex","endDragSession","mustBeAddedInUndoStack","move","dragSelectedEditors","isActive","getActive","getMode","imageManager","SVG_NS","CSS","PDF","PDF_TO_CSS_UNITS","BaseFilterFactory","addFilter","maps","mapR","tableR","tableG","tableB","bufferR","bufferG","bufferB","mapG","mapB","filter","addHCMFilter","fgColor","fgRGB","bgRGB","bgColor","table","getSteps","start","end","arr","addHighlightHCMFilter","newFgColor","fgGray","bgGray","step","newStart","fg","newStep","prev","k","newFgRGB","newBgRGB","keepHCM","feColorMatrix","feFunc","feComponentTransfer","getRGB","BaseCanvasFactory","_createCanvas","asTypedArray","isValidFetchUrl","request","XMLHttpRequest","BaseCMapReaderFactory","_fetchData","cMapData","compressionType","BaseStandardFontDataFactory","fetchData","BaseSVGFactory","_createSVG","centerX","centerY","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","offsetCanvasY","pageX","convertToViewportPoint","convertToViewportRectangle","topLeft","bottomRight","convertToPdfPoint","onlyStripPath","defaultFilename","isDataScheme","reURI","reFilename","splitURI","suggestedFilename","started","times","time","Date","timeEnd","toString","outBuf","longest","protocol","removeScriptElement","script","toDateObject","pdfDateStringRegex","matches","year","parseInt","month","day","hour","minute","universalTimeRelation","offsetHour","offsetMinute","xfaPage","color","colorRGB","span","computedColor","f","mustFlip","mustRotate","viewport","useRound","widthStr","heightStr","create","reset","canvasAndContext","skipDimensions","createElement","SEED","MASK_HIGH","MASK_LOW","seed","update","input","blockCounts","tailLength","dataUint32","k1","k2","h1","h2","C1","C2","C1_LOW","C2_LOW","hexdigest","addNativeFontFace","removeNativeFontFace","insertRule","styleSheet","loadSystemFont","fontFace","baseFontName","bind","nativeFontFace","family","rule","isFontLoadingAPISupported","hasFonts","isSyncFontLoadingSupported","supported","_queueLoadingCallback","loadingRequests","otherRequest","setTimeout","_loadTestFont","testFont","atob","_prepareFontLoadEvent","offset","chunk1","s","chunk2","called","isFontReady","loadTestFontId","COMMENT_OFFSET","spliceString","CFF_CHECKSUM_OFFSET","XXXX_VALUE","checksum","int32","btoa","translatedData","createNativeFontFace","css","weight","fontWeight","italicAngle","createFontFaceRule","mimetype","loadedName","fontFamily","getPathGenerator","cmds","jsBuf","current","fs","__non_webpack_require__","Canvas","MIN_FONT_SIZE","MAX_FONT_SIZE","MAX_GROUP_SIZE","EXECUTION_TIME","EXECUTION_STEPS","MAX_SIZE_TO_COMPILE","FULL_CHUNK_HEIGHT","destCtx","getCanvas","canvasEntry","tlX","destX","rTlX","tlY","destY","rTlY","brX","rWidth","brY","rHeight","scaleX","scaleY","POINT_TO_PROCESS_LIMIT","POINT_TYPES","width1","points","lineSize","pos","imgData","mask","elem","count","j0","sum","steps","path","p0","pp","drawOutline","setCurrentPoint","updatePathMinMax","updateRectMinMax","updateScalingPathMinMax","updateCurvePathMinMax","box","getPathBoundingBox","pathType","PathType","xStrokePad","yStrokePad","updateClipFromPath","isEmptyClip","startNewPathAndClipBox","getClippedPathBoundingBox","partialChunkHeight","fullChunks","totalChunks","chunkImgData","srcPos","dest","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","thisChunkHeight","destPos","srcDiff","kEnd","kEndUnrolled","srcByte","elemsInThisChunk","nonBlackColor","properties","sourceCtx","alpha","alpha_","r0","g0","b0","maskData","transferMap","layerData","hasBackdrop","backdrop","composeFn","PIXELS_TO_PROCESS","chunkSize","row","chunkHeight","maskCtx","layerOffsetX","layerOffsetY","layerCtx","composeSMaskBackdrop","layerBox","layerWidth","layerHeight","genericComposeSMask","smask","actualScale","interpolate","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","markedContentStack","getObject","fallback","beginDrawing","savedFillStyle","transparentCanvas","resetCtxToDefault","executeOperatorList","executionStartIdx","argsArrayLen","chunkOperations","endTime","stepper","fnId","objsPool","depObjId","continueCallback","endDrawing","cache","hcmFilterId","savedFilter","_scaleImage","img","widthScale","heightScale","paintWidth","paintHeight","tmpCanvasId","tmpCanvas","tmpCtx","_createMaskCanvas","fillColor","isPatternFill","currentTransform","mainKey","cachedImage","scaled","maskCanvas","putBinaryImageMask","maskToCanvas","cord1","cord2","drawnWidth","drawnHeight","fillCanvas","fillCtx","getImageSmoothingEnabled","drawImageAtIntegerCoords","inverse","inSMaskMode","checkSMaskState","beginSMaskMode","cacheId","scratchCanvas","copyCtxState","mirrorContextOperations","endSMaskMode","compose","dirtyBox","suspendedCtx","composeSMask","old","isScalingMatrix","minMaxForBezier","ops","xw","yh","startX","startY","consumePath","strokeColor","needRestore","paths","fontObj","typeface","bold","italic","browserFontSize","paintChar","textRenderingMode","fontSize","fillStrokeMode","isAddToPathSet","patternFill","addToPath","isFontSubpixelAAEnabled","enabled","fontSizeScale","charSpacing","wordSpacing","fontDirection","textHScale","glyphsLength","glyphs","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","patternTransform","lineWidth","chars","glyph","restoreNeeded","spacing","character","accent","vmetric","vx","vy","scaledX","scaledY","measuredWidth","characterScaleX","scaledAccentX","scaledAccentY","charWidth","showType3Text","fontMatrix","isTextInvisible","spacingLength","operatorListId","transformed","urx","ury","getColorN_Pattern","IR","baseTransform","canvasGraphicsFactory","createCanvasGraphics","TilingPattern","_getPattern","matrix","inv","x1","y1","bbox","currentCtx","group","canvasBounds","groupCtx","startTransformInverse","currentMtx","hasOwnCanvas","viewportScale","canvasWidth","canvasHeight","compileType3Glyph","skewX","skewY","positions","trans","applyTransferMapsToCanvas","applyTransferMapsToBitmap","imgToPaint","putBinaryImageData","entry","visible","tag","getSinglePixelWidth","absDet","normX","normY","getScaleForStroking","scaledLineWidth","scaledXLineWidth","scaledYLineWidth","baseArea","rescaleAndStroke","dashes","isContentVisible","SHADING","region","getPattern","_createGradient","grad","colorStop","ownerBBox","owner","applyBoundingBox","domMatrix","coords","rowSize","tmp","c1","c2","c3","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","xa","car","cag","cab","xb","cbr","cbg","cbb","x1_","x2_","ps","figure","cs","verticesPerRow","rows","cols","q","drawTriangle","_createMeshCanvas","EXPECTED_SCALE","MAX_PATTERN_SIZE","BORDER_SIZE","boundsWidth","boundsHeight","combinedScale","paddedWidth","paddedHeight","cachedCanvases","backgroundColor","drawFigure","matrixScale","temporaryPatternCanvas","PaintType","COLORED","UNCOLORED","createPatternCanvas","xstep","ystep","paintType","tilingType","x0","y0","curMatrixScale","dimx","dimy","graphics","adjustedX0","adjustedY0","adjustedX1","adjustedY1","getSizeAndScale","clipBbox","bboxWidth","bboxHeight","setFillAndStrokeStyleToContext","cssColor","FormatError","convertBlackAndWhiteToRGBA","convertRGBToRGBA","inverseDecode","widthInSource","widthRemainder","max","len32","src32","s1","s2","s3","jj","CallbackKind","UNKNOWN","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","callbackId","wrapReason","cbSourceName","cbTargetName","comObj","sourceName","targetName","result","on","ah","actionName","send","sendWithPromise","sendWithStream","streamId","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","stream","cancelCapability","streamSink","enqueue","lastDesiredSize","close","sinkCapability","onPull","onCancel","isCancelled","ready","streamController","rawData","getRaw","INTERNAL","Symbol","_setVisible","internal","array","operator","state","isVisible","policy","setVisibility","hasInitialVisibility","getOrder","getGroups","getGroup","getHash","_onReceiveData","begin","found","_progressiveDataLength","_onProgress","_onProgressiveDone","_removeRangeReader","getFullReader","queuedChunks","getRangeReader","cancelAllRequests","_enqueue","requestCapability","headersReady","read","requestsCapability","method","signal","abortController","credentials","redirect","headers","createHeaders","createFetchOptions","getResponseHeader","suggestedLength","isHttp","_disableRange","_contentLength","getArrayBuffer","_loaded","returnValues","allowRangeRequests","contentEncoding","contentDisposition","status","needsEncodingFixup","toParamRegExp","rfc2616unquote","rfc5987decode","rfc2047decode","fixupEncoding","rfc2231getparam","textdecode","iter","parts","part","quotindex","encodingend","extvalue","langvalue","text","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","xhr","requestRange","listeners","requestFull","xhrId","pendingRequest","onProgress","onStateChange","xhrStatus","ok_response_on_range_request","rangeHeader","getRequestXhr","isPendingRequest","abortRequest","_onRangeRequestReaderClosed","onHeadersReceived","onDone","onError","manager","_onHeadersReceived","fullRequestXhrId","fullRequestXhr","_onDone","_onError","_close","fileUriRegex","parsedUrl","parseUrl","_error","_setReadableStream","auth","host","handleResponse","_url","http","createRequestOptions","https","stat","SVG_DEFAULTS","fontStyle","XML_NS","XLINK_NS","createObjectURL","contentType","forceDataSchema","digits","b1","b2","b3","d1","d2","d3","d4","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","crc","len","body","crc32","deflateSyncUncompressed","Buffer","output","level","literals","maxBlockLength","deflateBlocks","idat","pi","adler","adler32","colorType","bitDepth","offsetLiterals","offsetBytes","kind","ihdr","deflateSync","pngLength","writePngChunk","encode","opTree","opListElement","fn","pf","clipCount","maskCount","shadingCount","DOMSVGFactory","loadDependencies","transformMatrix","getSVG","svgElement","convertOpList","operatorIdMapping","opList","opListToTree","executeOpTree","opTreeElement","lineWidthScale","textMatrix","pm","addFontStyle","setStrokeAlpha","setFillAlpha","_makeColorN_Pattern","_makeTilingPattern","tilingId","txstep","tystep","tiling","tx1","ty1","_makeShadingPattern","shadingId","colorStops","point0","point1","gradient","focalPoint","circlePoint","focalRadius","circleRadius","stop","op","clipId","clipPath","clipElement","_setStrokeAttributes","dashArray","imgSrc","cliprect","imgEl","maskId","definitions","rootGroup","_ensureClipGroup","clipGroup","_ensureTransformGroup","node","walk","shouldBuildText","MAX_TEXT_DIVS_TO_RENDER","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","cachedAscent","getCtx","metrics","ascent","descent","ratio","pixels","textDiv","textDivProperties","angle","hasText","geom","hasEOL","fontHeight","fontAscent","getAscent","left","top","scaleFactorStr","divStyle","shouldScaleText","absScaleX","absScaleY","prevFontFamily","prevFontSize","textDivs","textDivsLength","textContentSource","textContentItemsStr","_processItems","appendText","_layoutText","layout","br","_render","styleCache","visibility","scaleFactor","mustRescale","_initialized","editorTypes","FreeTextEditor","InkEditor","StampEditor","AnnotationEditorLayer","addInkEditorIfNeeded","enable","annotationElementIds","editables","editable","disable","hiddenAnnotationIds","getEditableAnnotation","currentActive","enableClick","disableClick","attach","annotationElementId","detach","changeParent","moveEditorInDOM","addOrRebuild","addUndoableEditor","getNextId","pasteEditor","isCentered","addNewEditor","pointerup","findNewParent","_freeTextDefaultContent","_internalPadding","_defaultColor","_defaultFontSize","KeyboardManager","_type","strings","setFontsize","savedFontsize","savedColor","_translateEmpty","preventScroll","divs","savedDisplay","savedText","newText","setText","dblclick","editorDivKeydown","editorDivFocus","editorDivBlur","editorDivInput","baseX","baseY","position","posX","posY","line","FreeTextAnnotationElement","defaultAppearanceData","fontColor","annotationType","padding","structTreeParentId","_structTreeParentId","DEFAULT_TAB_INDEX","GetElementsByNameSet","fieldType","isRenderable","ignoreBorder","createQuadrilaterals","_hasPopupData","richText","titleObj","contentsObj","hasPopupData","AnnotationElement","_createContainer","container","getRectDims","horizontalRadius","verticalRadius","radius","borderColor","setRotation","elementWidth","elementHeight","_commonActions","setColor","colorArray","ColorConverters","display","hidden","noView","noPrint","userName","readonly","required","textColor","_dispatchEventFromSandbox","commonActions","jsEvent","actions","_setDefaultPropertiesFromJS","storedData","eventProxy","detail","_createQuadrilaterals","quadPoints","trY","blY","rectTrX","rectTrY","rectBlX","rectBlY","borderWidth","svgBuffer","svgFactory","defs","rectWidth","rectHeight","_createPopup","popup","modificationDate","parentRect","borderStyle","elements","_getElementsByName","skipId","fields","fieldObj","exportValues","exportValue","domElement","show","hide","getElementsToTriggerPopup","addHighlightArea","triggers","_editOnDoubleClick","annotationEditorType","linkService","link","isBound","_bindLink","destination","_bindNamedAction","_bindAttachment","attachment","_bindJSAction","jsName","_bindResetFormAction","otherClickAction","refs","include","allFields","resetFormFields","resetFormRefs","fieldIds","field","storage","allIds","ids","showElementAndHideCanvas","_getKeyModifier","_setEventListener","baseName","valueGetter","shift","modifier","elementData","_setEventListeners","eventName","focused","_setBackgroundColor","_setTextStyle","TEXT_ALIGNMENT","roundToOneDecimal","numberOfLines","lineHeight","computedFontSize","_setRequired","setPropertyOnSiblings","fieldValue","maxLen","charLimit","fieldFormattedValues","userValue","formattedValue","lastCommittedValue","commitKey","defaultValue","blurListener","selRange","willCommit","selStart","selEnd","selectionEnd","_blurListener","match","selectionStart","change","fieldWidth","combWidth","renderForms","checked","curChecked","checkbox","buttonValue","radio","pdfButtonValue","hasAppearance","linkElement","selectElement","addAnEmptyEntry","option","optionElement","removeEmptyEntry","noneOptionElement","isExport","multiple","selectedValues","getItems","displayValue","values","multipleSelection","index","insert","selectChild","indices","changeEx","keyDown","open","elementIds","dateObject","PDFDateString","baseColor","BACKGROUND_ENLIGHT","header","title","dir","localized","XfaLayer","xfaHtml","contents","useParentRect","normalizedRect","HORIZONTAL_SPACE_AFTER_ANNOTATION","popupLeft","popupTop","_formatContents","lines","forceHide","maybeShow","content","lineSpan","square","circle","coordinate","polyline","trigger","imageResourcesPath","NullL10n","contentElement","annotations","popupToElements","elementParams","downloadManager","enableScripting","fieldObjects","isPopupAnnotation","AnnotationElementFactory","rendered","firstChild","getEditableAnnotations","CMYK_G","G_CMYK","G_RGB","G_rgb","g","scaleAndClamp","G_HTML","G","makeColorComp","RGB_G","RGB_rgb","RGB_HTML","T_HTML","T_rgb","CMYK_RGB","CMYK_rgb","CMYK_HTML","RGB_CMYK","DEFAULT_L10N_STRINGS","of_pages","page_of_pages","document_properties_kb","document_properties_mb","document_properties_date_string","document_properties_page_size_unit_inches","document_properties_page_size_unit_millimeters","document_properties_page_size_orientation_portrait","document_properties_page_size_orientation_landscape","document_properties_page_size_name_a3","document_properties_page_size_name_a4","document_properties_page_size_name_letter","document_properties_page_size_name_legal","document_properties_page_size_dimension_string","document_properties_page_size_dimension_name_string","document_properties_linearized_yes","document_properties_linearized_no","additional_layers","page_landmark","thumb_page_title","thumb_page_canvas","find_reached_top","find_reached_bottom","find_not_found","page_scale_width","page_scale_fit","page_scale_auto","page_scale_actual","page_scale_percent","loading_error","invalid_file_error","missing_file_error","unexpected_response_error","rendering_error","annotation_date_string","printing_not_supported","printing_not_ready","web_fonts_disabled","free_text2_default_content","editor_free_text2_aria_label","editor_ink2_aria_label","editor_ink_canvas_aria_label","editor_alt_text_button_label","editor_alt_text_edit_button_label","editor_alt_text_decorative_tooltip","getL10nFallback","formatL10nValue","setupStorage","html","setAttributes","attributes","isHTMLAnchorElement","root","rootHtml","stack","rootDiv","child","childHtml","el","_defaultOpacity","_defaultThickness","savedThickness","opacity","savedOpacity","thickness","currentPath","path2D","lastPoint","bezier","xy","lastPoints","xMin","xMax","yMin","yMax","prevX","prevY","bezierPoints","control1","control2","canvasPointerdown","canvasPointermove","canvasPointerup","canvasPointerleave","entries","setDimensions","roundedWidth","roundedHeight","scaleFactorW","scaleFactorH","trX","p10","p11","p20","p21","p30","p31","p40","p41","firstTime","prevTranslationX","prevTranslationY","unscaledPadding","InkAnnotationElement","supportedTypes","types","supportedTypesStr","bitmapFile","fromId","file","MAX_RATIO","factor","bitmapHeight","prevWidth","prevHeight","offscreen","StampAnnotationElement","accessibilityData","bitmapId","alt","area","prevData","pdfjsVersion","pdfjsBuild"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = root.pdfjsLib = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(globalThis, () => {\nreturn ","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\nconst MAX_IMAGE_SIZE_TO_CACHE = 10e6; // Ten megabytes.\n\n// Represent the percentage of the height of a single-line field over\n// the font size. Acrobat seems to use this value.\nconst LINE_FACTOR = 1.35;\nconst LINE_DESCENT_FACTOR = 0.35;\nconst BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  SAVE: 0x08,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\nconst AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n\nconst AnnotationEditorType = {\n  DISABLE: -1,\n  NONE: 0,\n  FREETEXT: 3,\n  STAMP: 13,\n  INK: 15,\n};\n\nconst AnnotationEditorParamsType = {\n  RESIZE: 1,\n  CREATE: 2,\n  FREETEXT_SIZE: 11,\n  FREETEXT_COLOR: 12,\n  FREETEXT_OPACITY: 13,\n  INK_COLOR: 21,\n  INK_THICKNESS: 22,\n  INK_OPACITY: 23,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  // PLEASE NOTE: We purposely keep any removed operators commented out, since\n  //              re-numbering the list would risk breaking third-party users.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  // beginAnnotations: 78,\n  // endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  // paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  switch (url?.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots?.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value, nonSerializable = false) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      prop in obj,\n      `shadow: Property \"${prop && prop.toString()}\" not found in object.`\n    );\n  }\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: !nonSerializable,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nfunction bytesToString(bytes) {\n  if (typeof bytes !== \"object\" || bytes?.length === undefined) {\n    unreachable(\"Invalid argument for bytesToString\");\n  }\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  if (typeof str !== \"string\") {\n    unreachable(\"Invalid argument for stringToBytes\");\n  }\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\nfunction string32(value) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nclass FeatureTest {\n  static get isLittleEndian() {\n    return shadow(this, \"isLittleEndian\", isLittleEndian());\n  }\n\n  static get isEvalSupported() {\n    return shadow(this, \"isEvalSupported\", isEvalSupported());\n  }\n\n  static get isOffscreenCanvasSupported() {\n    return shadow(\n      this,\n      \"isOffscreenCanvasSupported\",\n      typeof OffscreenCanvas !== \"undefined\"\n    );\n  }\n\n  static get platform() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      typeof navigator === \"undefined\"\n    ) {\n      return shadow(this, \"platform\", { isWin: false, isMac: false });\n    }\n    return shadow(this, \"platform\", {\n      isWin: navigator.platform.includes(\"Win\"),\n      isMac: navigator.platform.includes(\"Mac\"),\n    });\n  }\n\n  static get isCSSRoundSupported() {\n    return shadow(\n      this,\n      \"isCSSRoundSupported\",\n      globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\")\n    );\n  }\n}\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Apply a scaling matrix to some min/max values.\n  // If a scaling factor is negative then min and max must be\n  // swaped.\n  static scaleMinMax(transform, minMax) {\n    let temp;\n    if (transform[0]) {\n      if (transform[0] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n      }\n      minMax[0] *= transform[0];\n      minMax[1] *= transform[0];\n\n      if (transform[3] < 0) {\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[2] *= transform[3];\n      minMax[3] *= transform[3];\n    } else {\n      temp = minMax[0];\n      minMax[0] = minMax[2];\n      minMax[2] = temp;\n      temp = minMax[1];\n      minMax[1] = minMax[3];\n      minMax[3] = temp;\n\n      if (transform[1] < 0) {\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[2] *= transform[1];\n      minMax[3] *= transform[1];\n\n      if (transform[2] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n      }\n      minMax[0] *= transform[2];\n      minMax[1] *= transform[2];\n    }\n    minMax[0] += transform[4];\n    minMax[1] += transform[4];\n    minMax[2] += transform[5];\n    minMax[3] += transform[5];\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = this.applyTransform(r, m);\n    const p2 = this.applyTransform(r.slice(2, 4), m);\n    const p3 = this.applyTransform([r[0], r[3]], m);\n    const p4 = this.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'null'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    const xLow = Math.max(\n      Math.min(rect1[0], rect1[2]),\n      Math.min(rect2[0], rect2[2])\n    );\n    const xHigh = Math.min(\n      Math.max(rect1[0], rect1[2]),\n      Math.max(rect2[0], rect2[2])\n    );\n    if (xLow > xHigh) {\n      return null;\n    }\n    const yLow = Math.max(\n      Math.min(rect1[1], rect1[3]),\n      Math.min(rect2[1], rect2[3])\n    );\n    const yHigh = Math.min(\n      Math.max(rect1[1], rect1[3]),\n      Math.max(rect2[1], rect2[3])\n    );\n    if (yLow > yHigh) {\n      return null;\n    }\n\n    return [xLow, yLow, xHigh, yHigh];\n  }\n\n  // From https://github.com/adobe-webplatform/Snap.svg/blob/b365287722a72526000ac4bfcf0ce4cac2faa015/src/path.js#L852\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n    const tvalues = [],\n      bounds = [[], []];\n    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n    for (let i = 0; i < 2; ++i) {\n      if (i === 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) {\n        continue;\n      }\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    let j = tvalues.length,\n      mt;\n    const jlen = j;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      bounds[0][j] =\n        mt * mt * mt * x0 +\n        3 * mt * mt * t * x1 +\n        3 * mt * t * t * x2 +\n        t * t * t * x3;\n      bounds[1][j] =\n        mt * mt * mt * y0 +\n        3 * mt * mt * t * y1 +\n        3 * mt * t * t * y2 +\n        t * t * t * y3;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n\n    return [\n      Math.min(...bounds[0]),\n      Math.min(...bounds[1]),\n      Math.max(...bounds[0]),\n      Math.max(...bounds[1]),\n    ];\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  if (str[0] >= \"\\xEF\") {\n    let encoding;\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n      encoding = \"utf-16be\";\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n      encoding = \"utf-16le\";\n    } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\n      encoding = \"utf-8\";\n    }\n\n    if (encoding) {\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(str);\n        return decoder.decode(buffer);\n      } catch (ex) {\n        warn(`stringToPDFString: \"${ex}\".`);\n      }\n    }\n  }\n  // ISO Latin 1\n  const strBuf = [];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const code = PDFStringTranslateTable[str.charCodeAt(i)];\n    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v?.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\nclass PromiseCapability {\n  #settled = false;\n\n  constructor() {\n    /**\n     * @type {Promise<any>} The Promise object.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      /**\n       * @type {function} Fulfills the Promise.\n       */\n      this.resolve = data => {\n        this.#settled = true;\n        resolve(data);\n      };\n\n      /**\n       * @type {function} Rejects the Promise.\n       */\n      this.reject = reason => {\n        if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n          assert(reason instanceof Error, 'Expected valid \"reason\" argument.');\n        }\n        this.#settled = true;\n        reject(reason);\n      };\n    });\n  }\n\n  /**\n   * @type {boolean} If the Promise has been fulfilled/rejected.\n   */\n  get settled() {\n    return this.#settled;\n  }\n}\n\nlet NormalizeRegex = null;\nlet NormalizationMap = null;\nfunction normalizeUnicode(str) {\n  if (!NormalizeRegex) {\n    // In order to generate the following regex:\n    //  - create a PDF containing all the chars in the range 0000-FFFF with\n    //    a NFKC which is different of the char.\n    //  - copy and paste all those chars and get the ones where NFKC is\n    //    required.\n    // It appears that most the chars here contain some ligatures.\n    NormalizeRegex =\n      /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n    NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\n  }\n  return str.replaceAll(NormalizeRegex, (_, p1, p2) => {\n    return p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2);\n  });\n}\n\nfunction getUuid() {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\")\n  ) {\n    return crypto.randomUUID();\n  }\n  const buf = new Uint8Array(32);\n  if (\n    typeof crypto !== \"undefined\" &&\n    typeof crypto?.getRandomValues === \"function\"\n  ) {\n    crypto.getRandomValues(buf);\n  } else {\n    for (let i = 0; i < 32; i++) {\n      buf[i] = Math.floor(Math.random() * 255);\n    }\n  }\n  return bytesToString(buf);\n}\n\nconst AnnotationPrefix = \"pdfjs_internal_id_\";\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationEditorParamsType,\n  AnnotationEditorPrefix,\n  AnnotationEditorType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMode,\n  AnnotationPrefix,\n  AnnotationReplyType,\n  AnnotationType,\n  assert,\n  BaseException,\n  BASELINE_FACTOR,\n  bytesToString,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  FeatureTest,\n  FONT_IDENTITY_MATRIX,\n  FormatError,\n  getModificationDate,\n  getUuid,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isNodeJS,\n  LINE_DESCENT_FACTOR,\n  LINE_FACTOR,\n  MAX_IMAGE_SIZE_TO_CACHE,\n  MissingPDFException,\n  normalizeUnicode,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  PromiseCapability,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isNodeJS,\n  MAX_IMAGE_SIZE_TO_CACHE,\n  MissingPDFException,\n  PasswordException,\n  PromiseCapability,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  AnnotationStorage,\n  PrintAnnotationStorage,\n  SerializableEmpty,\n} from \"./annotation_storage.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMFilterFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  isValidFetchUrl,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeFilterFactory,\n  NodeStandardFontDataFactory,\n} from \"display-node_utils\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { PDFFetchStream } from \"display-fetch_stream\";\nimport { PDFNetworkStream } from \"display-network\";\nimport { PDFNodeStream } from \"display-node_stream\";\nimport { SVGGraphics } from \"display-svg\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\nconst DELAYED_CLEANUP_TIMEOUT = 5000; // ms\n\nconst DefaultCanvasFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultFilterFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeFilterFactory\n    : DOMFilterFactory;\nconst DefaultStandardFontDataFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef { TypedArray | ArrayBuffer | Array<number> | string } BinaryData\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string | URL} [url] - The URL of the PDF.\n * @property {BinaryData} [data] - Binary PDF data.\n *   Use TypedArrays (Uint8Array) to improve the memory usage. If PDF data is\n *   BASE64-encoded, use `atob()` to convert it to a binary string first.\n *\n *   NOTE: If TypedArrays are used they will generally be transferred to the\n *   worker-thread. This will help reduce main-thread memory usage, however\n *   it will take ownership of the TypedArrays.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not. The default value is `true`.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [isOffscreenCanvasSupported] - Determines if we can use\n *   `OffscreenCanvas` in the worker. Primarily used to improve performance of\n *   image conversion/rendering.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {number} [canvasMaxAreaInBytes] - The integer value is used to\n *   know when an image must be resized (uses `OffscreenCanvas` in the worker).\n *   If it's -1 then a possibly slow algorithm is used to guess the max value.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object} [filterFactory] - A factory instance that will be used\n *   to create SVG filters when rendering some images on the main canvas.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string | URL | TypedArray | ArrayBuffer | DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n    if (typeof src === \"string\" || src instanceof URL) {\n      src = { url: src };\n    } else if (isArrayBuffer(src)) {\n      src = { data: src };\n    }\n  }\n  if (typeof src !== \"object\") {\n    throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\n  }\n  if (!src.url && !src.data && !src.range) {\n    throw new Error(\n      \"Invalid parameter object: need either .data, .range or .url\"\n    );\n  }\n  const task = new PDFDocumentLoadingTask();\n  const { docId } = task;\n\n  const url = src.url ? getUrlProp(src.url) : null;\n  const data = src.data ? getDataProp(src.data) : null;\n  const httpHeaders = src.httpHeaders || null;\n  const withCredentials = src.withCredentials === true;\n  const password = src.password ?? null;\n  const rangeTransport =\n    src.range instanceof PDFDataRangeTransport ? src.range : null;\n  const rangeChunkSize =\n    Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0\n      ? src.rangeChunkSize\n      : DEFAULT_RANGE_CHUNK_SIZE;\n  let worker = src.worker instanceof PDFWorker ? src.worker : null;\n  const verbosity = src.verbosity;\n  // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n  // URLs anyway. We want to avoid sending them to the worker-thread, since\n  // they contain the *entire* PDF document and can thus be arbitrarily long.\n  const docBaseUrl =\n    typeof src.docBaseUrl === \"string\" && !isDataScheme(src.docBaseUrl)\n      ? src.docBaseUrl\n      : null;\n  const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n  const cMapPacked = src.cMapPacked !== false;\n  const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n  const standardFontDataUrl =\n    typeof src.standardFontDataUrl === \"string\"\n      ? src.standardFontDataUrl\n      : null;\n  const StandardFontDataFactory =\n    src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  const ignoreErrors = src.stopAtErrors !== true;\n  const maxImageSize =\n    Number.isInteger(src.maxImageSize) && src.maxImageSize > -1\n      ? src.maxImageSize\n      : -1;\n  const isEvalSupported = src.isEvalSupported !== false;\n  const isOffscreenCanvasSupported =\n    typeof src.isOffscreenCanvasSupported === \"boolean\"\n      ? src.isOffscreenCanvasSupported\n      : !isNodeJS;\n  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes)\n    ? src.canvasMaxAreaInBytes\n    : -1;\n  const disableFontFace =\n    typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : isNodeJS;\n  const fontExtraProperties = src.fontExtraProperties === true;\n  const enableXfa = src.enableXfa === true;\n  const ownerDocument = src.ownerDocument || globalThis.document;\n  const disableRange = src.disableRange === true;\n  const disableStream = src.disableStream === true;\n  const disableAutoFetch = src.disableAutoFetch === true;\n  const pdfBug = src.pdfBug === true;\n\n  // Parameters whose default values depend on other parameters.\n  const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\n  const useSystemFonts =\n    typeof src.useSystemFonts === \"boolean\"\n      ? src.useSystemFonts\n      : !isNodeJS && !disableFontFace;\n  const useWorkerFetch =\n    typeof src.useWorkerFetch === \"boolean\"\n      ? src.useWorkerFetch\n      : (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        (CMapReaderFactory === DOMCMapReaderFactory &&\n          StandardFontDataFactory === DOMStandardFontDataFactory &&\n          cMapUrl &&\n          standardFontDataUrl &&\n          isValidFetchUrl(cMapUrl, document.baseURI) &&\n          isValidFetchUrl(standardFontDataUrl, document.baseURI));\n  const canvasFactory =\n    src.canvasFactory || new DefaultCanvasFactory({ ownerDocument });\n  const filterFactory =\n    src.filterFactory || new DefaultFilterFactory({ docId, ownerDocument });\n\n  // Parameters only intended for development/testing purposes.\n  const styleElement =\n    typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")\n      ? src.styleElement\n      : null;\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(verbosity);\n\n  // Ensure that the various factories can be initialized, when necessary,\n  // since the user may provide *custom* ones.\n  const transportFactory = {\n    canvasFactory,\n    filterFactory,\n  };\n  if (!useWorkerFetch) {\n    transportFactory.cMapReaderFactory = new CMapReaderFactory({\n      baseUrl: cMapUrl,\n      isCompressed: cMapPacked,\n    });\n    transportFactory.standardFontDataFactory = new StandardFontDataFactory({\n      baseUrl: standardFontDataUrl,\n    });\n  }\n\n  if (!worker) {\n    const workerParams = {\n      verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n\n  const fetchDocParams = {\n    docId,\n    apiVersion:\n      typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n        ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n        : null,\n    data,\n    password,\n    disableAutoFetch,\n    rangeChunkSize,\n    length,\n    docBaseUrl,\n    enableXfa,\n    evaluatorOptions: {\n      maxImageSize,\n      disableFontFace,\n      ignoreErrors,\n      isEvalSupported,\n      isOffscreenCanvasSupported,\n      canvasMaxAreaInBytes,\n      fontExtraProperties,\n      useSystemFonts,\n      cMapUrl: useWorkerFetch ? cMapUrl : null,\n      standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null,\n    },\n  };\n  const transportParams = {\n    ignoreErrors,\n    isEvalSupported,\n    disableFontFace,\n    fontExtraProperties,\n    enableXfa,\n    ownerDocument,\n    disableAutoFetch,\n    pdfBug,\n    styleElement,\n  };\n\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(worker, fetchDocParams);\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length,\n              initialData: rangeTransport.initialData,\n              progressiveDone: rangeTransport.progressiveDone,\n              contentDispositionFilename:\n                rangeTransport.contentDispositionFilename,\n              disableRange,\n              disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!data) {\n          if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n            throw new Error(\"Not implemented: createPDFNetworkStream\");\n          }\n          const createPDFNetworkStream = params => {\n            if (\n              typeof PDFJSDev !== \"undefined\" &&\n              PDFJSDev.test(\"GENERIC\") &&\n              isNodeJS\n            ) {\n              return new PDFNodeStream(params);\n            }\n            return isValidFetchUrl(params.url)\n              ? new PDFFetchStream(params)\n              : new PDFNetworkStream(params);\n          };\n\n          networkStream = createPDFNetworkStream({\n            url,\n            length,\n            httpHeaders,\n            withCredentials,\n            rangeChunkSize,\n            disableRange,\n            disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            transportParams,\n            transportFactory\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    source,\n    source.data ? [source.data.buffer] : null\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\nfunction getUrlProp(val) {\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n    return null; // The 'url' is unused with `PDFDataRangeTransport`.\n  }\n  if (val instanceof URL) {\n    return val.href;\n  }\n  try {\n    // The full path is required in the 'url' field.\n    return new URL(val, window.location).href;\n  } catch {\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"GENERIC\") &&\n      isNodeJS &&\n      typeof val === \"string\"\n    ) {\n      return val; // Use the url as-is in Node.js environments.\n    }\n  }\n  throw new Error(\n    \"Invalid PDF url data: \" +\n      \"either string or URL-object is expected in the url property.\"\n  );\n}\n\nfunction getDataProp(val) {\n  // Converting string or array-like data to Uint8Array.\n  if (\n    typeof PDFJSDev !== \"undefined\" &&\n    PDFJSDev.test(\"GENERIC\") &&\n    isNodeJS &&\n    typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n    val instanceof Buffer // eslint-disable-line no-undef\n  ) {\n    throw new Error(\n      \"Please provide binary data as `Uint8Array`, rather than `Buffer`.\"\n    );\n  }\n  if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n    // Use the data as-is when it's already a Uint8Array that completely\n    // \"utilizes\" its underlying ArrayBuffer, to prevent any possible\n    // issues when transferring it to the worker-thread.\n    return val;\n  }\n  if (typeof val === \"string\") {\n    return stringToBytes(val);\n  }\n  if ((typeof val === \"object\" && !isNaN(val?.length)) || isArrayBuffer(val)) {\n    return new Uint8Array(val);\n  }\n  throw new Error(\n    \"Invalid PDF binary data: either TypedArray, \" +\n      \"string, or array-like object is expected in the data property.\"\n  );\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static #docId = 0;\n\n  constructor() {\n    this._capability = new PromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    try {\n      if (this._worker?.port) {\n        this._worker._pendingDestroy = true;\n      }\n      await this._transport?.destroy();\n    } catch (ex) {\n      if (this._worker?.port) {\n        delete this._worker._pendingDestroy;\n      }\n      throw ex;\n    }\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n *\n * NOTE: The TypedArrays passed to the constructor and relevant methods below\n * will generally be transferred to the worker-thread. This will help reduce\n * main-thread memory usage, however it will take ownership of the TypedArrays.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array|null} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = new PromiseCapability();\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  /**\n   * @param {number} begin\n   * @param {Uint8Array|null} chunk\n   */\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  /**\n   * @param {number} loaded\n   * @param {number|undefined} total\n   */\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  /**\n   * @param {Uint8Array|null} chunk\n   */\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  /**\n   * @param {number} begin\n   * @param {number} end\n   */\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"getJavaScript\", {\n        value: () => {\n          deprecated(\n            \"`PDFDocumentProxy.getJavaScript`, \" +\n              \"please use `PDFDocumentProxy.getJSActions` instead.\"\n          );\n          return this.getJSActions().then(js => {\n            if (!js) {\n              return js;\n            }\n            const jsArr = [];\n            for (const name in js) {\n              jsArr.push(...js[name]);\n            }\n            return jsArr;\n          });\n        },\n      });\n    }\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"getXFADatasets\", {\n        value: () => {\n          return this._transport.getXFADatasets();\n        },\n      });\n      Object.defineProperty(this, \"getXRefPrevValue\", {\n        value: () => {\n          return this._transport.getXRefPrevValue();\n        },\n      });\n      Object.defineProperty(this, \"getAnnotArray\", {\n        value: pageIndex => {\n          return this._transport.getAnnotArray(pageIndex);\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {Object} The filter factory instance.\n   */\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree.\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the raw data of the PDF document.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n * @property {boolean} [disableNormalization] - When true the text is *not*\n *   normalized in the worker-thread. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {CanvasRenderingContext2D} canvasContext - A 2D context of a DOM\n *   Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {CanvasGradient | CanvasPattern | string} [background] - Background\n *   to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n *\n *   NOTE: This option may be partially, or completely, ignored when the\n *   `pageColors`-option is used.\n * @property {Object} [pageColors] - Overwrites background and foreground colors\n *   with user defined ones in order to improve readability in high contrast\n *   mode.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap] - Map some\n *   annotation ids with canvases used to render them.\n * @property {PrintAnnotationStorage} [printAnnotationStorage]\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {PrintAnnotationStorage} [printAnnotationStorage]\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  #delayedCleanupTimeout = null;\n\n  #pendingCleanup = false;\n\n  constructor(pageIndex, pageInfo, transport, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    /** @type {PDFObjects} */\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this._maybeCleanupAfterRender = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    return this._transport.getAnnotations(\n      this._pageIndex,\n      intentArgs.renderingIntent\n    );\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return this._transport.getPageJSActions(this._pageIndex);\n  }\n\n  /**\n   * @type {Object} The filter factory instance.\n   */\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    background = null,\n    optionalContentConfigPromise = null,\n    annotationCanvasMap = null,\n    pageColors = null,\n    printAnnotationStorage = null,\n  }) {\n    this._stats?.time(\"Overall\");\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      printAnnotationStorage\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render...\n    this.#pendingCleanup = false;\n    // ... and ensure that a delayed cleanup is always aborted.\n    this.#abortDelayedCleanup();\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = new PromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null,\n      };\n\n      this._stats?.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup immediately once rendering has finished.\n      if (this._maybeCleanupAfterRender || intentPrint) {\n        this.#pendingCleanup = true;\n      }\n      this.#tryCleanup(/* delayed = */ !intentPrint);\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n\n      this._stats?.timeEnd(\"Rendering\");\n      this._stats?.timeEnd(\"Overall\");\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      annotationCanvasMap,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: this._transport.canvasFactory,\n      filterFactory: this._transport.filterFactory,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n      pageColors,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.destroyed) {\n          complete();\n          return;\n        }\n        this._stats?.time(\"Rendering\");\n\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    printAnnotationStorage = null,\n  } = {}) {\n    if (typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"GENERIC\")) {\n      throw new Error(\"Not implemented: getOperatorList\");\n    }\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      printAnnotationStorage,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = new PromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null,\n      };\n\n      this._stats?.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    includeMarkedContent = false,\n    disableNormalization = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        includeMarkedContent: includeMarkedContent === true,\n        disableNormalization: disableNormalization === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return this._transport.getStructTree(this._pageIndex);\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this.#pendingCleanup = false;\n    this.#abortDelayedCleanup();\n\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.#pendingCleanup = true;\n    const success = this.#tryCleanup(/* delayed = */ false);\n\n    if (resetStats && success) {\n      this._stats &&= new StatTimer();\n    }\n    return success;\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @param {boolean} [delayed] - Delay the cleanup, to e.g. improve zooming\n   *   performance in documents with large images.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  #tryCleanup(delayed = false) {\n    this.#abortDelayedCleanup();\n\n    if (!this.#pendingCleanup || this.destroyed) {\n      return false;\n    }\n    if (delayed) {\n      this.#delayedCleanupTimeout = setTimeout(() => {\n        this.#delayedCleanupTimeout = null;\n        this.#tryCleanup(/* delayed = */ false);\n      }, DELAYED_CLEANUP_TIMEOUT);\n\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n    this._intentStates.clear();\n    this.objs.clear();\n    this.#pendingCleanup = false;\n    return true;\n  }\n\n  #abortDelayedCleanup() {\n    if (this.#delayedCleanupTimeout) {\n      clearTimeout(this.#delayedCleanupTimeout);\n      this.#delayedCleanupTimeout = null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    this._stats?.timeEnd(\"Page Request\");\n\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    intentState.displayReadyCapability?.resolve(transparency);\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n    intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this.#tryCleanup(/* delayed = */ true);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({\n    renderingIntent,\n    cacheKey,\n    annotationStorageSerializable,\n  }) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n    const { map, transfers } = annotationStorageSerializable;\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage: map,\n      },\n      transfers\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this.#tryCleanup(/* delayed = */ true);\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        let delay = RENDERING_CANCELLED_TIMEOUT;\n        if (reason.extraDelay > 0 && reason.extraDelay < /* ms = */ 1000) {\n          // Above, we prevent the total delay from becoming arbitrarily large.\n          delay += reason.extraDelay;\n        }\n\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          intentState.streamReaderCancelTimeout = null;\n          this._abortOperatorList({ intentState, reason, force: true });\n        }, delay);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {StatTimer | null} Returns page stats, if enabled; returns `null`\n   *   otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  #listeners = new Set();\n\n  #deferred = Promise.resolve();\n\n  postMessage(obj, transfer) {\n    const event = {\n      data: structuredClone(\n        obj,\n        (typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"SKIP_BABEL || TESTING\")) &&\n          transfer\n          ? { transfer }\n          : null\n      ),\n    };\n\n    this.#deferred.then(() => {\n      for (const listener of this.#listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this.#listeners.add(listener);\n  }\n\n  removeEventListener(name, listener) {\n    this.#listeners.delete(listener);\n  }\n\n  terminate() {\n    this.#listeners.clear();\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Worker} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  // Check if URLs have the same origin. For non-HTTP based URLs, returns false.\n  PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {\n    let base;\n    try {\n      base = new URL(baseUrl);\n      if (!base.origin || base.origin === \"null\") {\n        return false; // non-HTTP url\n      }\n    } catch {\n      return false;\n    }\n\n    const other = new URL(otherUrl, base);\n    return base.origin === other.origin;\n  };\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static #workerPorts;\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    this.name = name;\n    this.destroyed = false;\n    this.verbosity = verbosity;\n\n    this._readyCapability = new PromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (\n      (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) &&\n      port\n    ) {\n      if (PDFWorker.#workerPorts?.has(port)) {\n        throw new Error(\"Cannot use more than one PDFWorker per port.\");\n      }\n      (PDFWorker.#workerPorts ||= new WeakMap()).set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _initializeFromPort\");\n    }\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n    // Send global setting, e.g. verbosity level.\n    this._messageHandler.send(\"configure\", {\n      verbosity: this.verbosity,\n    });\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let { workerSrc } = PDFWorker;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        const worker =\n          typeof PDFJSDev === \"undefined\" &&\n          !workerSrc.endsWith(\"/build/pdf.worker.js\")\n            ? new Worker(workerSrc, { type: \"module\" })\n            : new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array();\n          // Ensure that we can use `postMessage` transfers.\n          messageHandler.send(\"test\", testObj, [testObj.buffer]);\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker.#workerPorts?.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: fromPort\");\n    }\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    const cachedPort = this.#workerPorts?.get(params.port);\n    if (cachedPort) {\n      if (cachedPort._pendingDestroy) {\n        throw new Error(\n          \"PDFWorker.fromPort - the worker is being destroyed.\\n\" +\n            \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\"\n        );\n      }\n      return cachedPort;\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      PDFWorkerUtil.fallbackWorkerSrc !== null\n    ) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\") {\n        const worker = await import(\"pdfjs/pdf.worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  #methodPromises = new Map();\n\n  #pageCache = new Map();\n\n  #pagePromises = new Map();\n\n  #passwordCapability = null;\n\n  constructor(messageHandler, loadingTask, networkStream, params, factory) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    this.canvasFactory = factory.canvasFactory;\n    this.filterFactory = factory.filterFactory;\n    this.cMapReaderFactory = factory.cMapReaderFactory;\n    this.standardFontDataFactory = factory.standardFontDataFactory;\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.downloadInfoCapability = new PromiseCapability();\n\n    this.setupMessageHandler();\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"getXFADatasets\", {\n        value: () => {\n          return this.messageHandler.sendWithPromise(\"GetXFADatasets\", null);\n        },\n      });\n      Object.defineProperty(this, \"getXRefPrevValue\", {\n        value: () => {\n          return this.messageHandler.sendWithPromise(\"GetXRefPrevValue\", null);\n        },\n      });\n      Object.defineProperty(this, \"getAnnotArray\", {\n        value: pageIndex => {\n          return this.messageHandler.sendWithPromise(\"GetAnnotArray\", {\n            pageIndex,\n          });\n        },\n      });\n    }\n  }\n\n  #cacheSimpleMethod(name, data = null) {\n    const cachedPromise = this.#methodPromises.get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler.sendWithPromise(name, data);\n\n    this.#methodPromises.set(name, promise);\n    return promise;\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    printAnnotationStorage = null,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let annotationStorageSerializable = SerializableEmpty;\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        const annotationStorage =\n          renderingIntent & RenderingIntentFlag.PRINT &&\n          printAnnotationStorage instanceof PrintAnnotationStorage\n            ? printAnnotationStorage\n            : this.annotationStorage;\n\n        annotationStorageSerializable = annotationStorage.serializable;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${annotationStorageSerializable.hash}`,\n      annotationStorageSerializable,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = new PromiseCapability();\n\n    this.#passwordCapability?.reject(\n      new Error(\"Worker was destroyed during onPassword callback\")\n    );\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.#pageCache.values()) {\n      waitOn.push(page._destroy());\n    }\n    this.#pageCache.clear();\n    this.#pagePromises.clear();\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this.#methodPromises.clear();\n      this.filterFactory.destroy();\n\n      this._networkStream?.cancelAllRequests(\n        new AbortException(\"Worker was terminated.\")\n      );\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              value instanceof ArrayBuffer,\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = new PromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress) {\n            loadingTask.onProgress?.(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            loadingTask.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.total,\n            });\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              value instanceof ArrayBuffer,\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this.#passwordCapability = new PromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          if (password instanceof Error) {\n            this.#passwordCapability.reject(password);\n          } else {\n            this.#passwordCapability.resolve({ password });\n          }\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this.#passwordCapability.reject(ex);\n        }\n      } else {\n        this.#passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this.#passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      loadingTask.onProgress?.({\n        loaded: data.length,\n        total: data.length,\n      });\n\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.#pageCache.get(data.pageIndex);\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          const inspectFont =\n            params.pdfBug && globalThis.FontInspector?.enabled\n              ? (font, url) => globalThis.FontInspector.fontAdded(font, url)\n              : null;\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            inspectFont,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n        case \"Pattern\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return;\n      }\n\n      const pageProxy = this.#pageCache.get(pageIndex);\n      if (pageProxy.objs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          if (imageData) {\n            let length;\n            if (imageData.bitmap) {\n              const { width, height } = imageData;\n              length = width * height * 4;\n            } else {\n              length = imageData.data?.length || 0;\n            }\n\n            if (length > MAX_IMAGE_SIZE_TO_CACHE) {\n              pageProxy._maybeCleanupAfterRender = true;\n            }\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      loadingTask.onProgress?.({\n        loaded: data.loaded,\n        total: data.total,\n      });\n    });\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.cMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.cMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.standardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.standardFontDataFactory.fetch(data);\n    });\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  saveDocument() {\n    if (this.annotationStorage.size <= 0) {\n      warn(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    const { map, transfers } = this.annotationStorage.serializable;\n\n    return this.messageHandler\n      .sendWithPromise(\n        \"SaveDocument\",\n        {\n          isPureXfa: !!this._htmlForXfa,\n          numPages: this._numPages,\n          annotationStorage: map,\n          filename: this._fullReader?.filename ?? null,\n        },\n        transfers\n      )\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request.\"));\n    }\n\n    const pageIndex = pageNumber - 1,\n      cachedPromise = this.#pagePromises.get(pageIndex);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.pdfBug\n        );\n        this.#pageCache.set(pageIndex, page);\n        return page;\n      });\n    this.#pagePromises.set(pageIndex, promise);\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    if (\n      typeof ref !== \"object\" ||\n      ref === null ||\n      !Number.isInteger(ref.num) ||\n      ref.num < 0 ||\n      !Number.isInteger(ref.gen) ||\n      ref.gen < 0\n    ) {\n      return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      num: ref.num,\n      gen: ref.gen,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  getFieldObjects() {\n    return this.#cacheSimpleMethod(\"GetFieldObjects\");\n  }\n\n  hasJSActions() {\n    return this.#cacheSimpleMethod(\"HasJSActions\");\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getDocJSActions() {\n    return this.#cacheSimpleMethod(\"GetDocJSActions\");\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    const name = \"GetMetadata\",\n      cachedPromise = this.#methodPromises.get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(name, null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n    this.#methodPromises.set(name, promise);\n    return promise;\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    for (const page of this.#pageCache.values()) {\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(\n          `startCleanup: Page ${page.pageNumber} is currently rendering.`\n        );\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this.#methodPromises.clear();\n    this.filterFactory.destroy(/* keepHCM = */ true);\n  }\n\n  get loadingParams() {\n    const { disableAutoFetch, enableXfa } = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch,\n      enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n */\nclass PDFObjects {\n  #objs = Object.create(null);\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   *\n   * @param {string} objId\n   * @returns {Object}\n   */\n  #ensureObj(objId) {\n    return (this.#objs[objId] ||= {\n      capability: new PromiseCapability(),\n      data: null,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   *\n   * @param {string} objId\n   * @param {function} [callback]\n   * @returns {any}\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      const obj = this.#ensureObj(objId);\n      obj.capability.promise.then(() => callback(obj.data));\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this.#objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj?.capability.settled) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  /**\n   * @param {string} objId\n   * @returns {boolean}\n   */\n  has(objId) {\n    const obj = this.#objs[objId];\n    return obj?.capability.settled || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   *\n   * @param {string} objId\n   * @param {any} [data]\n   */\n  resolve(objId, data = null) {\n    const obj = this.#ensureObj(objId);\n    obj.data = data;\n    obj.capability.resolve();\n  }\n\n  clear() {\n    for (const objId in this.#objs) {\n      const { data } = this.#objs[objId];\n      data?.bitmap?.close(); // Release any `ImageBitmap` data.\n    }\n    this.#objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  #internalRenderTask = null;\n\n  constructor(internalRenderTask) {\n    this.#internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this.#internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   *\n   * @param {number} [extraDelay]\n   */\n  cancel(extraDelay = 0) {\n    this.#internalRenderTask.cancel(/* error = */ null, extraDelay);\n  }\n\n  /**\n   * Whether form fields are rendered separately from the main operatorList.\n   * @type {boolean}\n   */\n  get separateAnnots() {\n    const { separateAnnots } = this.#internalRenderTask.operatorList;\n    if (!separateAnnots) {\n      return false;\n    }\n    const { annotationCanvasMap } = this.#internalRenderTask;\n    return (\n      separateAnnots.form ||\n      (separateAnnots.canvas && annotationCanvasMap?.size > 0)\n    );\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static #canvasInUse = new WeakSet();\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    annotationCanvasMap,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    filterFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n    pageColors = null,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this._pdfBug = pdfBug;\n    this.pageColors = pageColors;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = new PromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.#canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, background } = this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      this.filterFactory,\n      { optionalContentConfig },\n      this.annotationCanvasMap,\n      this.pageColors\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    this.graphicsReadyCallback?.();\n  }\n\n  cancel(error = null, extraDelay = 0) {\n    this.running = false;\n    this.cancelled = true;\n    this.gfx?.endDrawing();\n    InternalRenderTask.#canvasInUse.delete(this._canvas);\n\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          extraDelay\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      this.graphicsReadyCallback ||= this._continueBound;\n      return;\n    }\n    this.stepper?.updateOperatorList(this.operatorList);\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        InternalRenderTask.#canvasInUse.delete(this._canvas);\n\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultFilterFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  PDFWorkerUtil,\n  RenderTask,\n  SVGGraphics,\n  version,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap, unreachable } from \"../shared/util.js\";\nimport { AnnotationEditor } from \"./editor/editor.js\";\nimport { MurmurHash3_64 } from \"../shared/murmurhash3.js\";\n\nconst SerializableEmpty = Object.freeze({\n  map: null,\n  hash: \"\",\n  transfers: undefined,\n});\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  #modified = false;\n\n  #storage = new Map();\n\n  constructor() {\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n    this.onAnnotationEditor = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this.#storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Get the value for a given key.\n   * @param {string} key\n   * @returns {Object}\n   */\n  getRawValue(key) {\n    return this.#storage.get(key);\n  }\n\n  /**\n   * Remove a value from the storage.\n   * @param {string} key\n   */\n  remove(key) {\n    this.#storage.delete(key);\n\n    if (this.#storage.size === 0) {\n      this.resetModified();\n    }\n\n    if (typeof this.onAnnotationEditor === \"function\") {\n      for (const value of this.#storage.values()) {\n        if (value instanceof AnnotationEditor) {\n          return;\n        }\n      }\n      this.onAnnotationEditor(null);\n    }\n  }\n\n  /**\n   * Set the value for a given key\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this.#storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this.#storage.set(key, value);\n    }\n    if (modified) {\n      this.#setModified();\n    }\n\n    if (\n      value instanceof AnnotationEditor &&\n      typeof this.onAnnotationEditor === \"function\"\n    ) {\n      this.onAnnotationEditor(value.constructor._type);\n    }\n  }\n\n  /**\n   * Check if the storage contains the given key.\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.#storage.has(key);\n  }\n\n  /**\n   * @returns {Object | null}\n   */\n  getAll() {\n    return this.#storage.size > 0 ? objectFromMap(this.#storage) : null;\n  }\n\n  /**\n   * @param {Object} obj\n   */\n  setAll(obj) {\n    for (const [key, val] of Object.entries(obj)) {\n      this.setValue(key, val);\n    }\n  }\n\n  get size() {\n    return this.#storage.size;\n  }\n\n  #setModified() {\n    if (!this.#modified) {\n      this.#modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this.#modified) {\n      this.#modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * @returns {PrintAnnotationStorage}\n   */\n  get print() {\n    return new PrintAnnotationStorage(this);\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    if (this.#storage.size === 0) {\n      return SerializableEmpty;\n    }\n    const map = new Map(),\n      hash = new MurmurHash3_64(),\n      transfers = [];\n    const context = Object.create(null);\n    let hasBitmap = false;\n\n    for (const [key, val] of this.#storage) {\n      const serialized =\n        val instanceof AnnotationEditor\n          ? val.serialize(/* isForCopying = */ false, context)\n          : val;\n      if (serialized) {\n        map.set(key, serialized);\n\n        hash.update(`${key}:${JSON.stringify(serialized)}`);\n        hasBitmap ||= !!serialized.bitmap;\n      }\n    }\n\n    if (hasBitmap) {\n      // We must transfer the bitmap data separately, since it can be changed\n      // during serialization with SVG images.\n      for (const value of map.values()) {\n        if (value.bitmap) {\n          transfers.push(value.bitmap);\n        }\n      }\n    }\n\n    return map.size > 0\n      ? { map, hash: hash.hexdigest(), transfers }\n      : SerializableEmpty;\n  }\n}\n\n/**\n * A special `AnnotationStorage` for use during printing, where the serializable\n * data is *frozen* upon initialization, to prevent scripting from modifying its\n * contents. (Necessary since printing is triggered synchronously in browsers.)\n */\nclass PrintAnnotationStorage extends AnnotationStorage {\n  #serializable;\n\n  constructor(parent) {\n    super();\n    const { map, hash, transfers } = parent.serializable;\n    // Create a *copy* of the data, since Objects are passed by reference in JS.\n    const clone = structuredClone(\n      map,\n      (typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"SKIP_BABEL || TESTING\")) &&\n        transfers\n        ? { transfer: transfers }\n        : null\n    );\n    this.#serializable = { map: clone, hash, transfers };\n  }\n\n  /**\n   * @returns {PrintAnnotationStorage}\n   */\n  // eslint-disable-next-line getter-return\n  get print() {\n    unreachable(\"Should not call PrintAnnotationStorage.print\");\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this.#serializable;\n  }\n}\n\nexport { AnnotationStorage, PrintAnnotationStorage, SerializableEmpty };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./tools.js\").AnnotationEditorUIManager} AnnotationEditorUIManager */\n\nimport { bindEvents, ColorManager } from \"./tools.js\";\nimport { FeatureTest, shadow, unreachable } from \"../../shared/util.js\";\nimport { noContextMenu } from \"../display_utils.js\";\n\n/**\n * @typedef {Object} AnnotationEditorParameters\n * @property {AnnotationEditorUIManager} uiManager - the global manager\n * @property {AnnotationEditorLayer} parent - the layer containing this editor\n * @property {string} id - editor id\n * @property {number} x - x-coordinate\n * @property {number} y - y-coordinate\n */\n\n/**\n * Base class for editors.\n */\nclass AnnotationEditor {\n  #altText = \"\";\n\n  #altTextDecorative = false;\n\n  #altTextButton = null;\n\n  #altTextTooltip = null;\n\n  #altTextTooltipTimeout = null;\n\n  #keepAspectRatio = false;\n\n  #resizersDiv = null;\n\n  #boundFocusin = this.focusin.bind(this);\n\n  #boundFocusout = this.focusout.bind(this);\n\n  #hasBeenClicked = false;\n\n  #isEditing = false;\n\n  #isInEditMode = false;\n\n  _initialOptions = Object.create(null);\n\n  _uiManager = null;\n\n  _focusEventsAllowed = true;\n\n  _l10nPromise = null;\n\n  #isDraggable = false;\n\n  #zIndex = AnnotationEditor._zIndex++;\n\n  static _borderLineWidth = -1;\n\n  static _colorManager = new ColorManager();\n\n  static _zIndex = 1;\n\n  // When one of the dimensions of an editor is smaller than this value, the\n  // button to edit the alt text is visually moved outside of the editor.\n  static SMALL_EDITOR_SIZE = 0;\n\n  /**\n   * @param {AnnotationEditorParameters} parameters\n   */\n  constructor(parameters) {\n    if (this.constructor === AnnotationEditor) {\n      unreachable(\"Cannot initialize AnnotationEditor.\");\n    }\n\n    this.parent = parameters.parent;\n    this.id = parameters.id;\n    this.width = this.height = null;\n    this.pageIndex = parameters.parent.pageIndex;\n    this.name = parameters.name;\n    this.div = null;\n    this._uiManager = parameters.uiManager;\n    this.annotationElementId = null;\n    this._willKeepAspectRatio = false;\n    this._initialOptions.isCentered = parameters.isCentered;\n    this._structTreeParentId = null;\n\n    const {\n      rotation,\n      rawDims: { pageWidth, pageHeight, pageX, pageY },\n    } = this.parent.viewport;\n\n    this.rotation = rotation;\n    this.pageRotation =\n      (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\n    this.pageDimensions = [pageWidth, pageHeight];\n    this.pageTranslation = [pageX, pageY];\n\n    const [width, height] = this.parentDimensions;\n    this.x = parameters.x / width;\n    this.y = parameters.y / height;\n\n    this.isAttachedToDOM = false;\n    this.deleted = false;\n  }\n\n  get editorType() {\n    return Object.getPrototypeOf(this).constructor._type;\n  }\n\n  static get _defaultLineColor() {\n    return shadow(\n      this,\n      \"_defaultLineColor\",\n      this._colorManager.getHexCode(\"CanvasText\")\n    );\n  }\n\n  static deleteAnnotationElement(editor) {\n    const fakeEditor = new FakeEditor({\n      id: editor.parent.getNextId(),\n      parent: editor.parent,\n      uiManager: editor._uiManager,\n    });\n    fakeEditor.annotationElementId = editor.annotationElementId;\n    fakeEditor.deleted = true;\n    fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\n  }\n\n  /**\n   * Initialize the l10n stuff for this type of editor.\n   * @param {Object} l10n\n   */\n  static initialize(l10n, options = null) {\n    AnnotationEditor._l10nPromise ||= new Map(\n      [\n        \"editor_alt_text_button_label\",\n        \"editor_alt_text_edit_button_label\",\n        \"editor_alt_text_decorative_tooltip\",\n      ].map(str => [str, l10n.get(str)])\n    );\n    if (options?.strings) {\n      for (const str of options.strings) {\n        AnnotationEditor._l10nPromise.set(str, l10n.get(str));\n      }\n    }\n    if (AnnotationEditor._borderLineWidth !== -1) {\n      return;\n    }\n    const style = getComputedStyle(document.documentElement);\n    AnnotationEditor._borderLineWidth =\n      parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\n  }\n\n  /**\n   * Update the default parameters for this type of editor.\n   * @param {number} _type\n   * @param {*} _value\n   */\n  static updateDefaultParams(_type, _value) {}\n\n  /**\n   * Get the default properties to set in the UI for this type of editor.\n   * @returns {Array}\n   */\n  static get defaultPropertiesToUpdate() {\n    return [];\n  }\n\n  /**\n   * Check if this kind of editor is able to handle the given mime type for\n   * pasting.\n   * @param {string} mime\n   * @returns {boolean}\n   */\n  static isHandlingMimeForPasting(mime) {\n    return false;\n  }\n\n  /**\n   * Extract the data from the clipboard item and delegate the creation of the\n   * editor to the parent.\n   * @param {DataTransferItem} item\n   * @param {AnnotationEditorLayer} parent\n   */\n  static paste(item, parent) {\n    unreachable(\"Not implemented\");\n  }\n\n  /**\n   * Get the properties to update in the UI for this editor.\n   * @returns {Array}\n   */\n  get propertiesToUpdate() {\n    return [];\n  }\n\n  get _isDraggable() {\n    return this.#isDraggable;\n  }\n\n  set _isDraggable(value) {\n    this.#isDraggable = value;\n    this.div?.classList.toggle(\"draggable\", value);\n  }\n\n  center() {\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    switch (this.parentRotation) {\n      case 90:\n        this.x -= (this.height * pageHeight) / (pageWidth * 2);\n        this.y += (this.width * pageWidth) / (pageHeight * 2);\n        break;\n      case 180:\n        this.x += this.width / 2;\n        this.y += this.height / 2;\n        break;\n      case 270:\n        this.x += (this.height * pageHeight) / (pageWidth * 2);\n        this.y -= (this.width * pageWidth) / (pageHeight * 2);\n        break;\n      default:\n        this.x -= this.width / 2;\n        this.y -= this.height / 2;\n        break;\n    }\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Add some commands into the CommandManager (undo/redo stuff).\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this._uiManager.addCommands(params);\n  }\n\n  get currentLayer() {\n    return this._uiManager.currentLayer;\n  }\n\n  /**\n   * This editor will be behind the others.\n   */\n  setInBackground() {\n    this.div.style.zIndex = 0;\n  }\n\n  /**\n   * This editor will be in the foreground.\n   */\n  setInForeground() {\n    this.div.style.zIndex = this.#zIndex;\n  }\n\n  setParent(parent) {\n    if (parent !== null) {\n      this.pageIndex = parent.pageIndex;\n      this.pageDimensions = parent.pageDimensions;\n    }\n    this.parent = parent;\n  }\n\n  /**\n   * onfocus callback.\n   */\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    if (!this.#hasBeenClicked) {\n      this.parent.setSelected(this);\n    } else {\n      this.#hasBeenClicked = false;\n    }\n  }\n\n  /**\n   * onblur callback.\n   * @param {FocusEvent} event\n   */\n  focusout(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n\n    if (!this.isAttachedToDOM) {\n      return;\n    }\n\n    // In case of focusout, the relatedTarget is the element which\n    // is grabbing the focus.\n    // So if the related target is an element under the div for this\n    // editor, then the editor isn't unactive.\n    const target = event.relatedTarget;\n    if (target?.closest(`#${this.id}`)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (!this.parent?.isMultipleSelection) {\n      this.commitOrRemove();\n    }\n  }\n\n  commitOrRemove() {\n    if (this.isEmpty()) {\n      this.remove();\n    } else {\n      this.commit();\n    }\n  }\n\n  /**\n   * Commit the data contained in this editor.\n   */\n  commit() {\n    this.addToAnnotationStorage();\n  }\n\n  addToAnnotationStorage() {\n    this._uiManager.addToAnnotationStorage(this);\n  }\n\n  /**\n   * Set the editor position within its parent.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} tx - x-translation in screen coordinates.\n   * @param {number} ty - y-translation in screen coordinates.\n   */\n  setAt(x, y, tx, ty) {\n    const [width, height] = this.parentDimensions;\n    [tx, ty] = this.screenToPageTranslation(tx, ty);\n\n    this.x = (x + tx) / width;\n    this.y = (y + ty) / height;\n\n    this.fixAndSetPosition();\n  }\n\n  #translate([width, height], x, y) {\n    [x, y] = this.screenToPageTranslation(x, y);\n\n    this.x += x / width;\n    this.y += y / height;\n\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Translate the editor position within its parent.\n   * @param {number} x - x-translation in screen coordinates.\n   * @param {number} y - y-translation in screen coordinates.\n   */\n  translate(x, y) {\n    this.#translate(this.parentDimensions, x, y);\n  }\n\n  /**\n   * Translate the editor position within its page and adjust the scroll\n   * in order to have the editor in the view.\n   * @param {number} x - x-translation in page coordinates.\n   * @param {number} y - y-translation in page coordinates.\n   */\n  translateInPage(x, y) {\n    this.#translate(this.pageDimensions, x, y);\n    this.div.scrollIntoView({ block: \"nearest\" });\n  }\n\n  drag(tx, ty) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.x += tx / parentWidth;\n    this.y += ty / parentHeight;\n    if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n      // It's possible to not have a parent: for example, when the user is\n      // dragging all the selected editors but this one on a page which has been\n      // destroyed.\n      // It's why we need to check for it. In such a situation, it isn't really\n      // a problem to not find a new parent: it's something which is related to\n      // what the user is seeing, hence it depends on how pages are layed out.\n\n      // The element will be outside of its parent so change the parent.\n      const { x, y } = this.div.getBoundingClientRect();\n      if (this.parent.findNewParent(this, x, y)) {\n        this.x -= Math.floor(this.x);\n        this.y -= Math.floor(this.y);\n      }\n    }\n\n    // The editor can be moved wherever the user wants, so we don't need to fix\n    // the position: it'll be done when the user will release the mouse button.\n\n    let { x, y } = this;\n    const [bx, by] = this.#getBaseTranslation();\n    x += bx;\n    y += by;\n\n    this.div.style.left = `${(100 * x).toFixed(2)}%`;\n    this.div.style.top = `${(100 * y).toFixed(2)}%`;\n    this.div.scrollIntoView({ block: \"nearest\" });\n  }\n\n  #getBaseTranslation() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const { _borderLineWidth } = AnnotationEditor;\n    const x = _borderLineWidth / parentWidth;\n    const y = _borderLineWidth / parentHeight;\n    switch (this.rotation) {\n      case 90:\n        return [-x, y];\n      case 180:\n        return [x, y];\n      case 270:\n        return [x, -y];\n      default:\n        return [-x, -y];\n    }\n  }\n\n  fixAndSetPosition() {\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    let { x, y, width, height } = this;\n    width *= pageWidth;\n    height *= pageHeight;\n    x *= pageWidth;\n    y *= pageHeight;\n\n    switch (this.rotation) {\n      case 0:\n        x = Math.max(0, Math.min(pageWidth - width, x));\n        y = Math.max(0, Math.min(pageHeight - height, y));\n        break;\n      case 90:\n        x = Math.max(0, Math.min(pageWidth - height, x));\n        y = Math.min(pageHeight, Math.max(width, y));\n        break;\n      case 180:\n        x = Math.min(pageWidth, Math.max(width, x));\n        y = Math.min(pageHeight, Math.max(height, y));\n        break;\n      case 270:\n        x = Math.min(pageWidth, Math.max(height, x));\n        y = Math.max(0, Math.min(pageHeight - width, y));\n        break;\n    }\n\n    this.x = x /= pageWidth;\n    this.y = y /= pageHeight;\n\n    const [bx, by] = this.#getBaseTranslation();\n    x += bx;\n    y += by;\n\n    const { style } = this.div;\n    style.left = `${(100 * x).toFixed(2)}%`;\n    style.top = `${(100 * y).toFixed(2)}%`;\n\n    this.moveInDOM();\n  }\n\n  static #rotatePoint(x, y, angle) {\n    switch (angle) {\n      case 90:\n        return [y, -x];\n      case 180:\n        return [-x, -y];\n      case 270:\n        return [-y, x];\n      default:\n        return [x, y];\n    }\n  }\n\n  /**\n   * Convert a screen translation into a page one.\n   * @param {number} x\n   * @param {number} y\n   */\n  screenToPageTranslation(x, y) {\n    return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);\n  }\n\n  /**\n   * Convert a page translation into a screen one.\n   * @param {number} x\n   * @param {number} y\n   */\n  pageTranslationToScreen(x, y) {\n    return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);\n  }\n\n  #getRotationMatrix(rotation) {\n    switch (rotation) {\n      case 90: {\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];\n      }\n      case 180:\n        return [-1, 0, 0, -1];\n      case 270: {\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];\n      }\n      default:\n        return [1, 0, 0, 1];\n    }\n  }\n\n  get parentScale() {\n    return this._uiManager.viewParameters.realScale;\n  }\n\n  get parentRotation() {\n    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n  }\n\n  get parentDimensions() {\n    const {\n      parentScale,\n      pageDimensions: [pageWidth, pageHeight],\n    } = this;\n    const scaledWidth = pageWidth * parentScale;\n    const scaledHeight = pageHeight * parentScale;\n    return FeatureTest.isCSSRoundSupported\n      ? [Math.round(scaledWidth), Math.round(scaledHeight)]\n      : [scaledWidth, scaledHeight];\n  }\n\n  /**\n   * Set the dimensions of this editor.\n   * @param {number} width\n   * @param {number} height\n   */\n  setDims(width, height) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.div.style.width = `${((100 * width) / parentWidth).toFixed(2)}%`;\n    if (!this.#keepAspectRatio) {\n      this.div.style.height = `${((100 * height) / parentHeight).toFixed(2)}%`;\n    }\n    this.#altTextButton?.classList.toggle(\n      \"small\",\n      width < AnnotationEditor.SMALL_EDITOR_SIZE ||\n        height < AnnotationEditor.SMALL_EDITOR_SIZE\n    );\n  }\n\n  fixDims() {\n    const { style } = this.div;\n    const { height, width } = style;\n    const widthPercent = width.endsWith(\"%\");\n    const heightPercent = !this.#keepAspectRatio && height.endsWith(\"%\");\n    if (widthPercent && heightPercent) {\n      return;\n    }\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    if (!widthPercent) {\n      style.width = `${((100 * parseFloat(width)) / parentWidth).toFixed(2)}%`;\n    }\n    if (!this.#keepAspectRatio && !heightPercent) {\n      style.height = `${((100 * parseFloat(height)) / parentHeight).toFixed(\n        2\n      )}%`;\n    }\n  }\n\n  /**\n   * Get the translation used to position this editor when it's created.\n   * @returns {Array<number>}\n   */\n  getInitialTranslation() {\n    return [0, 0];\n  }\n\n  #createResizers() {\n    if (this.#resizersDiv) {\n      return;\n    }\n    this.#resizersDiv = document.createElement(\"div\");\n    this.#resizersDiv.classList.add(\"resizers\");\n    const classes = [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"];\n    if (!this._willKeepAspectRatio) {\n      classes.push(\"topMiddle\", \"middleRight\", \"bottomMiddle\", \"middleLeft\");\n    }\n    for (const name of classes) {\n      const div = document.createElement(\"div\");\n      this.#resizersDiv.append(div);\n      div.classList.add(\"resizer\", name);\n      div.addEventListener(\n        \"pointerdown\",\n        this.#resizerPointerdown.bind(this, name)\n      );\n      div.addEventListener(\"contextmenu\", noContextMenu);\n    }\n    this.div.prepend(this.#resizersDiv);\n  }\n\n  #resizerPointerdown(name, event) {\n    event.preventDefault();\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      return;\n    }\n\n    const boundResizerPointermove = this.#resizerPointermove.bind(this, name);\n    const savedDraggable = this._isDraggable;\n    this._isDraggable = false;\n    const pointerMoveOptions = { passive: true, capture: true };\n    window.addEventListener(\n      \"pointermove\",\n      boundResizerPointermove,\n      pointerMoveOptions\n    );\n    const savedX = this.x;\n    const savedY = this.y;\n    const savedWidth = this.width;\n    const savedHeight = this.height;\n    const savedParentCursor = this.parent.div.style.cursor;\n    const savedCursor = this.div.style.cursor;\n    this.div.style.cursor = this.parent.div.style.cursor =\n      window.getComputedStyle(event.target).cursor;\n\n    const pointerUpCallback = () => {\n      this._isDraggable = savedDraggable;\n      window.removeEventListener(\"pointerup\", pointerUpCallback);\n      window.removeEventListener(\"blur\", pointerUpCallback);\n      window.removeEventListener(\n        \"pointermove\",\n        boundResizerPointermove,\n        pointerMoveOptions\n      );\n      this.parent.div.style.cursor = savedParentCursor;\n      this.div.style.cursor = savedCursor;\n\n      const newX = this.x;\n      const newY = this.y;\n      const newWidth = this.width;\n      const newHeight = this.height;\n      if (\n        newX === savedX &&\n        newY === savedY &&\n        newWidth === savedWidth &&\n        newHeight === savedHeight\n      ) {\n        return;\n      }\n\n      this.addCommands({\n        cmd: () => {\n          this.width = newWidth;\n          this.height = newHeight;\n          this.x = newX;\n          this.y = newY;\n          const [parentWidth, parentHeight] = this.parentDimensions;\n          this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n          this.fixAndSetPosition();\n        },\n        undo: () => {\n          this.width = savedWidth;\n          this.height = savedHeight;\n          this.x = savedX;\n          this.y = savedY;\n          const [parentWidth, parentHeight] = this.parentDimensions;\n          this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\n          this.fixAndSetPosition();\n        },\n        mustExec: true,\n      });\n    };\n    window.addEventListener(\"pointerup\", pointerUpCallback);\n    // If the user switches to another window (with alt+tab), then we end the\n    // resize session.\n    window.addEventListener(\"blur\", pointerUpCallback);\n  }\n\n  #resizerPointermove(name, event) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const savedX = this.x;\n    const savedY = this.y;\n    const savedWidth = this.width;\n    const savedHeight = this.height;\n    const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;\n    const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;\n\n    // 10000 because we multiply by 100 and use toFixed(2) in fixAndSetPosition.\n    // Without rounding, the positions of the corners other than the top left\n    // one can be slightly wrong.\n    const round = x => Math.round(x * 10000) / 10000;\n    const rotationMatrix = this.#getRotationMatrix(this.rotation);\n    const transf = (x, y) => [\n      rotationMatrix[0] * x + rotationMatrix[2] * y,\n      rotationMatrix[1] * x + rotationMatrix[3] * y,\n    ];\n    const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);\n    const invTransf = (x, y) => [\n      invRotationMatrix[0] * x + invRotationMatrix[2] * y,\n      invRotationMatrix[1] * x + invRotationMatrix[3] * y,\n    ];\n    let getPoint;\n    let getOpposite;\n    let isDiagonal = false;\n    let isHorizontal = false;\n\n    switch (name) {\n      case \"topLeft\":\n        isDiagonal = true;\n        getPoint = (w, h) => [0, 0];\n        getOpposite = (w, h) => [w, h];\n        break;\n      case \"topMiddle\":\n        getPoint = (w, h) => [w / 2, 0];\n        getOpposite = (w, h) => [w / 2, h];\n        break;\n      case \"topRight\":\n        isDiagonal = true;\n        getPoint = (w, h) => [w, 0];\n        getOpposite = (w, h) => [0, h];\n        break;\n      case \"middleRight\":\n        isHorizontal = true;\n        getPoint = (w, h) => [w, h / 2];\n        getOpposite = (w, h) => [0, h / 2];\n        break;\n      case \"bottomRight\":\n        isDiagonal = true;\n        getPoint = (w, h) => [w, h];\n        getOpposite = (w, h) => [0, 0];\n        break;\n      case \"bottomMiddle\":\n        getPoint = (w, h) => [w / 2, h];\n        getOpposite = (w, h) => [w / 2, 0];\n        break;\n      case \"bottomLeft\":\n        isDiagonal = true;\n        getPoint = (w, h) => [0, h];\n        getOpposite = (w, h) => [w, 0];\n        break;\n      case \"middleLeft\":\n        isHorizontal = true;\n        getPoint = (w, h) => [0, h / 2];\n        getOpposite = (w, h) => [w, h / 2];\n        break;\n    }\n\n    const point = getPoint(savedWidth, savedHeight);\n    const oppositePoint = getOpposite(savedWidth, savedHeight);\n    let transfOppositePoint = transf(...oppositePoint);\n    const oppositeX = round(savedX + transfOppositePoint[0]);\n    const oppositeY = round(savedY + transfOppositePoint[1]);\n    let ratioX = 1;\n    let ratioY = 1;\n\n    let [deltaX, deltaY] = this.screenToPageTranslation(\n      event.movementX,\n      event.movementY\n    );\n    [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);\n\n    if (isDiagonal) {\n      const oldDiag = Math.hypot(savedWidth, savedHeight);\n      ratioX = ratioY = Math.max(\n        Math.min(\n          Math.hypot(\n            oppositePoint[0] - point[0] - deltaX,\n            oppositePoint[1] - point[1] - deltaY\n          ) / oldDiag,\n          // Avoid the editor to be larger than the page.\n          1 / savedWidth,\n          1 / savedHeight\n        ),\n        // Avoid the editor to be smaller than the minimum size.\n        minWidth / savedWidth,\n        minHeight / savedHeight\n      );\n    } else if (isHorizontal) {\n      ratioX =\n        Math.max(\n          minWidth,\n          Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))\n        ) / savedWidth;\n    } else {\n      ratioY =\n        Math.max(\n          minHeight,\n          Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))\n        ) / savedHeight;\n    }\n\n    const newWidth = round(savedWidth * ratioX);\n    const newHeight = round(savedHeight * ratioY);\n    transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\n    const newX = oppositeX - transfOppositePoint[0];\n    const newY = oppositeY - transfOppositePoint[1];\n\n    this.width = newWidth;\n    this.height = newHeight;\n    this.x = newX;\n    this.y = newY;\n\n    this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n    this.fixAndSetPosition();\n  }\n\n  async addAltTextButton() {\n    if (this.#altTextButton) {\n      return;\n    }\n    const altText = (this.#altTextButton = document.createElement(\"button\"));\n    altText.className = \"altText\";\n    const msg = await AnnotationEditor._l10nPromise.get(\n      \"editor_alt_text_button_label\"\n    );\n    altText.textContent = msg;\n    altText.setAttribute(\"aria-label\", msg);\n    altText.tabIndex = \"0\";\n    altText.addEventListener(\"contextmenu\", noContextMenu);\n    altText.addEventListener(\"pointerdown\", event => event.stopPropagation());\n    altText.addEventListener(\n      \"click\",\n      event => {\n        event.preventDefault();\n        this._uiManager.editAltText(this);\n      },\n      { capture: true }\n    );\n    altText.addEventListener(\"keydown\", event => {\n      if (event.target === altText && event.key === \"Enter\") {\n        event.preventDefault();\n        this._uiManager.editAltText(this);\n      }\n    });\n    this.#setAltTextButtonState();\n    this.div.append(altText);\n    if (!AnnotationEditor.SMALL_EDITOR_SIZE) {\n      // We take the width of the alt text button and we add 40% to it to be\n      // sure to have enough space for it.\n      const PERCENT = 40;\n      AnnotationEditor.SMALL_EDITOR_SIZE = Math.min(\n        128,\n        Math.round(altText.getBoundingClientRect().width * (1 + PERCENT / 100))\n      );\n    }\n  }\n\n  async #setAltTextButtonState() {\n    const button = this.#altTextButton;\n    if (!button) {\n      return;\n    }\n    if (!this.#altText && !this.#altTextDecorative) {\n      button.classList.remove(\"done\");\n      this.#altTextTooltip?.remove();\n      return;\n    }\n    AnnotationEditor._l10nPromise\n      .get(\"editor_alt_text_edit_button_label\")\n      .then(msg => {\n        button.setAttribute(\"aria-label\", msg);\n      });\n\n    let tooltip = this.#altTextTooltip;\n    if (!tooltip) {\n      this.#altTextTooltip = tooltip = document.createElement(\"span\");\n      tooltip.className = \"tooltip\";\n      tooltip.setAttribute(\"role\", \"tooltip\");\n      const id = (tooltip.id = `alt-text-tooltip-${this.id}`);\n      button.setAttribute(\"aria-describedby\", id);\n\n      const DELAY_TO_SHOW_TOOLTIP = 100;\n      button.addEventListener(\"mouseenter\", () => {\n        this.#altTextTooltipTimeout = setTimeout(() => {\n          this.#altTextTooltipTimeout = null;\n          this.#altTextTooltip.classList.add(\"show\");\n          this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n            source: this,\n            details: {\n              type: \"editing\",\n              subtype: this.editorType,\n              data: {\n                action: \"alt_text_tooltip\",\n              },\n            },\n          });\n        }, DELAY_TO_SHOW_TOOLTIP);\n      });\n      button.addEventListener(\"mouseleave\", () => {\n        clearTimeout(this.#altTextTooltipTimeout);\n        this.#altTextTooltipTimeout = null;\n        this.#altTextTooltip?.classList.remove(\"show\");\n      });\n    }\n    button.classList.add(\"done\");\n    tooltip.innerText = this.#altTextDecorative\n      ? await AnnotationEditor._l10nPromise.get(\n          \"editor_alt_text_decorative_tooltip\"\n        )\n      : this.#altText;\n\n    if (!tooltip.parentNode) {\n      button.append(tooltip);\n    }\n  }\n\n  getClientDimensions() {\n    return this.div.getBoundingClientRect();\n  }\n\n  get altTextData() {\n    return {\n      altText: this.#altText,\n      decorative: this.#altTextDecorative,\n    };\n  }\n\n  set altTextData({ altText, decorative }) {\n    if (this.#altText === altText && this.#altTextDecorative === decorative) {\n      return;\n    }\n    this.#altText = altText;\n    this.#altTextDecorative = decorative;\n    this.#setAltTextButtonState();\n  }\n\n  /**\n   * Render this editor in a div.\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    this.div = document.createElement(\"div\");\n    this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n    this.div.className = this.name;\n    this.div.setAttribute(\"id\", this.id);\n    this.div.setAttribute(\"tabIndex\", 0);\n\n    this.setInForeground();\n\n    this.div.addEventListener(\"focusin\", this.#boundFocusin);\n    this.div.addEventListener(\"focusout\", this.#boundFocusout);\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    if (this.parentRotation % 180 !== 0) {\n      this.div.style.maxWidth = `${((100 * parentHeight) / parentWidth).toFixed(\n        2\n      )}%`;\n      this.div.style.maxHeight = `${(\n        (100 * parentWidth) /\n        parentHeight\n      ).toFixed(2)}%`;\n    }\n\n    const [tx, ty] = this.getInitialTranslation();\n    this.translate(tx, ty);\n\n    bindEvents(this, this.div, [\"pointerdown\"]);\n\n    return this.div;\n  }\n\n  /**\n   * Onpointerdown callback.\n   * @param {PointerEvent} event\n   */\n  pointerdown(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Avoid to focus this editor because of a non-left click.\n      event.preventDefault();\n      return;\n    }\n\n    this.#hasBeenClicked = true;\n\n    this.#setUpDragSession(event);\n  }\n\n  #setUpDragSession(event) {\n    if (!this._isDraggable) {\n      return;\n    }\n\n    const isSelected = this._uiManager.isSelected(this);\n    this._uiManager.setUpDragSession();\n\n    let pointerMoveOptions, pointerMoveCallback;\n    if (isSelected) {\n      pointerMoveOptions = { passive: true, capture: true };\n      pointerMoveCallback = e => {\n        const [tx, ty] = this.screenToPageTranslation(e.movementX, e.movementY);\n        this._uiManager.dragSelectedEditors(tx, ty);\n      };\n      window.addEventListener(\n        \"pointermove\",\n        pointerMoveCallback,\n        pointerMoveOptions\n      );\n    }\n\n    const pointerUpCallback = () => {\n      window.removeEventListener(\"pointerup\", pointerUpCallback);\n      window.removeEventListener(\"blur\", pointerUpCallback);\n      if (isSelected) {\n        window.removeEventListener(\n          \"pointermove\",\n          pointerMoveCallback,\n          pointerMoveOptions\n        );\n      }\n\n      this.#hasBeenClicked = false;\n      if (!this._uiManager.endDragSession()) {\n        const { isMac } = FeatureTest.platform;\n        if (\n          (event.ctrlKey && !isMac) ||\n          event.shiftKey ||\n          (event.metaKey && isMac)\n        ) {\n          this.parent.toggleSelected(this);\n        } else {\n          this.parent.setSelected(this);\n        }\n      }\n    };\n    window.addEventListener(\"pointerup\", pointerUpCallback);\n    // If the user is using alt+tab during the dragging session, the pointerup\n    // event could be not fired, but a blur event is fired so we can use it in\n    // order to interrupt the dragging session.\n    window.addEventListener(\"blur\", pointerUpCallback);\n  }\n\n  moveInDOM() {\n    this.parent?.moveEditorInDOM(this);\n  }\n\n  _setParentAndPosition(parent, x, y) {\n    parent.changeParent(this);\n    this.x = x;\n    this.y = y;\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Convert the current rect into a page one.\n   */\n  getRect(tx, ty) {\n    const scale = this.parentScale;\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    const [pageX, pageY] = this.pageTranslation;\n    const shiftX = tx / scale;\n    const shiftY = ty / scale;\n    const x = this.x * pageWidth;\n    const y = this.y * pageHeight;\n    const width = this.width * pageWidth;\n    const height = this.height * pageHeight;\n\n    switch (this.rotation) {\n      case 0:\n        return [\n          x + shiftX + pageX,\n          pageHeight - y - shiftY - height + pageY,\n          x + shiftX + width + pageX,\n          pageHeight - y - shiftY + pageY,\n        ];\n      case 90:\n        return [\n          x + shiftY + pageX,\n          pageHeight - y + shiftX + pageY,\n          x + shiftY + height + pageX,\n          pageHeight - y + shiftX + width + pageY,\n        ];\n      case 180:\n        return [\n          x - shiftX - width + pageX,\n          pageHeight - y + shiftY + pageY,\n          x - shiftX + pageX,\n          pageHeight - y + shiftY + height + pageY,\n        ];\n      case 270:\n        return [\n          x - shiftY - height + pageX,\n          pageHeight - y - shiftX - width + pageY,\n          x - shiftY + pageX,\n          pageHeight - y - shiftX + pageY,\n        ];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n\n  getRectInCurrentCoords(rect, pageHeight) {\n    const [x1, y1, x2, y2] = rect;\n\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    switch (this.rotation) {\n      case 0:\n        return [x1, pageHeight - y2, width, height];\n      case 90:\n        return [x1, pageHeight - y1, height, width];\n      case 180:\n        return [x2, pageHeight - y1, width, height];\n      case 270:\n        return [x2, pageHeight - y2, height, width];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n\n  /**\n   * Executed once this editor has been rendered.\n   */\n  onceAdded() {}\n\n  /**\n   * Check if the editor contains something.\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return false;\n  }\n\n  /**\n   * Enable edit mode.\n   */\n  enableEditMode() {\n    this.#isInEditMode = true;\n  }\n\n  /**\n   * Disable edit mode.\n   */\n  disableEditMode() {\n    this.#isInEditMode = false;\n  }\n\n  /**\n   * Check if the editor is edited.\n   * @returns {boolean}\n   */\n  isInEditMode() {\n    return this.#isInEditMode;\n  }\n\n  /**\n   * If it returns true, then this editor handle the keyboard\n   * events itself.\n   * @returns {boolean}\n   */\n  shouldGetKeyboardEvents() {\n    return false;\n  }\n\n  /**\n   * Check if this editor needs to be rebuilt or not.\n   * @returns {boolean}\n   */\n  needsToBeRebuilt() {\n    return this.div && !this.isAttachedToDOM;\n  }\n\n  /**\n   * Rebuild the editor in case it has been removed on undo.\n   *\n   * To implement in subclasses.\n   */\n  rebuild() {\n    this.div?.addEventListener(\"focusin\", this.#boundFocusin);\n    this.div?.addEventListener(\"focusout\", this.#boundFocusout);\n  }\n\n  /**\n   * Serialize the editor.\n   * The result of the serialization will be used to construct a\n   * new annotation to add to the pdf document.\n   *\n   * To implement in subclasses.\n   * @param {boolean} isForCopying\n   * @param {Object} [context]\n   */\n  serialize(isForCopying = false, context = null) {\n    unreachable(\"An editor must be serializable\");\n  }\n\n  /**\n   * Deserialize the editor.\n   * The result of the deserialization is a new editor.\n   *\n   * @param {Object} data\n   * @param {AnnotationEditorLayer} parent\n   * @param {AnnotationEditorUIManager} uiManager\n   * @returns {AnnotationEditor}\n   */\n  static deserialize(data, parent, uiManager) {\n    const editor = new this.prototype.constructor({\n      parent,\n      id: parent.getNextId(),\n      uiManager,\n    });\n    editor.rotation = data.rotation;\n\n    const [pageWidth, pageHeight] = editor.pageDimensions;\n    const [x, y, width, height] = editor.getRectInCurrentCoords(\n      data.rect,\n      pageHeight\n    );\n    editor.x = x / pageWidth;\n    editor.y = y / pageHeight;\n    editor.width = width / pageWidth;\n    editor.height = height / pageHeight;\n\n    return editor;\n  }\n\n  /**\n   * Remove this editor.\n   * It's used on ctrl+backspace action.\n   */\n  remove() {\n    this.div.removeEventListener(\"focusin\", this.#boundFocusin);\n    this.div.removeEventListener(\"focusout\", this.#boundFocusout);\n\n    if (!this.isEmpty()) {\n      // The editor is removed but it can be back at some point thanks to\n      // undo/redo so we must commit it before.\n      this.commit();\n    }\n    if (this.parent) {\n      this.parent.remove(this);\n    } else {\n      this._uiManager.removeEditor(this);\n    }\n\n    // The editor is removed so we can remove the alt text button and if it's\n    // restored then it's up to the subclass to add it back.\n    this.#altTextButton?.remove();\n    this.#altTextButton = null;\n    this.#altTextTooltip = null;\n  }\n\n  /**\n   * @returns {boolean} true if this editor can be resized.\n   */\n  get isResizable() {\n    return false;\n  }\n\n  /**\n   * Add the resizers to this editor.\n   */\n  makeResizable() {\n    if (this.isResizable) {\n      this.#createResizers();\n      this.#resizersDiv.classList.remove(\"hidden\");\n    }\n  }\n\n  /**\n   * Select this editor.\n   */\n  select() {\n    this.makeResizable();\n    this.div?.classList.add(\"selectedEditor\");\n  }\n\n  /**\n   * Unselect this editor.\n   */\n  unselect() {\n    this.#resizersDiv?.classList.add(\"hidden\");\n    this.div?.classList.remove(\"selectedEditor\");\n    if (this.div?.contains(document.activeElement)) {\n      // Don't use this.div.blur() because we don't know where the focus will\n      // go.\n      this._uiManager.currentLayer.div.focus();\n    }\n  }\n\n  /**\n   * Update some parameters which have been changed through the UI.\n   * @param {number} type\n   * @param {*} value\n   */\n  updateParams(type, value) {}\n\n  /**\n   * When the user disables the editing mode some editors can change some of\n   * their properties.\n   */\n  disableEditing() {\n    if (this.#altTextButton) {\n      this.#altTextButton.hidden = true;\n    }\n  }\n\n  /**\n   * When the user enables the editing mode some editors can change some of\n   * their properties.\n   */\n  enableEditing() {\n    if (this.#altTextButton) {\n      this.#altTextButton.hidden = false;\n    }\n  }\n\n  /**\n   * The editor is about to be edited.\n   */\n  enterInEditMode() {}\n\n  /**\n   * Get the div which really contains the displayed content.\n   */\n  get contentDiv() {\n    return this.div;\n  }\n\n  /**\n   * If true then the editor is currently edited.\n   * @type {boolean}\n   */\n  get isEditing() {\n    return this.#isEditing;\n  }\n\n  /**\n   * When set to true, it means that this editor is currently edited.\n   * @param {boolean} value\n   */\n  set isEditing(value) {\n    this.#isEditing = value;\n    if (!this.parent) {\n      return;\n    }\n    if (value) {\n      this.parent.setSelected(this);\n      this.parent.setActiveEditor(this);\n    } else {\n      this.parent.setActiveEditor(null);\n    }\n  }\n\n  /**\n   * Set the aspect ratio to use when resizing.\n   * @param {number} width\n   * @param {number} height\n   */\n  setAspectRatio(width, height) {\n    this.#keepAspectRatio = true;\n    const aspectRatio = width / height;\n    const { style } = this.div;\n    style.aspectRatio = aspectRatio;\n    style.height = \"auto\";\n  }\n\n  static get MIN_SIZE() {\n    return 16;\n  }\n}\n\n// This class is used to fake an editor which has been deleted.\nclass FakeEditor extends AnnotationEditor {\n  constructor(params) {\n    super(params);\n    this.annotationElementId = params.annotationElementId;\n    this.deleted = true;\n  }\n\n  serialize() {\n    return {\n      id: this.annotationElementId,\n      deleted: true,\n      pageIndex: this.pageIndex,\n    };\n  }\n}\n\nexport { AnnotationEditor };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./editor.js\").AnnotationEditor} AnnotationEditor */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorPrefix,\n  AnnotationEditorType,\n  FeatureTest,\n  getUuid,\n  shadow,\n  Util,\n  warn,\n} from \"../../shared/util.js\";\nimport { getColorValues, getRGB, PixelsPerInch } from \"../display_utils.js\";\n\nfunction bindEvents(obj, element, names) {\n  for (const name of names) {\n    element.addEventListener(name, obj[name].bind(obj));\n  }\n}\n\n/**\n * Convert a number between 0 and 100 into an hex number between 0 and 255.\n * @param {number} opacity\n * @return {string}\n */\nfunction opacityToHex(opacity) {\n  return Math.round(Math.min(255, Math.max(1, 255 * opacity)))\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n/**\n * Class to create some unique ids for the different editors.\n */\nclass IdManager {\n  #id = 0;\n\n  /**\n   * Get a unique id.\n   * @returns {string}\n   */\n  getId() {\n    return `${AnnotationEditorPrefix}${this.#id++}`;\n  }\n}\n\n/**\n * Class to manage the images used by the editors.\n * The main idea is to try to minimize the memory used by the images.\n * The images are cached and reused when possible\n * We use a refCounter to know when an image is not used anymore but we need to\n * be able to restore an image after a remove+undo, so we keep a file reference\n * or an url one.\n */\nclass ImageManager {\n  #baseId = getUuid();\n\n  #id = 0;\n\n  #cache = null;\n\n  static get _isSVGFittingCanvas() {\n    // By default, Firefox doesn't rescale without preserving the aspect ratio\n    // when drawing an SVG image on a canvas, see https://bugzilla.mozilla.org/1547776.\n    // The \"workaround\" is to append \"svgView(preserveAspectRatio(none))\" to the\n    // url, but according to comment #15, it seems that it leads to unexpected\n    // behavior in Safari.\n    const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n    const canvas = new OffscreenCanvas(1, 3);\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = svg;\n    const promise = image.decode().then(() => {\n      ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\n      return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n    });\n\n    return shadow(this, \"_isSVGFittingCanvas\", promise);\n  }\n\n  async #get(key, rawData) {\n    this.#cache ||= new Map();\n    let data = this.#cache.get(key);\n    if (data === null) {\n      // We already tried to load the image but it failed.\n      return null;\n    }\n    if (data?.bitmap) {\n      data.refCounter += 1;\n      return data;\n    }\n    try {\n      data ||= {\n        bitmap: null,\n        id: `image_${this.#baseId}_${this.#id++}`,\n        refCounter: 0,\n        isSvg: false,\n      };\n      let image;\n      if (typeof rawData === \"string\") {\n        data.url = rawData;\n\n        const response = await fetch(rawData);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        image = await response.blob();\n      } else {\n        image = data.file = rawData;\n      }\n\n      if (image.type === \"image/svg+xml\") {\n        // Unfortunately, createImageBitmap doesn't work with SVG images.\n        // (see https://bugzilla.mozilla.org/1841972).\n        const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;\n        const fileReader = new FileReader();\n        const imageElement = new Image();\n        const imagePromise = new Promise((resolve, reject) => {\n          imageElement.onload = () => {\n            data.bitmap = imageElement;\n            data.isSvg = true;\n            resolve();\n          };\n          fileReader.onload = async () => {\n            const url = (data.svgUrl = fileReader.result);\n            // We need to set the preserveAspectRatio to none in order to let\n            // the image fits the canvas when resizing.\n            imageElement.src = (await mustRemoveAspectRatioPromise)\n              ? `${url}#svgView(preserveAspectRatio(none))`\n              : url;\n          };\n          imageElement.onerror = fileReader.onerror = reject;\n        });\n        fileReader.readAsDataURL(image);\n        await imagePromise;\n      } else {\n        data.bitmap = await createImageBitmap(image);\n      }\n      data.refCounter = 1;\n    } catch (e) {\n      console.error(e);\n      data = null;\n    }\n    this.#cache.set(key, data);\n    if (data) {\n      this.#cache.set(data.id, data);\n    }\n    return data;\n  }\n\n  async getFromFile(file) {\n    const { lastModified, name, size, type } = file;\n    return this.#get(`${lastModified}_${name}_${size}_${type}`, file);\n  }\n\n  async getFromUrl(url) {\n    return this.#get(url, url);\n  }\n\n  async getFromId(id) {\n    this.#cache ||= new Map();\n    const data = this.#cache.get(id);\n    if (!data) {\n      return null;\n    }\n    if (data.bitmap) {\n      data.refCounter += 1;\n      return data;\n    }\n\n    if (data.file) {\n      return this.getFromFile(data.file);\n    }\n    return this.getFromUrl(data.url);\n  }\n\n  getSvgUrl(id) {\n    const data = this.#cache.get(id);\n    if (!data?.isSvg) {\n      return null;\n    }\n    return data.svgUrl;\n  }\n\n  deleteId(id) {\n    this.#cache ||= new Map();\n    const data = this.#cache.get(id);\n    if (!data) {\n      return;\n    }\n    data.refCounter -= 1;\n    if (data.refCounter !== 0) {\n      return;\n    }\n    data.bitmap = null;\n  }\n\n  // We can use the id only if it belongs this manager.\n  // We must take care of having the right manager because we can copy/paste\n  // some images from other documents, hence it'd be a pity to use an id from an\n  // other manager.\n  isValidId(id) {\n    return id.startsWith(`image_${this.#baseId}_`);\n  }\n}\n\n/**\n * Class to handle undo/redo.\n * Commands are just saved in a buffer.\n * If we hit some memory issues we could likely use a circular buffer.\n * It has to be used as a singleton.\n */\nclass CommandManager {\n  #commands = [];\n\n  #locked = false;\n\n  #maxSize;\n\n  #position = -1;\n\n  constructor(maxSize = 128) {\n    this.#maxSize = maxSize;\n  }\n\n  /**\n   * @typedef {Object} addOptions\n   * @property {function} cmd\n   * @property {function} undo\n   * @property {boolean} mustExec\n   * @property {number} type\n   * @property {boolean} overwriteIfSameType\n   * @property {boolean} keepUndo\n   */\n\n  /**\n   * Add a new couple of commands to be used in case of redo/undo.\n   * @param {addOptions} options\n   */\n  add({\n    cmd,\n    undo,\n    mustExec,\n    type = NaN,\n    overwriteIfSameType = false,\n    keepUndo = false,\n  }) {\n    if (mustExec) {\n      cmd();\n    }\n\n    if (this.#locked) {\n      return;\n    }\n\n    const save = { cmd, undo, type };\n    if (this.#position === -1) {\n      if (this.#commands.length > 0) {\n        // All the commands have been undone and then a new one is added\n        // hence we clear the queue.\n        this.#commands.length = 0;\n      }\n      this.#position = 0;\n      this.#commands.push(save);\n      return;\n    }\n\n    if (overwriteIfSameType && this.#commands[this.#position].type === type) {\n      // For example when we change a color we don't want to\n      // be able to undo all the steps, hence we only want to\n      // keep the last undoable action in this sequence of actions.\n      if (keepUndo) {\n        save.undo = this.#commands[this.#position].undo;\n      }\n      this.#commands[this.#position] = save;\n      return;\n    }\n\n    const next = this.#position + 1;\n    if (next === this.#maxSize) {\n      this.#commands.splice(0, 1);\n    } else {\n      this.#position = next;\n      if (next < this.#commands.length) {\n        this.#commands.splice(next);\n      }\n    }\n\n    this.#commands.push(save);\n  }\n\n  /**\n   * Undo the last command.\n   */\n  undo() {\n    if (this.#position === -1) {\n      // Nothing to undo.\n      return;\n    }\n\n    // Avoid to insert something during the undo execution.\n    this.#locked = true;\n    this.#commands[this.#position].undo();\n    this.#locked = false;\n\n    this.#position -= 1;\n  }\n\n  /**\n   * Redo the last command.\n   */\n  redo() {\n    if (this.#position < this.#commands.length - 1) {\n      this.#position += 1;\n\n      // Avoid to insert something during the redo execution.\n      this.#locked = true;\n      this.#commands[this.#position].cmd();\n      this.#locked = false;\n    }\n  }\n\n  /**\n   * Check if there is something to undo.\n   * @returns {boolean}\n   */\n  hasSomethingToUndo() {\n    return this.#position !== -1;\n  }\n\n  /**\n   * Check if there is something to redo.\n   * @returns {boolean}\n   */\n  hasSomethingToRedo() {\n    return this.#position < this.#commands.length - 1;\n  }\n\n  destroy() {\n    this.#commands = null;\n  }\n}\n\n/**\n * Class to handle the different keyboards shortcuts we can have on mac or\n * non-mac OSes.\n */\nclass KeyboardManager {\n  /**\n   * Create a new keyboard manager class.\n   * @param {Array<Array>} callbacks - an array containing an array of shortcuts\n   * and a callback to call.\n   * A shortcut is a string like `ctrl+c` or `mac+ctrl+c` for mac OS.\n   */\n  constructor(callbacks) {\n    this.buffer = [];\n    this.callbacks = new Map();\n    this.allKeys = new Set();\n\n    const { isMac } = FeatureTest.platform;\n    for (const [keys, callback, options = {}] of callbacks) {\n      for (const key of keys) {\n        const isMacKey = key.startsWith(\"mac+\");\n        if (isMac && isMacKey) {\n          this.callbacks.set(key.slice(4), { callback, options });\n          this.allKeys.add(key.split(\"+\").at(-1));\n        } else if (!isMac && !isMacKey) {\n          this.callbacks.set(key, { callback, options });\n          this.allKeys.add(key.split(\"+\").at(-1));\n        }\n      }\n    }\n  }\n\n  /**\n   * Serialize an event into a string in order to match a\n   * potential key for a callback.\n   * @param {KeyboardEvent} event\n   * @returns {string}\n   */\n  #serialize(event) {\n    if (event.altKey) {\n      this.buffer.push(\"alt\");\n    }\n    if (event.ctrlKey) {\n      this.buffer.push(\"ctrl\");\n    }\n    if (event.metaKey) {\n      this.buffer.push(\"meta\");\n    }\n    if (event.shiftKey) {\n      this.buffer.push(\"shift\");\n    }\n    this.buffer.push(event.key);\n    const str = this.buffer.join(\"+\");\n    this.buffer.length = 0;\n\n    return str;\n  }\n\n  /**\n   * Execute a callback, if any, for a given keyboard event.\n   * The self is used as `this` in the callback.\n   * @param {Object} self\n   * @param {KeyboardEvent} event\n   * @returns\n   */\n  exec(self, event) {\n    if (!this.allKeys.has(event.key)) {\n      return;\n    }\n    const info = this.callbacks.get(this.#serialize(event));\n    if (!info) {\n      return;\n    }\n    const {\n      callback,\n      options: { bubbles = false, args = [], checker = null },\n    } = info;\n\n    if (checker && !checker(self, event)) {\n      return;\n    }\n    callback.bind(self, ...args)();\n\n    // For example, ctrl+s in a FreeText must be handled by the viewer, hence\n    // the event must bubble.\n    if (!bubbles) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n}\n\nclass ColorManager {\n  static _colorsMapping = new Map([\n    [\"CanvasText\", [0, 0, 0]],\n    [\"Canvas\", [255, 255, 255]],\n  ]);\n\n  get _colors() {\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"LIB\") &&\n      typeof document === \"undefined\"\n    ) {\n      return shadow(this, \"_colors\", ColorManager._colorsMapping);\n    }\n\n    const colors = new Map([\n      [\"CanvasText\", null],\n      [\"Canvas\", null],\n    ]);\n    getColorValues(colors);\n    return shadow(this, \"_colors\", colors);\n  }\n\n  /**\n   * In High Contrast Mode, the color on the screen is not always the\n   * real color used in the pdf.\n   * For example in some cases white can appear to be black but when saving\n   * we want to have white.\n   * @param {string} color\n   * @returns {Array<number>}\n   */\n  convert(color) {\n    const rgb = getRGB(color);\n    if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n      return rgb;\n    }\n\n    for (const [name, RGB] of this._colors) {\n      if (RGB.every((x, i) => x === rgb[i])) {\n        return ColorManager._colorsMapping.get(name);\n      }\n    }\n    return rgb;\n  }\n\n  /**\n   * An input element must have its color value as a hex string\n   * and not as color name.\n   * So this function converts a name into an hex string.\n   * @param {string} name\n   * @returns {string}\n   */\n  getHexCode(name) {\n    const rgb = this._colors.get(name);\n    if (!rgb) {\n      return name;\n    }\n    return Util.makeHexColor(...rgb);\n  }\n}\n\n/**\n * A pdf has several pages and each of them when it will rendered\n * will have an AnnotationEditorLayer which will contain the some\n * new Annotations associated to an editor in order to modify them.\n *\n * This class is used to manage all the different layers, editors and\n * some action like copy/paste, undo/redo, ...\n */\nclass AnnotationEditorUIManager {\n  #activeEditor = null;\n\n  #allEditors = new Map();\n\n  #allLayers = new Map();\n\n  #altTextManager = null;\n\n  #annotationStorage = null;\n\n  #commandManager = new CommandManager();\n\n  #currentPageIndex = 0;\n\n  #deletedAnnotationsElementIds = new Set();\n\n  #draggingEditors = null;\n\n  #editorTypes = null;\n\n  #editorsToRescale = new Set();\n\n  #filterFactory = null;\n\n  #idManager = new IdManager();\n\n  #isEnabled = false;\n\n  #isWaiting = false;\n\n  #lastActiveElement = null;\n\n  #mode = AnnotationEditorType.NONE;\n\n  #selectedEditors = new Set();\n\n  #pageColors = null;\n\n  #boundBlur = this.blur.bind(this);\n\n  #boundFocus = this.focus.bind(this);\n\n  #boundCopy = this.copy.bind(this);\n\n  #boundCut = this.cut.bind(this);\n\n  #boundPaste = this.paste.bind(this);\n\n  #boundKeydown = this.keydown.bind(this);\n\n  #boundOnEditingAction = this.onEditingAction.bind(this);\n\n  #boundOnPageChanging = this.onPageChanging.bind(this);\n\n  #boundOnScaleChanging = this.onScaleChanging.bind(this);\n\n  #boundOnRotationChanging = this.onRotationChanging.bind(this);\n\n  #previousStates = {\n    isEditing: false,\n    isEmpty: true,\n    hasSomethingToUndo: false,\n    hasSomethingToRedo: false,\n    hasSelectedEditor: false,\n  };\n\n  #translation = [0, 0];\n\n  #translationTimeoutId = null;\n\n  #container = null;\n\n  #viewer = null;\n\n  static TRANSLATE_SMALL = 1; // page units.\n\n  static TRANSLATE_BIG = 10; // page units.\n\n  static get _keyboardManager() {\n    const proto = AnnotationEditorUIManager.prototype;\n\n    const arrowChecker = self => {\n      // If the focused element is an input, we don't want to handle the arrow.\n      // For example, sliders can be controlled with the arrow keys.\n      const { activeElement } = document;\n      return (\n        activeElement &&\n        self.#container.contains(activeElement) &&\n        self.hasSomethingToControl()\n      );\n    };\n\n    const small = this.TRANSLATE_SMALL;\n    const big = this.TRANSLATE_BIG;\n\n    return shadow(\n      this,\n      \"_keyboardManager\",\n      new KeyboardManager([\n        [[\"ctrl+a\", \"mac+meta+a\"], proto.selectAll],\n        [[\"ctrl+z\", \"mac+meta+z\"], proto.undo],\n        [\n          // On mac, depending of the OS version, the event.key is either \"z\" or\n          // \"Z\" when the user presses \"meta+shift+z\".\n          [\n            \"ctrl+y\",\n            \"ctrl+shift+z\",\n            \"mac+meta+shift+z\",\n            \"ctrl+shift+Z\",\n            \"mac+meta+shift+Z\",\n          ],\n          proto.redo,\n        ],\n        [\n          [\n            \"Backspace\",\n            \"alt+Backspace\",\n            \"ctrl+Backspace\",\n            \"shift+Backspace\",\n            \"mac+Backspace\",\n            \"mac+alt+Backspace\",\n            \"mac+ctrl+Backspace\",\n            \"Delete\",\n            \"ctrl+Delete\",\n            \"shift+Delete\",\n            \"mac+Delete\",\n          ],\n          proto.delete,\n        ],\n        [[\"Escape\", \"mac+Escape\"], proto.unselectAll],\n        [\n          [\"ArrowLeft\", \"mac+ArrowLeft\"],\n          proto.translateSelectedEditors,\n          { args: [-small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"],\n          proto.translateSelectedEditors,\n          { args: [-big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowRight\", \"mac+ArrowRight\"],\n          proto.translateSelectedEditors,\n          { args: [small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"],\n          proto.translateSelectedEditors,\n          { args: [big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowUp\", \"mac+ArrowUp\"],\n          proto.translateSelectedEditors,\n          { args: [0, -small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"],\n          proto.translateSelectedEditors,\n          { args: [0, -big], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowDown\", \"mac+ArrowDown\"],\n          proto.translateSelectedEditors,\n          { args: [0, small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"],\n          proto.translateSelectedEditors,\n          { args: [0, big], checker: arrowChecker },\n        ],\n      ])\n    );\n  }\n\n  constructor(\n    container,\n    viewer,\n    altTextManager,\n    eventBus,\n    pdfDocument,\n    pageColors\n  ) {\n    this.#container = container;\n    this.#viewer = viewer;\n    this.#altTextManager = altTextManager;\n    this._eventBus = eventBus;\n    this._eventBus._on(\"editingaction\", this.#boundOnEditingAction);\n    this._eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\n    this._eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\n    this._eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\n    this.#annotationStorage = pdfDocument.annotationStorage;\n    this.#filterFactory = pdfDocument.filterFactory;\n    this.#pageColors = pageColors;\n    this.viewParameters = {\n      realScale: PixelsPerInch.PDF_TO_CSS_UNITS,\n      rotation: 0,\n    };\n  }\n\n  destroy() {\n    this.#removeKeyboardManager();\n    this.#removeFocusManager();\n    this._eventBus._off(\"editingaction\", this.#boundOnEditingAction);\n    this._eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\n    this._eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\n    this._eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\n    for (const layer of this.#allLayers.values()) {\n      layer.destroy();\n    }\n    this.#allLayers.clear();\n    this.#allEditors.clear();\n    this.#editorsToRescale.clear();\n    this.#activeEditor = null;\n    this.#selectedEditors.clear();\n    this.#commandManager.destroy();\n    this.#altTextManager.destroy();\n  }\n\n  get hcmFilter() {\n    return shadow(\n      this,\n      \"hcmFilter\",\n      this.#pageColors\n        ? this.#filterFactory.addHCMFilter(\n            this.#pageColors.foreground,\n            this.#pageColors.background\n          )\n        : \"none\"\n    );\n  }\n\n  get direction() {\n    return shadow(\n      this,\n      \"direction\",\n      getComputedStyle(this.#container).direction\n    );\n  }\n\n  editAltText(editor) {\n    this.#altTextManager?.editAltText(this, editor);\n  }\n\n  onPageChanging({ pageNumber }) {\n    this.#currentPageIndex = pageNumber - 1;\n  }\n\n  focusMainContainer() {\n    this.#container.focus();\n  }\n\n  findParent(x, y) {\n    for (const layer of this.#allLayers.values()) {\n      const {\n        x: layerX,\n        y: layerY,\n        width,\n        height,\n      } = layer.div.getBoundingClientRect();\n      if (\n        x >= layerX &&\n        x <= layerX + width &&\n        y >= layerY &&\n        y <= layerY + height\n      ) {\n        return layer;\n      }\n    }\n    return null;\n  }\n\n  disableUserSelect(value = false) {\n    this.#viewer.classList.toggle(\"noUserSelect\", value);\n  }\n\n  addShouldRescale(editor) {\n    this.#editorsToRescale.add(editor);\n  }\n\n  removeShouldRescale(editor) {\n    this.#editorsToRescale.delete(editor);\n  }\n\n  onScaleChanging({ scale }) {\n    this.commitOrRemove();\n    this.viewParameters.realScale = scale * PixelsPerInch.PDF_TO_CSS_UNITS;\n    for (const editor of this.#editorsToRescale) {\n      editor.onScaleChanging();\n    }\n  }\n\n  onRotationChanging({ pagesRotation }) {\n    this.commitOrRemove();\n    this.viewParameters.rotation = pagesRotation;\n  }\n\n  /**\n   * Add an editor in the annotation storage.\n   * @param {AnnotationEditor} editor\n   */\n  addToAnnotationStorage(editor) {\n    if (\n      !editor.isEmpty() &&\n      this.#annotationStorage &&\n      !this.#annotationStorage.has(editor.id)\n    ) {\n      this.#annotationStorage.setValue(editor.id, editor);\n    }\n  }\n\n  #addFocusManager() {\n    window.addEventListener(\"focus\", this.#boundFocus);\n    window.addEventListener(\"blur\", this.#boundBlur);\n  }\n\n  #removeFocusManager() {\n    window.removeEventListener(\"focus\", this.#boundFocus);\n    window.removeEventListener(\"blur\", this.#boundBlur);\n  }\n\n  blur() {\n    if (!this.hasSelection) {\n      return;\n    }\n    // When several editors are selected and the window loses focus, we want to\n    // keep the last active element in order to be able to focus it again when\n    // the window gets the focus back but we don't want to trigger any focus\n    // callbacks else only one editor will be selected.\n    const { activeElement } = document;\n    for (const editor of this.#selectedEditors) {\n      if (editor.div.contains(activeElement)) {\n        this.#lastActiveElement = [editor, activeElement];\n        editor._focusEventsAllowed = false;\n        break;\n      }\n    }\n  }\n\n  focus() {\n    if (!this.#lastActiveElement) {\n      return;\n    }\n    const [lastEditor, lastActiveElement] = this.#lastActiveElement;\n    this.#lastActiveElement = null;\n    lastActiveElement.addEventListener(\n      \"focusin\",\n      () => {\n        lastEditor._focusEventsAllowed = true;\n      },\n      { once: true }\n    );\n    lastActiveElement.focus();\n  }\n\n  #addKeyboardManager() {\n    // The keyboard events are caught at the container level in order to be able\n    // to execute some callbacks even if the current page doesn't have focus.\n    window.addEventListener(\"keydown\", this.#boundKeydown, { capture: true });\n  }\n\n  #removeKeyboardManager() {\n    window.removeEventListener(\"keydown\", this.#boundKeydown, {\n      capture: true,\n    });\n  }\n\n  #addCopyPasteListeners() {\n    document.addEventListener(\"copy\", this.#boundCopy);\n    document.addEventListener(\"cut\", this.#boundCut);\n    document.addEventListener(\"paste\", this.#boundPaste);\n  }\n\n  #removeCopyPasteListeners() {\n    document.removeEventListener(\"copy\", this.#boundCopy);\n    document.removeEventListener(\"cut\", this.#boundCut);\n    document.removeEventListener(\"paste\", this.#boundPaste);\n  }\n\n  addEditListeners() {\n    this.#addKeyboardManager();\n    this.#addCopyPasteListeners();\n  }\n\n  removeEditListeners() {\n    this.#removeKeyboardManager();\n    this.#removeCopyPasteListeners();\n  }\n\n  /**\n   * Copy callback.\n   * @param {ClipboardEvent} event\n   */\n  copy(event) {\n    event.preventDefault();\n\n    // An editor is being edited so just commit it.\n    this.#activeEditor?.commitOrRemove();\n\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const editors = [];\n    for (const editor of this.#selectedEditors) {\n      const serialized = editor.serialize(/* isForCopying = */ true);\n      if (serialized) {\n        editors.push(serialized);\n      }\n    }\n    if (editors.length === 0) {\n      return;\n    }\n\n    event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n  }\n\n  /**\n   * Cut callback.\n   * @param {ClipboardEvent} event\n   */\n  cut(event) {\n    this.copy(event);\n    this.delete();\n  }\n\n  /**\n   * Paste callback.\n   * @param {ClipboardEvent} event\n   */\n  paste(event) {\n    event.preventDefault();\n    const { clipboardData } = event;\n    for (const item of clipboardData.items) {\n      for (const editorType of this.#editorTypes) {\n        if (editorType.isHandlingMimeForPasting(item.type)) {\n          editorType.paste(item, this.currentLayer);\n          return;\n        }\n      }\n    }\n\n    let data = clipboardData.getData(\"application/pdfjs\");\n    if (!data) {\n      return;\n    }\n\n    try {\n      data = JSON.parse(data);\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n      return;\n    }\n\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    this.unselectAll();\n    const layer = this.currentLayer;\n\n    try {\n      const newEditors = [];\n      for (const editor of data) {\n        const deserializedEditor = layer.deserialize(editor);\n        if (!deserializedEditor) {\n          return;\n        }\n        newEditors.push(deserializedEditor);\n      }\n\n      const cmd = () => {\n        for (const editor of newEditors) {\n          this.#addEditorToLayer(editor);\n        }\n        this.#selectEditors(newEditors);\n      };\n      const undo = () => {\n        for (const editor of newEditors) {\n          editor.remove();\n        }\n      };\n      this.addCommands({ cmd, undo, mustExec: true });\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n    }\n  }\n\n  /**\n   * Keydown callback.\n   * @param {KeyboardEvent} event\n   */\n  keydown(event) {\n    if (!this.getActive()?.shouldGetKeyboardEvents()) {\n      AnnotationEditorUIManager._keyboardManager.exec(this, event);\n    }\n  }\n\n  /**\n   * Execute an action for a given name.\n   * For example, the user can click on the \"Undo\" entry in the context menu\n   * and it'll trigger the undo action.\n   * @param {Object} details\n   */\n  onEditingAction(details) {\n    if ([\"undo\", \"redo\", \"delete\", \"selectAll\"].includes(details.name)) {\n      this[details.name]();\n    }\n  }\n\n  /**\n   * Update the different possible states of this manager, e.g. is there\n   * something to undo, redo, ...\n   * @param {Object} details\n   */\n  #dispatchUpdateStates(details) {\n    const hasChanged = Object.entries(details).some(\n      ([key, value]) => this.#previousStates[key] !== value\n    );\n\n    if (hasChanged) {\n      this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n        source: this,\n        details: Object.assign(this.#previousStates, details),\n      });\n    }\n  }\n\n  #dispatchUpdateUI(details) {\n    this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n      source: this,\n      details,\n    });\n  }\n\n  /**\n   * Set the editing state.\n   * It can be useful to temporarily disable it when the user is editing a\n   * FreeText annotation.\n   * @param {boolean} isEditing\n   */\n  setEditingState(isEditing) {\n    if (isEditing) {\n      this.#addFocusManager();\n      this.#addKeyboardManager();\n      this.#addCopyPasteListeners();\n      this.#dispatchUpdateStates({\n        isEditing: this.#mode !== AnnotationEditorType.NONE,\n        isEmpty: this.#isEmpty(),\n        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n        hasSelectedEditor: false,\n      });\n    } else {\n      this.#removeFocusManager();\n      this.#removeKeyboardManager();\n      this.#removeCopyPasteListeners();\n      this.#dispatchUpdateStates({\n        isEditing: false,\n      });\n      this.disableUserSelect(false);\n    }\n  }\n\n  registerEditorTypes(types) {\n    if (this.#editorTypes) {\n      return;\n    }\n    this.#editorTypes = types;\n    for (const editorType of this.#editorTypes) {\n      this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\n    }\n  }\n\n  /**\n   * Get an id.\n   * @returns {string}\n   */\n  getId() {\n    return this.#idManager.getId();\n  }\n\n  get currentLayer() {\n    return this.#allLayers.get(this.#currentPageIndex);\n  }\n\n  getLayer(pageIndex) {\n    return this.#allLayers.get(pageIndex);\n  }\n\n  get currentPageIndex() {\n    return this.#currentPageIndex;\n  }\n\n  /**\n   * Add a new layer for a page which will contains the editors.\n   * @param {AnnotationEditorLayer} layer\n   */\n  addLayer(layer) {\n    this.#allLayers.set(layer.pageIndex, layer);\n    if (this.#isEnabled) {\n      layer.enable();\n    } else {\n      layer.disable();\n    }\n  }\n\n  /**\n   * Remove a layer.\n   * @param {AnnotationEditorLayer} layer\n   */\n  removeLayer(layer) {\n    this.#allLayers.delete(layer.pageIndex);\n  }\n\n  /**\n   * Change the editor mode (None, FreeText, Ink, ...)\n   * @param {number} mode\n   * @param {string|null} editId\n   */\n  updateMode(mode, editId = null) {\n    if (this.#mode === mode) {\n      return;\n    }\n    this.#mode = mode;\n    if (mode === AnnotationEditorType.NONE) {\n      this.setEditingState(false);\n      this.#disableAll();\n      return;\n    }\n    this.setEditingState(true);\n    this.#enableAll();\n    this.unselectAll();\n    for (const layer of this.#allLayers.values()) {\n      layer.updateMode(mode);\n    }\n    if (!editId) {\n      return;\n    }\n    for (const editor of this.#allEditors.values()) {\n      if (editor.annotationElementId === editId) {\n        this.setSelected(editor);\n        editor.enterInEditMode();\n        break;\n      }\n    }\n  }\n\n  /**\n   * Update the toolbar if it's required to reflect the tool currently used.\n   * @param {number} mode\n   * @returns {undefined}\n   */\n  updateToolbar(mode) {\n    if (mode === this.#mode) {\n      return;\n    }\n    this._eventBus.dispatch(\"switchannotationeditormode\", {\n      source: this,\n      mode,\n    });\n  }\n\n  /**\n   * Update a parameter in the current editor or globally.\n   * @param {number} type\n   * @param {*} value\n   */\n  updateParams(type, value) {\n    if (!this.#editorTypes) {\n      return;\n    }\n    if (type === AnnotationEditorParamsType.CREATE) {\n      this.currentLayer.addNewEditor(type);\n      return;\n    }\n\n    for (const editor of this.#selectedEditors) {\n      editor.updateParams(type, value);\n    }\n\n    for (const editorType of this.#editorTypes) {\n      editorType.updateDefaultParams(type, value);\n    }\n  }\n\n  enableWaiting(mustWait = false) {\n    if (this.#isWaiting === mustWait) {\n      return;\n    }\n    this.#isWaiting = mustWait;\n    for (const layer of this.#allLayers.values()) {\n      if (mustWait) {\n        layer.disableClick();\n      } else {\n        layer.enableClick();\n      }\n      layer.div.classList.toggle(\"waiting\", mustWait);\n    }\n  }\n\n  /**\n   * Enable all the layers.\n   */\n  #enableAll() {\n    if (!this.#isEnabled) {\n      this.#isEnabled = true;\n      for (const layer of this.#allLayers.values()) {\n        layer.enable();\n      }\n    }\n  }\n\n  /**\n   * Disable all the layers.\n   */\n  #disableAll() {\n    this.unselectAll();\n    if (this.#isEnabled) {\n      this.#isEnabled = false;\n      for (const layer of this.#allLayers.values()) {\n        layer.disable();\n      }\n    }\n  }\n\n  /**\n   * Get all the editors belonging to a given page.\n   * @param {number} pageIndex\n   * @returns {Array<AnnotationEditor>}\n   */\n  getEditors(pageIndex) {\n    const editors = [];\n    for (const editor of this.#allEditors.values()) {\n      if (editor.pageIndex === pageIndex) {\n        editors.push(editor);\n      }\n    }\n    return editors;\n  }\n\n  /**\n   * Get an editor with the given id.\n   * @param {string} id\n   * @returns {AnnotationEditor}\n   */\n  getEditor(id) {\n    return this.#allEditors.get(id);\n  }\n\n  /**\n   * Add a new editor.\n   * @param {AnnotationEditor} editor\n   */\n  addEditor(editor) {\n    this.#allEditors.set(editor.id, editor);\n  }\n\n  /**\n   * Remove an editor.\n   * @param {AnnotationEditor} editor\n   */\n  removeEditor(editor) {\n    this.#allEditors.delete(editor.id);\n    this.unselect(editor);\n    if (\n      !editor.annotationElementId ||\n      !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)\n    ) {\n      this.#annotationStorage?.remove(editor.id);\n    }\n  }\n\n  /**\n   * The annotation element with the given id has been deleted.\n   * @param {AnnotationEditor} editor\n   */\n  addDeletedAnnotationElement(editor) {\n    this.#deletedAnnotationsElementIds.add(editor.annotationElementId);\n    editor.deleted = true;\n  }\n\n  /**\n   * Check if the annotation element with the given id has been deleted.\n   * @param {string} annotationElementId\n   * @returns {boolean}\n   */\n  isDeletedAnnotationElement(annotationElementId) {\n    return this.#deletedAnnotationsElementIds.has(annotationElementId);\n  }\n\n  /**\n   * The annotation element with the given id have been restored.\n   * @param {AnnotationEditor} editor\n   */\n  removeDeletedAnnotationElement(editor) {\n    this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);\n    editor.deleted = false;\n  }\n\n  /**\n   * Add an editor to the layer it belongs to or add it to the global map.\n   * @param {AnnotationEditor} editor\n   */\n  #addEditorToLayer(editor) {\n    const layer = this.#allLayers.get(editor.pageIndex);\n    if (layer) {\n      layer.addOrRebuild(editor);\n    } else {\n      this.addEditor(editor);\n    }\n  }\n\n  /**\n   * Set the given editor as the active one.\n   * @param {AnnotationEditor} editor\n   */\n  setActiveEditor(editor) {\n    if (this.#activeEditor === editor) {\n      return;\n    }\n\n    this.#activeEditor = editor;\n    if (editor) {\n      this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    }\n  }\n\n  /**\n   * Add or remove an editor the current selection.\n   * @param {AnnotationEditor} editor\n   */\n  toggleSelected(editor) {\n    if (this.#selectedEditors.has(editor)) {\n      this.#selectedEditors.delete(editor);\n      editor.unselect();\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: this.hasSelection,\n      });\n      return;\n    }\n    this.#selectedEditors.add(editor);\n    editor.select();\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: true,\n    });\n  }\n\n  /**\n   * Set the last selected editor.\n   * @param {AnnotationEditor} editor\n   */\n  setSelected(editor) {\n    for (const ed of this.#selectedEditors) {\n      if (ed !== editor) {\n        ed.unselect();\n      }\n    }\n    this.#selectedEditors.clear();\n\n    this.#selectedEditors.add(editor);\n    editor.select();\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: true,\n    });\n  }\n\n  /**\n   * Check if the editor is selected.\n   * @param {AnnotationEditor} editor\n   */\n  isSelected(editor) {\n    return this.#selectedEditors.has(editor);\n  }\n\n  /**\n   * Unselect an editor.\n   * @param {AnnotationEditor} editor\n   */\n  unselect(editor) {\n    editor.unselect();\n    this.#selectedEditors.delete(editor);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: this.hasSelection,\n    });\n  }\n\n  get hasSelection() {\n    return this.#selectedEditors.size !== 0;\n  }\n\n  /**\n   * Undo the last command.\n   */\n  undo() {\n    this.#commandManager.undo();\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n      hasSomethingToRedo: true,\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  /**\n   * Redo the last undoed command.\n   */\n  redo() {\n    this.#commandManager.redo();\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  /**\n   * Add a command to execute (cmd) and another one to undo it.\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this.#commandManager.add(params);\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: false,\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  #isEmpty() {\n    if (this.#allEditors.size === 0) {\n      return true;\n    }\n\n    if (this.#allEditors.size === 1) {\n      for (const editor of this.#allEditors.values()) {\n        return editor.isEmpty();\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Delete the current editor or all.\n   */\n  delete() {\n    this.commitOrRemove();\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const editors = [...this.#selectedEditors];\n    const cmd = () => {\n      for (const editor of editors) {\n        editor.remove();\n      }\n    };\n    const undo = () => {\n      for (const editor of editors) {\n        this.#addEditorToLayer(editor);\n      }\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  commitOrRemove() {\n    // An editor is being edited so just commit it.\n    this.#activeEditor?.commitOrRemove();\n  }\n\n  hasSomethingToControl() {\n    return this.#activeEditor || this.hasSelection;\n  }\n\n  /**\n   * Select the editors.\n   * @param {Array<AnnotationEditor>} editors\n   */\n  #selectEditors(editors) {\n    this.#selectedEditors.clear();\n    for (const editor of editors) {\n      if (editor.isEmpty()) {\n        continue;\n      }\n      this.#selectedEditors.add(editor);\n      editor.select();\n    }\n    this.#dispatchUpdateStates({ hasSelectedEditor: true });\n  }\n\n  /**\n   * Select all the editors.\n   */\n  selectAll() {\n    for (const editor of this.#selectedEditors) {\n      editor.commit();\n    }\n    this.#selectEditors(this.#allEditors.values());\n  }\n\n  /**\n   * Unselect all the selected editors.\n   */\n  unselectAll() {\n    if (this.#activeEditor) {\n      // An editor is being edited so just commit it.\n      this.#activeEditor.commitOrRemove();\n      return;\n    }\n\n    if (!this.hasSelection) {\n      return;\n    }\n    for (const editor of this.#selectedEditors) {\n      editor.unselect();\n    }\n    this.#selectedEditors.clear();\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: false,\n    });\n  }\n\n  translateSelectedEditors(x, y, noCommit = false) {\n    if (!noCommit) {\n      this.commitOrRemove();\n    }\n    if (!this.hasSelection) {\n      return;\n    }\n\n    this.#translation[0] += x;\n    this.#translation[1] += y;\n    const [totalX, totalY] = this.#translation;\n    const editors = [...this.#selectedEditors];\n\n    // We don't want to have an undo/redo for each translation so we wait a bit\n    // before adding the command to the command manager.\n    const TIME_TO_WAIT = 1000;\n\n    if (this.#translationTimeoutId) {\n      clearTimeout(this.#translationTimeoutId);\n    }\n\n    this.#translationTimeoutId = setTimeout(() => {\n      this.#translationTimeoutId = null;\n      this.#translation[0] = this.#translation[1] = 0;\n\n      this.addCommands({\n        cmd: () => {\n          for (const editor of editors) {\n            if (this.#allEditors.has(editor.id)) {\n              editor.translateInPage(totalX, totalY);\n            }\n          }\n        },\n        undo: () => {\n          for (const editor of editors) {\n            if (this.#allEditors.has(editor.id)) {\n              editor.translateInPage(-totalX, -totalY);\n            }\n          }\n        },\n        mustExec: false,\n      });\n    }, TIME_TO_WAIT);\n\n    for (const editor of editors) {\n      editor.translateInPage(x, y);\n    }\n  }\n\n  /**\n   * Set up the drag session for moving the selected editors.\n   */\n  setUpDragSession() {\n    // Note: don't use any references to the editor's parent which can be null\n    // if the editor belongs to a destroyed page.\n    if (!this.hasSelection) {\n      return;\n    }\n    // Avoid to have spurious text selection in the text layer when dragging.\n    this.disableUserSelect(true);\n    this.#draggingEditors = new Map();\n    for (const editor of this.#selectedEditors) {\n      this.#draggingEditors.set(editor, {\n        savedX: editor.x,\n        savedY: editor.y,\n        savedPageIndex: editor.pageIndex,\n        newX: 0,\n        newY: 0,\n        newPageIndex: -1,\n      });\n    }\n  }\n\n  /**\n   * Ends the drag session.\n   * @returns {boolean} true if at least one editor has been moved.\n   */\n  endDragSession() {\n    if (!this.#draggingEditors) {\n      return false;\n    }\n    this.disableUserSelect(false);\n    const map = this.#draggingEditors;\n    this.#draggingEditors = null;\n    let mustBeAddedInUndoStack = false;\n\n    for (const [{ x, y, pageIndex }, value] of map) {\n      value.newX = x;\n      value.newY = y;\n      value.newPageIndex = pageIndex;\n      mustBeAddedInUndoStack ||=\n        x !== value.savedX ||\n        y !== value.savedY ||\n        pageIndex !== value.savedPageIndex;\n    }\n\n    if (!mustBeAddedInUndoStack) {\n      return false;\n    }\n\n    const move = (editor, x, y, pageIndex) => {\n      if (this.#allEditors.has(editor.id)) {\n        // The editor can be undone/redone on a page which is not visible (and\n        // which potentially has no annotation editor layer), hence we need to\n        // use the pageIndex instead of the parent.\n        const parent = this.#allLayers.get(pageIndex);\n        if (parent) {\n          editor._setParentAndPosition(parent, x, y);\n        } else {\n          editor.pageIndex = pageIndex;\n          editor.x = x;\n          editor.y = y;\n        }\n      }\n    };\n\n    this.addCommands({\n      cmd: () => {\n        for (const [editor, { newX, newY, newPageIndex }] of map) {\n          move(editor, newX, newY, newPageIndex);\n        }\n      },\n      undo: () => {\n        for (const [editor, { savedX, savedY, savedPageIndex }] of map) {\n          move(editor, savedX, savedY, savedPageIndex);\n        }\n      },\n      mustExec: true,\n    });\n\n    return true;\n  }\n\n  /**\n   * Drag the set of selected editors.\n   * @param {number} tx\n   * @param {number} ty\n   */\n  dragSelectedEditors(tx, ty) {\n    if (!this.#draggingEditors) {\n      return;\n    }\n    for (const editor of this.#draggingEditors.keys()) {\n      editor.drag(tx, ty);\n    }\n  }\n\n  /**\n   * Rebuild the editor (usually on undo/redo actions) on a potentially\n   * non-rendered page.\n   * @param {AnnotationEditor} editor\n   */\n  rebuild(editor) {\n    if (editor.parent === null) {\n      const parent = this.getLayer(editor.pageIndex);\n      if (parent) {\n        parent.changeParent(editor);\n        parent.addOrRebuild(editor);\n      } else {\n        this.addEditor(editor);\n        this.addToAnnotationStorage(editor);\n        editor.rebuild();\n      }\n    } else {\n      editor.parent.addOrRebuild(editor);\n    }\n  }\n\n  /**\n   * Is the current editor the one passed as argument?\n   * @param {AnnotationEditor} editor\n   * @returns\n   */\n  isActive(editor) {\n    return this.#activeEditor === editor;\n  }\n\n  /**\n   * Get the current active editor.\n   * @returns {AnnotationEditor|null}\n   */\n  getActive() {\n    return this.#activeEditor;\n  }\n\n  /**\n   * Get the current editor mode.\n   * @returns {number}\n   */\n  getMode() {\n    return this.#mode;\n  }\n\n  get imageManager() {\n    return shadow(this, \"imageManager\", new ImageManager());\n  }\n}\n\nexport {\n  AnnotationEditorUIManager,\n  bindEvents,\n  ColorManager,\n  CommandManager,\n  KeyboardManager,\n  opacityToHex,\n};\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\nimport {\n  BaseException,\n  FeatureTest,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nclass PixelsPerInch {\n  static CSS = 96.0;\n\n  static PDF = 72.0;\n\n  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n}\n\n/**\n * FilterFactory aims to create some SVG filters we can use when drawing an\n * image (or whatever) on a canvas.\n * Filters aren't applied with ctx.putImageData because it just overwrites the\n * underlying pixels.\n * With these filters, it's possible for example to apply some transfer maps on\n * an image without the need to apply them on the pixel arrays: the renderer\n * does the magic for us.\n */\nclass DOMFilterFactory extends BaseFilterFactory {\n  #_cache;\n\n  #_defs;\n\n  #docId;\n\n  #document;\n\n  #hcmFilter;\n\n  #hcmKey;\n\n  #hcmUrl;\n\n  #hcmHighlightFilter;\n\n  #hcmHighlightKey;\n\n  #hcmHighlightUrl;\n\n  #id = 0;\n\n  constructor({ docId, ownerDocument = globalThis.document } = {}) {\n    super();\n    this.#docId = docId;\n    this.#document = ownerDocument;\n  }\n\n  get #cache() {\n    return (this.#_cache ||= new Map());\n  }\n\n  get #defs() {\n    if (!this.#_defs) {\n      const div = this.#document.createElement(\"div\");\n      const { style } = div;\n      style.visibility = \"hidden\";\n      style.contain = \"strict\";\n      style.width = style.height = 0;\n      style.position = \"absolute\";\n      style.top = style.left = 0;\n      style.zIndex = -1;\n\n      const svg = this.#document.createElementNS(SVG_NS, \"svg\");\n      svg.setAttribute(\"width\", 0);\n      svg.setAttribute(\"height\", 0);\n      this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\n      div.append(svg);\n      svg.append(this.#_defs);\n      this.#document.body.append(div);\n    }\n    return this.#_defs;\n  }\n\n  addFilter(maps) {\n    if (!maps) {\n      return \"none\";\n    }\n\n    // When a page is zoomed the page is re-drawn but the maps are likely\n    // the same.\n    let value = this.#cache.get(maps);\n    if (value) {\n      return value;\n    }\n\n    let tableR, tableG, tableB, key;\n    if (maps.length === 1) {\n      const mapR = maps[0];\n      const buffer = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        buffer[i] = mapR[i] / 255;\n      }\n      key = tableR = tableG = tableB = buffer.join(\",\");\n    } else {\n      const [mapR, mapG, mapB] = maps;\n      const bufferR = new Array(256);\n      const bufferG = new Array(256);\n      const bufferB = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        bufferR[i] = mapR[i] / 255;\n        bufferG[i] = mapG[i] / 255;\n        bufferB[i] = mapB[i] / 255;\n      }\n      tableR = bufferR.join(\",\");\n      tableG = bufferG.join(\",\");\n      tableB = bufferB.join(\",\");\n      key = `${tableR}${tableG}${tableB}`;\n    }\n\n    value = this.#cache.get(key);\n    if (value) {\n      this.#cache.set(maps, value);\n      return value;\n    }\n\n    // We create a SVG filter: feComponentTransferElement\n    //  https://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\n\n    const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\n    const url = `url(#${id})`;\n    this.#cache.set(maps, url);\n    this.#cache.set(key, url);\n\n    const filter = this.#createFilter(id);\n    this.#addTransferMapConversion(tableR, tableG, tableB, filter);\n\n    return url;\n  }\n\n  addHCMFilter(fgColor, bgColor) {\n    const key = `${fgColor}-${bgColor}`;\n    if (this.#hcmKey === key) {\n      return this.#hcmUrl;\n    }\n\n    this.#hcmKey = key;\n    this.#hcmUrl = \"none\";\n    this.#hcmFilter?.remove();\n\n    if (!fgColor || !bgColor) {\n      return this.#hcmUrl;\n    }\n\n    const fgRGB = this.#getRGB(fgColor);\n    fgColor = Util.makeHexColor(...fgRGB);\n    const bgRGB = this.#getRGB(bgColor);\n    bgColor = Util.makeHexColor(...bgRGB);\n    this.#defs.style.color = \"\";\n\n    if (\n      (fgColor === \"#000000\" && bgColor === \"#ffffff\") ||\n      fgColor === bgColor\n    ) {\n      return this.#hcmUrl;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_Colors_and_Luminance\n    //\n    // Relative luminance:\n    // https://www.w3.org/TR/WCAG20/#relativeluminancedef\n    //\n    // We compute the rounded luminance of the default background color.\n    // Then for every color in the pdf, if its rounded luminance is the\n    // same as the background one then it's replaced by the new\n    // background color else by the foreground one.\n    const map = new Array(256);\n    for (let i = 0; i <= 255; i++) {\n      const x = i / 255;\n      map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n    }\n    const table = map.join(\",\");\n\n    const id = `g_${this.#docId}_hcm_filter`;\n    const filter = (this.#hcmHighlightFilter = this.#createFilter(id));\n    this.#addTransferMapConversion(table, table, table, filter);\n    this.#addGrayConversion(filter);\n\n    const getSteps = (c, n) => {\n      const start = fgRGB[c] / 255;\n      const end = bgRGB[c] / 255;\n      const arr = new Array(n + 1);\n      for (let i = 0; i <= n; i++) {\n        arr[i] = start + (i / n) * (end - start);\n      }\n      return arr.join(\",\");\n    };\n    this.#addTransferMapConversion(\n      getSteps(0, 5),\n      getSteps(1, 5),\n      getSteps(2, 5),\n      filter\n    );\n\n    this.#hcmUrl = `url(#${id})`;\n    return this.#hcmUrl;\n  }\n\n  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n    const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\n    if (this.#hcmHighlightKey === key) {\n      return this.#hcmHighlightUrl;\n    }\n\n    this.#hcmHighlightKey = key;\n    this.#hcmHighlightUrl = \"none\";\n    this.#hcmHighlightFilter?.remove();\n\n    if (!fgColor || !bgColor) {\n      return this.#hcmHighlightUrl;\n    }\n\n    const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));\n    let fgGray = Math.round(\n      0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]\n    );\n    let bgGray = Math.round(\n      0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]\n    );\n    let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(\n      this.#getRGB.bind(this)\n    );\n    if (bgGray < fgGray) {\n      [fgGray, bgGray, newFgRGB, newBgRGB] = [\n        bgGray,\n        fgGray,\n        newBgRGB,\n        newFgRGB,\n      ];\n    }\n    this.#defs.style.color = \"\";\n\n    // Now we can create the filters to highlight some canvas parts.\n    // The colors in the pdf will almost be Canvas and CanvasText, hence we\n    // want to filter them to finally get Highlight and HighlightText.\n    // Since we're in HCM the background color and the foreground color should\n    // be really different when converted to grayscale (if they're not then it\n    // means that we've a poor contrast). Once the canvas colors are converted\n    // to grayscale we can easily map them on their new colors.\n    // The grayscale step is important because if we've something like:\n    //   fgColor = #FF....\n    //   bgColor = #FF....\n    //   then we are enable to map the red component on the new red components\n    //   which can be different.\n\n    const getSteps = (fg, bg, n) => {\n      const arr = new Array(256);\n      const step = (bgGray - fgGray) / n;\n      const newStart = fg / 255;\n      const newStep = (bg - fg) / (255 * n);\n      let prev = 0;\n      for (let i = 0; i <= n; i++) {\n        const k = Math.round(fgGray + i * step);\n        const value = newStart + i * newStep;\n        for (let j = prev; j <= k; j++) {\n          arr[j] = value;\n        }\n        prev = k + 1;\n      }\n      for (let i = prev; i < 256; i++) {\n        arr[i] = arr[prev - 1];\n      }\n      return arr.join(\",\");\n    };\n\n    const id = `g_${this.#docId}_hcm_highlight_filter`;\n    const filter = (this.#hcmHighlightFilter = this.#createFilter(id));\n\n    this.#addGrayConversion(filter);\n    this.#addTransferMapConversion(\n      getSteps(newFgRGB[0], newBgRGB[0], 5),\n      getSteps(newFgRGB[1], newBgRGB[1], 5),\n      getSteps(newFgRGB[2], newBgRGB[2], 5),\n      filter\n    );\n\n    this.#hcmHighlightUrl = `url(#${id})`;\n    return this.#hcmHighlightUrl;\n  }\n\n  destroy(keepHCM = false) {\n    if (keepHCM && (this.#hcmUrl || this.#hcmHighlightUrl)) {\n      return;\n    }\n    if (this.#_defs) {\n      this.#_defs.parentNode.parentNode.remove();\n      this.#_defs = null;\n    }\n    if (this.#_cache) {\n      this.#_cache.clear();\n      this.#_cache = null;\n    }\n    this.#id = 0;\n  }\n\n  #addGrayConversion(filter) {\n    const feColorMatrix = this.#document.createElementNS(\n      SVG_NS,\n      \"feColorMatrix\"\n    );\n    feColorMatrix.setAttribute(\"type\", \"matrix\");\n    feColorMatrix.setAttribute(\n      \"values\",\n      \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\"\n    );\n    filter.append(feColorMatrix);\n  }\n\n  #createFilter(id) {\n    const filter = this.#document.createElementNS(SVG_NS, \"filter\");\n    filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n    filter.setAttribute(\"id\", id);\n    this.#defs.append(filter);\n\n    return filter;\n  }\n\n  #appendFeFunc(feComponentTransfer, func, table) {\n    const feFunc = this.#document.createElementNS(SVG_NS, func);\n    feFunc.setAttribute(\"type\", \"discrete\");\n    feFunc.setAttribute(\"tableValues\", table);\n    feComponentTransfer.append(feFunc);\n  }\n\n  #addTransferMapConversion(rTable, gTable, bTable, filter) {\n    const feComponentTransfer = this.#document.createElementNS(\n      SVG_NS,\n      \"feComponentTransfer\"\n    );\n    filter.append(feComponentTransfer);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncR\", rTable);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncG\", gTable);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncB\", bTable);\n  }\n\n  #getRGB(color) {\n    this.#defs.style.color = color;\n    return getRGB(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\n  }\n}\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  /**\n   * @ignore\n   */\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = (viewBox[3] - viewBox[1]) * scale;\n      height = (viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = (viewBox[2] - viewBox[0]) * scale;\n      height = (viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The original, un-scaled, viewport dimensions.\n   * @type {Object}\n   */\n  get rawDims() {\n    const { viewBox } = this;\n    return shadow(this, \"rawDims\", {\n      pageWidth: viewBox[2] - viewBox[0],\n      pageHeight: viewBox[3] - viewBox[1],\n      pageX: viewBox[0],\n      pageY: viewBox[1],\n    });\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Array} Array containing `x`- and `y`-coordinates of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Array} Array containing `x`- and `y`-coordinates of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, extraDelay = 0) {\n    super(msg, \"RenderingCancelledException\");\n    this.extraDelay = extraDelay;\n  }\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @param {boolean} [onlyStripPath]\n * @returns {string}\n */\nfunction getFilenameFromUrl(url, onlyStripPath = false) {\n  if (!onlyStripPath) {\n    [url] = url.split(/[#?]/, 1);\n  }\n  return url.substring(url.lastIndexOf(\"/\") + 1);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  started = Object.create(null);\n\n  times = [];\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const { name } of this.times) {\n      longest = Math.max(name.length, longest);\n    }\n    for (const { name, start, end } of this.times) {\n      outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n    throw new Error(\"Not implemented: isValidFetchUrl\");\n  }\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * Event handler to suppress context menu.\n */\nfunction noContextMenu(e) {\n  e.preventDefault();\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).append(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || typeof input !== \"string\") {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    pdfDateStringRegex ||= new RegExp(\n      \"^D:\" + // Prefix (required)\n        \"(\\\\d{4})\" + // Year (required)\n        \"(\\\\d{2})?\" + // Month (optional)\n        \"(\\\\d{2})?\" + // Day (optional)\n        \"(\\\\d{2})?\" + // Hour (optional)\n        \"(\\\\d{2})?\" + // Minute (optional)\n        \"(\\\\d{2})?\" + // Second (optional)\n        \"([Z|+|-])?\" + // Universal time relation (optional)\n        \"(\\\\d{2})?\" + // Offset hour (optional)\n        \"'?\" + // Splitting apostrophe (optional)\n        \"(\\\\d{2})?\" + // Offset minute (optional)\n        \"'?\" // Trailing apostrophe (optional)\n    );\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nfunction getRGB(color) {\n  if (color.startsWith(\"#\")) {\n    const colorRGB = parseInt(color.slice(1), 16);\n    return [\n      (colorRGB & 0xff0000) >> 16,\n      (colorRGB & 0x00ff00) >> 8,\n      colorRGB & 0x0000ff,\n    ];\n  }\n\n  if (color.startsWith(\"rgb(\")) {\n    // getComputedStyle(...).color returns a `rgb(R, G, B)` color.\n    return color\n      .slice(/* \"rgb(\".length */ 4, -1) // Strip out \"rgb(\" and \")\".\n      .split(\",\")\n      .map(x => parseInt(x));\n  }\n\n  if (color.startsWith(\"rgba(\")) {\n    return color\n      .slice(/* \"rgba(\".length */ 5, -1) // Strip out \"rgba(\" and \")\".\n      .split(\",\")\n      .map(x => parseInt(x))\n      .slice(0, 3);\n  }\n\n  warn(`Not a valid color format: \"${color}\"`);\n  return [0, 0, 0];\n}\n\nfunction getColorValues(colors) {\n  const span = document.createElement(\"span\");\n  span.style.visibility = \"hidden\";\n  document.body.append(span);\n  for (const name of colors.keys()) {\n    span.style.color = name;\n    const computedColor = window.getComputedStyle(span).color;\n    colors.set(name, getRGB(computedColor));\n  }\n  span.remove();\n}\n\nfunction getCurrentTransform(ctx) {\n  const { a, b, c, d, e, f } = ctx.getTransform();\n  return [a, b, c, d, e, f];\n}\n\nfunction getCurrentTransformInverse(ctx) {\n  const { a, b, c, d, e, f } = ctx.getTransform().invertSelf();\n  return [a, b, c, d, e, f];\n}\n\n/**\n * @param {HTMLDivElement} div\n * @param {PageViewport} viewport\n * @param {boolean} mustFlip\n * @param {boolean} mustRotate\n */\nfunction setLayerDimensions(\n  div,\n  viewport,\n  mustFlip = false,\n  mustRotate = true\n) {\n  if (viewport instanceof PageViewport) {\n    const { pageWidth, pageHeight } = viewport.rawDims;\n    const { style } = div;\n    const useRound = FeatureTest.isCSSRoundSupported;\n\n    const w = `var(--scale-factor) * ${pageWidth}px`,\n      h = `var(--scale-factor) * ${pageHeight}px`;\n    const widthStr = useRound ? `round(${w}, 1px)` : `calc(${w})`,\n      heightStr = useRound ? `round(${h}, 1px)` : `calc(${h})`;\n\n    if (!mustFlip || viewport.rotation % 180 === 0) {\n      style.width = widthStr;\n      style.height = heightStr;\n    } else {\n      style.width = heightStr;\n      style.height = widthStr;\n    }\n  }\n\n  if (mustRotate) {\n    div.setAttribute(\"data-main-rotation\", viewport.rotation);\n  }\n}\n\nexport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMFilterFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getColorValues,\n  getCurrentTransform,\n  getCurrentTransformInverse,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getRGB,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  loadScript,\n  noContextMenu,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  setLayerDimensions,\n  StatTimer,\n};\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseFilterFactory {\n  constructor() {\n    if (this.constructor === BaseFilterFactory) {\n      unreachable(\"Cannot initialize BaseFilterFactory.\");\n    }\n  }\n\n  addFilter(maps) {\n    return \"none\";\n  }\n\n  addHCMFilter(fgColor, bgColor) {\n    return \"none\";\n  }\n\n  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n    return \"none\";\n  }\n\n  destroy(keepHCM = false) {}\n}\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = true }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height, skipDimensions = false) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n\n    if (!skipDimensions) {\n      svg.setAttribute(\"width\", `${width}px`);\n      svg.setAttribute(\"height\", `${height}px`);\n    }\n\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @ignore\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n","/* Copyright 2014 Opera Software ASA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n * Based on https://code.google.com/p/smhasher/wiki/MurmurHash3.\n * Hashes roughly 100 KB per millisecond on i7 3.4 GHz.\n */\n\nimport { isArrayBuffer } from \"./util.js\";\n\nconst SEED = 0xc3d2e1f0;\n// Workaround for missing math precision in JS.\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n    if (typeof input === \"string\") {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if (isArrayBuffer(input)) {\n      data = input.slice();\n      length = data.byteLength;\n    } else {\n      throw new Error(\n        \"Wrong data format in MurmurHash3_64_update. \" +\n          \"Input must be a string or array.\"\n      );\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    // We don't care about endianness here.\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n      k2 = 0;\n    let h1 = this.h1,\n      h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n      C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n      C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = ((k2 * C1) & MASK_HIGH) | ((k2 * C1_LOW) & MASK_LOW);\n        k2 = (k2 << 15) | (k2 >>> 17);\n        k2 = ((k2 * C2) & MASK_HIGH) | ((k2 * C2_LOW) & MASK_LOW);\n        h2 ^= k2;\n        h2 = (h2 << 13) | (h2 >>> 19);\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n      /* falls through */\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n      /* falls through */\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        /* falls through */\n\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n      h2 = this.h2;\n\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0xed558ccd) & MASK_HIGH) | ((h1 * 0x8ccd) & MASK_LOW);\n    h2 =\n      ((h2 * 0xff51afd7) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xafd7ed55) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0x1a85ec53) & MASK_HIGH) | ((h1 * 0xec53) & MASK_LOW);\n    h2 =\n      ((h2 * 0xc4ceb9fe) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xb9fe1a85) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n\n    return (\n      (h1 >>> 0).toString(16).padStart(8, \"0\") +\n      (h2 >>> 0).toString(16).padStart(8, \"0\")\n    );\n  }\n}\n\nexport { MurmurHash3_64 };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  FeatureTest,\n  isNodeJS,\n  shadow,\n  string32,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\n\nclass FontLoader {\n  #systemFonts = new Set();\n\n  constructor({\n    ownerDocument = globalThis.document,\n    styleElement = null, // For testing only.\n  }) {\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = new Set();\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")\n        ? styleElement\n        : null;\n\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) {\n      this.loadingRequests = [];\n      this.loadTestFontId = 0;\n    }\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.add(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  removeNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.delete(nativeFontFace);\n    this._document.fonts.delete(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    if (!this.styleElement) {\n      this.styleElement = this._document.createElement(\"style\");\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .append(this.styleElement);\n    }\n    const styleSheet = this.styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.clear();\n    this.#systemFonts.clear();\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async loadSystemFont(info) {\n    if (!info || this.#systemFonts.has(info.loadedName)) {\n      return;\n    }\n    assert(\n      !this.disableFontFace,\n      \"loadSystemFont shouldn't be called when `disableFontFace` is set.\"\n    );\n\n    if (this.isFontLoadingAPISupported) {\n      const { loadedName, src, style } = info;\n      const fontFace = new FontFace(loadedName, src, style);\n      this.addNativeFontFace(fontFace);\n      try {\n        await fontFace.load();\n        this.#systemFonts.add(loadedName);\n      } catch {\n        warn(\n          `Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`\n        );\n\n        this.removeNativeFontFace(fontFace);\n      }\n      return;\n    }\n\n    unreachable(\n      \"Not implemented: loadSystemFont without the Font Loading API.\"\n    );\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || (font.missingFile && !font.systemFontInfo)) {\n      return;\n    }\n    font.attached = true;\n\n    if (font.systemFontInfo) {\n      await this.loadSystemFont(font.systemFontInfo);\n      return;\n    }\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n        throw new Error(\"Not implemented: async font loading\");\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent(font, request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  get isSyncFontLoadingSupported() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n\n    let supported = false;\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n      if (isNodeJS) {\n        // Node.js - we can pretend that sync font loading is supported.\n        supported = true;\n      } else if (\n        typeof navigator !== \"undefined\" &&\n        // User agent string sniffing is bad, but there is no reliable way to\n        // tell if the font is fully loaded and ready to be used with canvas.\n        /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)\n      ) {\n        // Firefox, from version 14, supports synchronous font loading.\n        supported = true;\n      }\n    }\n    return shadow(this, \"isSyncFontLoadingSupported\", supported);\n  }\n\n  _queueLoadingCallback(callback) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _queueLoadingCallback\");\n    }\n\n    function completeRequest() {\n      assert(!request.done, \"completeRequest() cannot be called twice.\");\n      request.done = true;\n\n      // Sending all completed requests in order of how they were queued.\n      while (loadingRequests.length > 0 && loadingRequests[0].done) {\n        const otherRequest = loadingRequests.shift();\n        setTimeout(otherRequest.callback, 0);\n      }\n    }\n\n    const { loadingRequests } = this;\n    const request = {\n      done: false,\n      complete: completeRequest,\n      callback,\n    };\n    loadingRequests.push(request);\n    return request;\n  }\n\n  get _loadTestFont() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _loadTestFont\");\n    }\n\n    // This is a CFF font with 1 glyph for '.' that fills its entire width\n    // and height.\n    const testFont = atob(\n      \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n        \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n        \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n        \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n        \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n        \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n        \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n        \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n        \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n        \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n        \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n        \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n        \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n        \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n        \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n        \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n        \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n    );\n    return shadow(this, \"_loadTestFont\", testFont);\n  }\n\n  _prepareFontLoadEvent(font, request) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _prepareFontLoadEvent\");\n    }\n\n    /** Hack begin */\n    // There's currently no event when a font has finished downloading so the\n    // following code is a dirty hack to 'guess' when a font is ready.\n    // It's assumed fonts are loaded in order, so add a known test font after\n    // the desired fonts and then test for the loading of that test font.\n\n    function int32(data, offset) {\n      return (\n        (data.charCodeAt(offset) << 24) |\n        (data.charCodeAt(offset + 1) << 16) |\n        (data.charCodeAt(offset + 2) << 8) |\n        (data.charCodeAt(offset + 3) & 0xff)\n      );\n    }\n    function spliceString(s, offset, remove, insert) {\n      const chunk1 = s.substring(0, offset);\n      const chunk2 = s.substring(offset + remove);\n      return chunk1 + insert + chunk2;\n    }\n    let i, ii;\n\n    // The temporary canvas is used to determine if fonts are loaded.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext(\"2d\");\n\n    let called = 0;\n    function isFontReady(name, callback) {\n      // With setTimeout clamping this gives the font ~100ms to load.\n      if (++called > 30) {\n        warn(\"Load test font never loaded.\");\n        callback();\n        return;\n      }\n      ctx.font = \"30px \" + name;\n      ctx.fillText(\".\", 0, 20);\n      const imageData = ctx.getImageData(0, 0, 1, 1);\n      if (imageData.data[3] > 0) {\n        callback();\n        return;\n      }\n      setTimeout(isFontReady.bind(null, name, callback));\n    }\n\n    const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n    // Chromium seems to cache fonts based on a hash of the actual font data,\n    // so the font must be modified for each load test else it will appear to\n    // be loaded already.\n    // TODO: This could maybe be made faster by avoiding the btoa of the full\n    // font by splitting it in chunks before hand and padding the font id.\n    let data = this._loadTestFont;\n    const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n    data = spliceString(\n      data,\n      COMMENT_OFFSET,\n      loadTestFontId.length,\n      loadTestFontId\n    );\n    // CFF checksum is important for IE, adjusting it\n    const CFF_CHECKSUM_OFFSET = 16;\n    const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n    let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n      checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n    }\n    if (i < loadTestFontId.length) {\n      // align to 4 bytes boundary\n      checksum = (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n    }\n    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n    const url = `url(data:font/opentype;base64,${btoa(data)});`;\n    const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n    this.insertRule(rule);\n\n    const div = this._document.createElement(\"div\");\n    div.style.visibility = \"hidden\";\n    div.style.width = div.style.height = \"10px\";\n    div.style.position = \"absolute\";\n    div.style.top = div.style.left = \"0px\";\n\n    for (const name of [font.loadedName, loadTestFontId]) {\n      const span = this._document.createElement(\"span\");\n      span.textContent = \"Hi\";\n      span.style.fontFamily = name;\n      div.append(span);\n    }\n    this._document.body.append(div);\n\n    isFontReady(loadTestFontId, () => {\n      div.remove();\n      request.complete();\n    });\n    /** Hack end */\n  }\n}\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      inspectFont = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._inspectFont = inspectFont;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    this._inspectFont?.(this);\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    this._inspectFont?.(this, url);\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && FeatureTest.isEvalSupported) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        // eslint-disable-next-line prefer-spread\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS, warn } from \"../shared/util.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_utils.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nif (typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"SKIP_BABEL\")) {\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    try {\n      globalThis.DOMMatrix = __non_webpack_require__(\"canvas\").DOMMatrix;\n    } catch (ex) {\n      warn(`Cannot polyfill \\`DOMMatrix\\`, rendering may be broken: \"${ex}\".`);\n    }\n  })();\n\n  (function checkPath2D() {\n    if (globalThis.Path2D || !isNodeJS) {\n      return;\n    }\n    try {\n      const { CanvasRenderingContext2D } = __non_webpack_require__(\"canvas\");\n      const { polyfillPath2D } = __non_webpack_require__(\"path2d-polyfill\");\n\n      globalThis.CanvasRenderingContext2D = CanvasRenderingContext2D;\n      polyfillPath2D(globalThis);\n    } catch (ex) {\n      warn(`Cannot polyfill \\`Path2D\\`, rendering may be broken: \"${ex}\".`);\n    }\n  })();\n}\n\nconst fetchData = function (url) {\n  return new Promise((resolve, reject) => {\n    const fs = __non_webpack_require__(\"fs\");\n    fs.readFile(url, (error, data) => {\n      if (error || !data) {\n        reject(new Error(error));\n        return;\n      }\n      resolve(new Uint8Array(data));\n    });\n  });\n};\n\nclass NodeFilterFactory extends BaseFilterFactory {}\n\nclass NodeCanvasFactory extends BaseCanvasFactory {\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    const Canvas = __non_webpack_require__(\"canvas\");\n    return Canvas.createCanvas(width, height);\n  }\n}\n\nclass NodeCMapReaderFactory extends BaseCMapReaderFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    return fetchData(url).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass NodeStandardFontDataFactory extends BaseStandardFontDataFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    return fetchData(url);\n  }\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeFilterFactory,\n  NodeStandardFontDataFactory,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FeatureTest,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  isNodeJS,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  getCurrentTransform,\n  getCurrentTransformInverse,\n  PixelsPerInch,\n} from \"./display_utils.js\";\nimport {\n  getShadingPattern,\n  PathType,\n  TilingPattern,\n} from \"./pattern_helper.js\";\nimport { convertBlackAndWhiteToRGBA } from \"../shared/image_utils.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and schedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\n// To disable Type3 compilation, set the value to `-1`.\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n/**\n * Overrides certain methods on a 2d ctx so that when they are called they\n * will also call the same method on the destCtx. The methods that are\n * overridden are all the transformation state modifiers, path creation, and\n * save/restore. We only forward these specific methods because they are the\n * only state modifiers that we cannot copy over when we switch contexts.\n *\n * To remove mirroring call `ctx._removeMirroring()`.\n *\n * @param {Object} ctx - The 2d canvas context that will duplicate its calls on\n *   the destCtx.\n * @param {Object} destCtx - The 2d canvas context that will receive the\n *   forwarded calls.\n */\nfunction mirrorContextOperations(ctx, destCtx) {\n  if (ctx._removeMirroring) {\n    throw new Error(\"Context is already forwarding operations.\");\n  }\n  ctx.__originalSave = ctx.save;\n  ctx.__originalRestore = ctx.restore;\n  ctx.__originalRotate = ctx.rotate;\n  ctx.__originalScale = ctx.scale;\n  ctx.__originalTranslate = ctx.translate;\n  ctx.__originalTransform = ctx.transform;\n  ctx.__originalSetTransform = ctx.setTransform;\n  ctx.__originalResetTransform = ctx.resetTransform;\n  ctx.__originalClip = ctx.clip;\n  ctx.__originalMoveTo = ctx.moveTo;\n  ctx.__originalLineTo = ctx.lineTo;\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n  ctx.__originalRect = ctx.rect;\n  ctx.__originalClosePath = ctx.closePath;\n  ctx.__originalBeginPath = ctx.beginPath;\n\n  ctx._removeMirroring = () => {\n    ctx.save = ctx.__originalSave;\n    ctx.restore = ctx.__originalRestore;\n    ctx.rotate = ctx.__originalRotate;\n    ctx.scale = ctx.__originalScale;\n    ctx.translate = ctx.__originalTranslate;\n    ctx.transform = ctx.__originalTransform;\n    ctx.setTransform = ctx.__originalSetTransform;\n    ctx.resetTransform = ctx.__originalResetTransform;\n\n    ctx.clip = ctx.__originalClip;\n    ctx.moveTo = ctx.__originalMoveTo;\n    ctx.lineTo = ctx.__originalLineTo;\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n    ctx.rect = ctx.__originalRect;\n    ctx.closePath = ctx.__originalClosePath;\n    ctx.beginPath = ctx.__originalBeginPath;\n    delete ctx._removeMirroring;\n  };\n\n  ctx.save = function ctxSave() {\n    destCtx.save();\n    this.__originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    destCtx.restore();\n    this.__originalRestore();\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    destCtx.translate(x, y);\n    this.__originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    destCtx.scale(x, y);\n    this.__originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    destCtx.transform(a, b, c, d, e, f);\n    this.__originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    destCtx.setTransform(a, b, c, d, e, f);\n    this.__originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    destCtx.resetTransform();\n    this.__originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    destCtx.rotate(angle);\n    this.__originalRotate(angle);\n  };\n\n  ctx.clip = function ctxRotate(rule) {\n    destCtx.clip(rule);\n    this.__originalClip(rule);\n  };\n\n  ctx.moveTo = function (x, y) {\n    destCtx.moveTo(x, y);\n    this.__originalMoveTo(x, y);\n  };\n\n  ctx.lineTo = function (x, y) {\n    destCtx.lineTo(x, y);\n    this.__originalLineTo(x, y);\n  };\n\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  };\n\n  ctx.rect = function (x, y, width, height) {\n    destCtx.rect(x, y, width, height);\n    this.__originalRect(x, y, width, height);\n  };\n\n  ctx.closePath = function () {\n    destCtx.closePath();\n    this.__originalClosePath();\n  };\n\n  ctx.beginPath = function () {\n    destCtx.beginPath();\n    this.__originalBeginPath();\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    return canvasEntry;\n  }\n\n  delete(id) {\n    delete this.cache[id];\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\nfunction drawImageAtIntegerCoords(\n  ctx,\n  srcImg,\n  srcX,\n  srcY,\n  srcW,\n  srcH,\n  destX,\n  destY,\n  destW,\n  destH\n) {\n  const [a, b, c, d, tx, ty] = getCurrentTransform(ctx);\n  if (b === 0 && c === 0) {\n    // top-left corner is at (X, Y) and\n    // bottom-right one is at (X + width, Y + height).\n\n    // If leftX is 4.321 then it's rounded to 4.\n    // If width is 10.432 then it's rounded to 11 because\n    // rightX = leftX + width = 14.753 which is rounded to 15\n    // so after rounding the total width is 11 (15 - 4).\n    // It's why we can't just floor/ceil uniformly, it just depends\n    // on the values we've.\n\n    const tlX = destX * a + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destY * d + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destX + destW) * a + tx;\n\n    // Some pdf contains images with 1x1 images so in case of 0-width after\n    // scaling we must fallback on 1 to be sure there is something.\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destY + destH) * d + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n\n    // We must apply a transformation in order to apply it on the image itself.\n    // For example if a == 1 && d == -1, it means that the image itself is\n    // mirrored w.r.t. the x-axis.\n    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    return [rWidth, rHeight];\n  }\n\n  if (a === 0 && d === 0) {\n    // This path is taken in issue9462.pdf (page 3).\n    const tlX = destY * c + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destX * b + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destY + destH) * c + tx;\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destX + destW) * b + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n\n    ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    return [rHeight, rWidth];\n  }\n\n  // Not a scale matrix so let the render handle the case without rounding.\n  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n\n  const scaleX = Math.hypot(a, b);\n  const scaleY = Math.hypot(c, d);\n  return [scaleX * destW, scaleY * destH];\n}\n\nfunction compileType3Glyph(imgData) {\n  const { width, height } = imgData;\n  if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n    return null;\n  }\n\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width1 = width + 1;\n  let points = new Uint8Array(width1 * (height + 1));\n  let i, j, j0;\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7;\n  let data = new Uint8Array(lineSize * height),\n    pos = 0;\n  for (const elem of imgData.data) {\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const path = new Path2D();\n\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    path.moveTo(p % width1, i);\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n      path.lineTo(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    --i;\n  }\n\n  // Immediately release the, potentially large, `Uint8Array`s after parsing.\n  data = null;\n  points = null;\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.fill(path);\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor(width, height) {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.transferMaps = \"none\";\n\n    this.startNewPathAndClipBox([0, 0, width, height]);\n  }\n\n  clone() {\n    const clone = Object.create(this);\n    clone.clipBox = this.clipBox.slice();\n    return clone;\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  updatePathMinMax(transform, x, y) {\n    [x, y] = Util.applyTransform([x, y], transform);\n    this.minX = Math.min(this.minX, x);\n    this.minY = Math.min(this.minY, y);\n    this.maxX = Math.max(this.maxX, x);\n    this.maxY = Math.max(this.maxY, y);\n  }\n\n  updateRectMinMax(transform, rect) {\n    const p1 = Util.applyTransform(rect, transform);\n    const p2 = Util.applyTransform(rect.slice(2), transform);\n    this.minX = Math.min(this.minX, p1[0], p2[0]);\n    this.minY = Math.min(this.minY, p1[1], p2[1]);\n    this.maxX = Math.max(this.maxX, p1[0], p2[0]);\n    this.maxY = Math.max(this.maxY, p1[1], p2[1]);\n  }\n\n  updateScalingPathMinMax(transform, minMax) {\n    Util.scaleMinMax(transform, minMax);\n    this.minX = Math.min(this.minX, minMax[0]);\n    this.maxX = Math.max(this.maxX, minMax[1]);\n    this.minY = Math.min(this.minY, minMax[2]);\n    this.maxY = Math.max(this.maxY, minMax[3]);\n  }\n\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n    const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n    if (minMax) {\n      minMax[0] = Math.min(minMax[0], box[0], box[2]);\n      minMax[1] = Math.max(minMax[1], box[0], box[2]);\n      minMax[2] = Math.min(minMax[2], box[1], box[3]);\n      minMax[3] = Math.max(minMax[3], box[1], box[3]);\n      return;\n    }\n    this.updateRectMinMax(transform, box);\n  }\n\n  getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\n    if (pathType === PathType.STROKE) {\n      if (!transform) {\n        unreachable(\"Stroke bounding box must include transform.\");\n      }\n      // Stroked paths can be outside of the path bounding box by 1/2 the line\n      // width.\n      const scale = Util.singularValueDecompose2dScale(transform);\n      const xStrokePad = (scale[0] * this.lineWidth) / 2;\n      const yStrokePad = (scale[1] * this.lineWidth) / 2;\n      box[0] -= xStrokePad;\n      box[1] -= yStrokePad;\n      box[2] += xStrokePad;\n      box[3] += yStrokePad;\n    }\n    return box;\n  }\n\n  updateClipFromPath() {\n    const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n  }\n\n  isEmptyClip() {\n    return this.minX === Infinity;\n  }\n\n  startNewPathAndClipBox(box) {\n    this.clipBox = box;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = 0;\n    this.maxY = 0;\n  }\n\n  getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    return Util.intersect(\n      this.clipBox,\n      this.getPathBoundingBox(pathType, transform)\n    );\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    const white = 0xffffffff;\n    const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  if (imgData.bitmap) {\n    // The bitmap has been created in the worker.\n    ctx.drawImage(imgData.bitmap, 0, 0);\n    return;\n  }\n\n  // Slow path: OffscreenCanvas isn't available in the worker.\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n\n    ({ srcPos } = convertBlackAndWhiteToRGBA({\n      src,\n      srcPos,\n      dest,\n      width,\n      height: thisChunkHeight,\n      nonBlackColor: 0,\n    }));\n\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n    \"filter\",\n  ];\n  for (const property of properties) {\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    !isNodeJS\n  ) {\n    const { filter } = ctx;\n    if (filter !== \"none\" && filter !== \"\") {\n      ctx.filter = \"none\";\n    }\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap,\n  layerOffsetX,\n  layerOffsetY,\n  maskOffsetX,\n  maskOffsetY\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  const composeFn =\n    subtype === \"Luminosity\" ? composeSMaskLuminosity : composeSMaskAlpha;\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(\n      layerOffsetX - maskOffsetX,\n      row + (layerOffsetY - maskOffsetY),\n      width,\n      chunkHeight\n    );\n    const layerData = layerCtx.getImageData(\n      layerOffsetX,\n      row + layerOffsetY,\n      width,\n      chunkHeight\n    );\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx, layerBox) {\n  const layerOffsetX = layerBox[0];\n  const layerOffsetY = layerBox[1];\n  const layerWidth = layerBox[2] - layerOffsetX;\n  const layerHeight = layerBox[3] - layerOffsetY;\n  if (layerWidth === 0 || layerHeight === 0) {\n    return;\n  }\n  genericComposeSMask(\n    smask.context,\n    layerCtx,\n    layerWidth,\n    layerHeight,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap,\n    layerOffsetX,\n    layerOffsetY,\n    smask.offsetX,\n    smask.offsetY\n  );\n  ctx.save();\n  ctx.globalAlpha = 1;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.drawImage(layerCtx.canvas, 0, 0);\n  ctx.restore();\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    filterFactory,\n    { optionalContentConfig, markedContentStack = null },\n    annotationCanvasMap,\n    pageColors\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.suspendedCtx = null;\n    this.contentVisible = true;\n    this.markedContentStack = markedContentStack || [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedPatterns = new Map();\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.viewportScale = 1;\n    this.outputScaleX = 1;\n    this.outputScaleY = 1;\n    this.pageColors = pageColors;\n\n    this._cachedScaleForStroking = [-1, 0];\n    this._cachedGetSinglePixelWidth = null;\n    this._cachedBitmapsMap = new Map();\n  }\n\n  getObject(data, fallback = null) {\n    if (typeof data === \"string\") {\n      return data.startsWith(\"g_\")\n        ? this.commonObjs.get(data)\n        : this.objs.get(data);\n    }\n    return fallback;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    const savedFillStyle = this.ctx.fillStyle;\n    this.ctx.fillStyle = background || \"#ffffff\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.fillStyle = savedFillStyle;\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform(...getCurrentTransform(this.compositeCtx));\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform(...transform);\n      this.outputScaleX = transform[0];\n      this.outputScaleY = transform[0];\n    }\n    this.ctx.transform(...viewport.transform);\n    this.viewportScale = viewport.scale;\n\n    this.baseTransform = getCurrentTransform(this.ctx);\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        // eslint-disable-next-line prefer-spread\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  #restoreInitialState() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.inSMaskMode) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n  }\n\n  endDrawing() {\n    this.#restoreInitialState();\n\n    this.cachedCanvases.clear();\n    this.cachedPatterns.clear();\n\n    for (const cache of this._cachedBitmapsMap.values()) {\n      for (const canvas of cache.values()) {\n        if (\n          typeof HTMLCanvasElement !== \"undefined\" &&\n          canvas instanceof HTMLCanvasElement\n        ) {\n          canvas.width = canvas.height = 0;\n        }\n      }\n      cache.clear();\n    }\n    this._cachedBitmapsMap.clear();\n    this.#drawFilter();\n  }\n\n  #drawFilter() {\n    if (this.pageColors) {\n      const hcmFilterId = this.filterFactory.addHCMFilter(\n        this.pageColors.foreground,\n        this.pageColors.background\n      );\n      if (hcmFilterId !== \"none\") {\n        const savedFilter = this.ctx.filter;\n        this.ctx.filter = hcmFilterId;\n        this.ctx.drawImage(this.ctx.canvas, 0, 0);\n        this.ctx.filter = savedFilter;\n      }\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        // See bug 1820511 (Windows specific bug).\n        // TODO: once the above bug is fixed we could revert to:\n        // newWidth = Math.ceil(paintWidth / 2);\n        newWidth =\n          paintWidth >= 16384\n            ? Math.floor(paintWidth / 2) - 1 || 1\n            : Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        // TODO: see the comment above.\n        newHeight =\n          paintHeight >= 16384\n            ? Math.floor(paintHeight / 2) - 1 || 1\n            : Math.ceil(paintHeight) / 2;\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const { width, height } = img;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const currentTransform = getCurrentTransform(ctx);\n\n    let cache, cacheKey, scaled, maskCanvas;\n    if ((img.bitmap || img.data) && img.count > 1) {\n      const mainKey = img.bitmap || img.data.buffer;\n      // We're reusing the same image several times, so we can cache it.\n      // In case we've a pattern fill we just keep the scaled version of\n      // the image.\n      // Only the scaling part matters, the translation part is just used\n      // to compute offsets (but not when filling patterns see #15573).\n      // TODO: handle the case of a pattern fill if it's possible.\n      cacheKey = JSON.stringify(\n        isPatternFill\n          ? currentTransform\n          : [currentTransform.slice(0, 4), fillColor]\n      );\n\n      cache = this._cachedBitmapsMap.get(mainKey);\n      if (!cache) {\n        cache = new Map();\n        this._cachedBitmapsMap.set(mainKey, cache);\n      }\n      const cachedImage = cache.get(cacheKey);\n      if (cachedImage && !isPatternFill) {\n        const offsetX = Math.round(\n          Math.min(currentTransform[0], currentTransform[2]) +\n            currentTransform[4]\n        );\n        const offsetY = Math.round(\n          Math.min(currentTransform[1], currentTransform[3]) +\n            currentTransform[5]\n        );\n        return {\n          canvas: cachedImage,\n          offsetX,\n          offsetY,\n        };\n      }\n      scaled = cachedImage;\n    }\n\n    if (!scaled) {\n      maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      putBinaryImageMask(maskCanvas.context, img);\n    }\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n\n    let maskToCanvas = Util.transform(currentTransform, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.round(rect[2] - rect[0]) || 1;\n    const drawnHeight = Math.round(rect[3] - rect[1]) || 1;\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight\n    );\n    const fillCtx = fillCanvas.context;\n\n    // The offset will be the top-left cordinate mask.\n    // If objToCanvas is [a,b,c,d,e,f] then:\n    //   - offsetX = min(a, c) + e\n    //   - offsetY = min(b, d) + f\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform(...maskToCanvas);\n\n    if (!scaled) {\n      // Pre-scale if needed to improve image smoothing.\n      scaled = this._scaleImage(\n        maskCanvas.canvas,\n        getCurrentTransformInverse(fillCtx)\n      );\n      scaled = scaled.img;\n      if (cache && isPatternFill) {\n        cache.set(cacheKey, scaled);\n      }\n    }\n\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      getCurrentTransform(fillCtx),\n      img.interpolate\n    );\n\n    drawImageAtIntegerCoords(\n      fillCtx,\n      scaled,\n      0,\n      0,\n      scaled.width,\n      scaled.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, PathType.FILL)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    if (cache && !isPatternFill) {\n      // The fill canvas is put in the cache associated to the mask image\n      // so we must remove from the cached canvas: it mustn't be used again.\n      this.cachedCanvases.delete(\"fillCanvas\");\n      cache.set(cacheKey, fillCanvas.canvas);\n    }\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    if (width !== this.current.lineWidth) {\n      this._cachedScaleForStroking[0] = -1;\n    }\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (const [key, value] of states) {\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = value;\n          break;\n        case \"ca\":\n          this.current.fillAlpha = value;\n          this.ctx.globalAlpha = value;\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          this.current.activeSMask = value ? this.tempSMask : null;\n          this.tempSMask = null;\n          this.checkSMaskState();\n          break;\n        case \"TR\":\n          this.ctx.filter = this.current.transferMaps =\n            this.filterFactory.addFilter(value);\n          break;\n      }\n    }\n  }\n\n  get inSMaskMode() {\n    return !!this.suspendedCtx;\n  }\n\n  checkSMaskState() {\n    const inSMaskMode = this.inSMaskMode;\n    if (this.current.activeSMask && !inSMaskMode) {\n      this.beginSMaskMode();\n    } else if (!this.current.activeSMask && inSMaskMode) {\n      this.endSMaskMode();\n    }\n    // Else, the state is okay and nothing needs to be done.\n  }\n\n  /**\n   * Soft mask mode takes the current main drawing canvas and replaces it with\n   * a temporary canvas. Any drawing operations that happen on the temporary\n   * canvas need to be composed with the main canvas that was suspended (see\n   * `compose()`). The temporary canvas also duplicates many of its operations\n   * on the suspended canvas to keep them in sync, so that when the soft mask\n   * mode ends any clipping paths or transformations will still be active and in\n   * the right order on the canvas' graphics state stack.\n   */\n  beginSMaskMode() {\n    if (this.inSMaskMode) {\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\n    }\n    const drawnWidth = this.ctx.canvas.width;\n    const drawnHeight = this.ctx.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight\n    );\n    this.suspendedCtx = this.ctx;\n    this.ctx = scratchCanvas.context;\n    const ctx = this.ctx;\n    ctx.setTransform(...getCurrentTransform(this.suspendedCtx));\n    copyCtxState(this.suspendedCtx, ctx);\n    mirrorContextOperations(ctx, this.suspendedCtx);\n\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n  }\n\n  endSMaskMode() {\n    if (!this.inSMaskMode) {\n      throw new Error(\"endSMaskMode called while not in smask mode\");\n    }\n    // The soft mask is done, now restore the suspended canvas as the main\n    // drawing canvas.\n    this.ctx._removeMirroring();\n    copyCtxState(this.ctx, this.suspendedCtx);\n    this.ctx = this.suspendedCtx;\n\n    this.suspendedCtx = null;\n  }\n\n  compose(dirtyBox) {\n    if (!this.current.activeSMask) {\n      return;\n    }\n\n    if (!dirtyBox) {\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n    } else {\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\n    }\n    const smask = this.current.activeSMask;\n    const suspendedCtx = this.suspendedCtx;\n\n    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n    // Whatever was drawn has been moved to the suspended canvas, now clear it\n    // out of the current canvas.\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.restore();\n  }\n\n  save() {\n    if (this.inSMaskMode) {\n      // SMask mode may be turned on/off causing us to lose graphics state.\n      // Copy the temporary canvas state to the main(suspended) canvas to keep\n      // it in sync.\n      copyCtxState(this.ctx, this.suspendedCtx);\n      // Don't bother calling save on the temporary canvas since state is not\n      // saved there.\n      this.suspendedCtx.save();\n    } else {\n      this.ctx.save();\n    }\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    if (this.stateStack.length === 0 && this.inSMaskMode) {\n      this.endSMaskMode();\n    }\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      if (this.inSMaskMode) {\n        // Graphics state is stored on the main(suspended) canvas. Restore its\n        // state then copy it over to the temporary canvas.\n        this.suspendedCtx.restore();\n        copyCtxState(this.suspendedCtx, this.ctx);\n      } else {\n        this.ctx.restore();\n      }\n      this.checkSMaskState();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedScaleForStroking[0] = -1;\n      this._cachedGetSinglePixelWidth = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args, minMax) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let startX, startY;\n    const currentTransform = getCurrentTransform(ctx);\n\n    // Most of the time the current transform is a scaling matrix\n    // so we don't need to transform points before computing min/max:\n    // we can compute min/max first and then smartly \"apply\" the\n    // transform (see Util.scaleMinMax).\n    // For rectangle, moveTo and lineTo, min/max are computed in the\n    // worker (see evaluator.js).\n    const isScalingMatrix =\n      (currentTransform[0] === 0 && currentTransform[3] === 0) ||\n      (currentTransform[1] === 0 && currentTransform[2] === 0);\n    const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n          if (!isScalingMatrix) {\n            current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\n          }\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.curveTo:\n          startX = x;\n          startY = y;\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y,\n            minMaxForBezier\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          startX = x;\n          startY = y;\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            minMaxForBezier\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          startX = x;\n          startY = y;\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            x,\n            y,\n            x,\n            y,\n            minMaxForBezier\n          );\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n\n    if (isScalingMatrix) {\n      current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n    }\n\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath = true) {\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          getCurrentTransformInverse(ctx),\n          PathType.STROKE\n        );\n        this.rescaleAndStroke(/* saveRestore */ false);\n        ctx.restore();\n      } else {\n        this.rescaleAndStroke(/* saveRestore */ true);\n      }\n    }\n    if (consumePath) {\n      this.consumePath(this.current.getClippedPathBoundingBox());\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath = true) {\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        getCurrentTransformInverse(ctx),\n        PathType.FILL\n      );\n      needRestore = true;\n    }\n\n    const intersect = this.current.getClippedPathBoundingBox();\n    if (this.contentVisible && intersect !== null) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath(intersect);\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (const path of paths) {\n      ctx.setTransform(...path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n    const typeface =\n      fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform(...patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.strokeText(character, x, y);\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = (this.pendingTextPaths ||= []);\n      paths.push({\n        transform: getCurrentTransform(ctx),\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let patternTransform;\n    if (current.patternFill) {\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        getCurrentTransformInverse(ctx),\n        PathType.FILL\n      );\n      patternTransform = getCurrentTransform(ctx);\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n\n    let lineWidth = current.lineWidth;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        lineWidth = this.getSinglePixelWidth();\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    if (font.isInvalidPDFjsFont) {\n      const chars = [];\n      let width = 0;\n      for (const glyph of glyphs) {\n        chars.push(glyph.unicode);\n        width += glyph.width;\n      }\n      ctx.fillText(chars.join(\"\"), 0, 0);\n      current.x += width * widthAdvanceScale * textHScale;\n      ctx.restore();\n      this.compose();\n\n      return undefined;\n    }\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(character, scaledX, scaledY, patternTransform);\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform\n            );\n          }\n        }\n      }\n\n      const charWidth = vertical\n        ? width * widthAdvanceScale - spacing * fontDirection\n        : width * widthAdvanceScale + spacing * fontDirection;\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    this.compose();\n\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform(...fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.ctx.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory,\n            this.filterFactory,\n            {\n              optionalContentConfig: this.optionalContentConfig,\n              markedContentStack: this.markedContentStack,\n            }\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(this.getObject(objId));\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      getCurrentTransformInverse(ctx),\n      PathType.SHADING\n    );\n\n    const inv = getCurrentTransformInverse(ctx);\n    if (inv) {\n      const { width, height } = ctx.canvas;\n      const [x0, y0, x1, y1] = Util.getAxialAlignedBoundingBox(\n        [0, 0, width, height],\n        inv\n      );\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.compose(this.current.getClippedPathBoundingBox());\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform(...matrix);\n    }\n\n    this.baseTransform = getCurrentTransform(this.ctx);\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.current.updateRectMinMax(getCurrentTransform(this.ctx), bbox);\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    // If there's an active soft mask we don't want it enabled for the group, so\n    // clear it out. The mask and suspended canvas will be restored in endGroup.\n    if (this.inSMaskMode) {\n      this.endSMaskMode();\n      this.current.activeSMask = null;\n    }\n\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = getCurrentTransform(currentCtx);\n    if (group.matrix) {\n      currentCtx.transform(...group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      getCurrentTransform(currentCtx)\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform(...currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n      currentCtx.save();\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    const ctx = this.groupStack.pop();\n    this.ctx = ctx;\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n      this.restore();\n    } else {\n      this.ctx.restore();\n      const currentMtx = getCurrentTransform(this.ctx);\n      this.restore();\n      this.ctx.save();\n      this.ctx.setTransform(...currentMtx);\n      const dirtyBox = Util.getAxialAlignedBoundingBox(\n        [0, 0, groupCtx.canvas.width, groupCtx.canvas.height],\n        currentMtx\n      );\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      this.ctx.restore();\n      this.compose(dirtyBox);\n    }\n  }\n\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n    // The annotations are drawn just after the page content.\n    // The page content drawing can potentially have set a transform,\n    // a clipping path, whatever...\n    // So in order to have something clean, we restore the initial state.\n    this.#restoreInitialState();\n    resetCtxToDefault(this.ctx);\n\n    this.ctx.save();\n    this.save();\n\n    if (this.baseTransform) {\n      this.ctx.setTransform(...this.baseTransform);\n    }\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n\n      if (hasOwnCanvas && this.annotationCanvasMap) {\n        transform = transform.slice();\n        transform[4] -= rect[0];\n        transform[5] -= rect[1];\n\n        rect = rect.slice();\n        rect[0] = rect[1] = 0;\n        rect[2] = width;\n        rect[3] = height;\n\n        const [scaleX, scaleY] = Util.singularValueDecompose2dScale(\n          getCurrentTransform(this.ctx)\n        );\n        const { viewportScale } = this;\n        const canvasWidth = Math.ceil(\n          width * this.outputScaleX * viewportScale\n        );\n        const canvasHeight = Math.ceil(\n          height * this.outputScaleY * viewportScale\n        );\n\n        this.annotationCanvas = this.canvasFactory.create(\n          canvasWidth,\n          canvasHeight\n        );\n        const { canvas, context } = this.annotationCanvas;\n        this.annotationCanvasMap.set(id, canvas);\n        this.annotationCanvas.savedCtx = this.ctx;\n        this.ctx = context;\n        this.ctx.save();\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n\n        resetCtxToDefault(this.ctx);\n      } else {\n        resetCtxToDefault(this.ctx);\n\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.ctx.clip();\n        this.endPath();\n      }\n    }\n\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n\n    this.transform(...transform);\n    this.transform(...matrix);\n  }\n\n  endAnnotation() {\n    if (this.annotationCanvas) {\n      this.ctx.restore();\n      this.#drawFilter();\n\n      this.ctx = this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas;\n    }\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const count = img.count;\n    img = this.getObject(img.data, img);\n    img.count = count;\n\n    const ctx = this.ctx;\n    const glyph = this.processingType3;\n\n    if (glyph) {\n      if (glyph.compiled === undefined) {\n        glyph.compiled = compileType3Glyph(img);\n      }\n\n      if (glyph.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectRepeat(\n    img,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    img = this.getObject(img.data, img);\n\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = getCurrentTransform(ctx);\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(img);\n\n    ctx.setTransform(\n      1,\n      0,\n      0,\n      1,\n      mask.offsetX - currentTransform[4],\n      mask.offsetY - currentTransform[5]\n    );\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n\n    for (const image of images) {\n      const { data, width, height, transform } = image;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      const img = this.getObject(data, image);\n      putBinaryImageMask(maskCtx, img);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            getCurrentTransformInverse(ctx),\n            PathType.FILL\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform(...transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(\n        ctx,\n        maskCanvas.canvas,\n        0,\n        0,\n        width,\n        height,\n        0,\n        -1,\n        1,\n        1\n      );\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  applyTransferMapsToCanvas(ctx) {\n    if (this.current.transferMaps !== \"none\") {\n      ctx.filter = this.current.transferMaps;\n      ctx.drawImage(ctx.canvas, 0, 0);\n      ctx.filter = \"none\";\n    }\n    return ctx.canvas;\n  }\n\n  applyTransferMapsToBitmap(imgData) {\n    if (this.current.transferMaps === \"none\") {\n      return imgData.bitmap;\n    }\n    const { bitmap, width, height } = imgData;\n    const tmpCanvas = this.cachedCanvases.getCanvas(\n      \"inlineImage\",\n      width,\n      height\n    );\n    const tmpCtx = tmpCanvas.context;\n    tmpCtx.filter = this.current.transferMaps;\n    tmpCtx.drawImage(bitmap, 0, 0);\n    tmpCtx.filter = \"none\";\n\n    return tmpCanvas.canvas;\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n\n    if (\n      (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n      !isNodeJS\n    ) {\n      // The filter, if any, will be applied in applyTransferMapsToBitmap.\n      // It must be applied to the image before rescaling else some artifacts\n      // could appear.\n      // The final restore will reset it to its value.\n      const { filter } = ctx;\n      if (filter !== \"none\" && filter !== \"\") {\n        ctx.filter = \"none\";\n      }\n    }\n\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = this.applyTransferMapsToBitmap(imgData);\n    } else if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      // typeof check is needed due to node.js support, see issue #8489\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n\n    const scaled = this._scaleImage(\n      imgToPaint,\n      getCurrentTransformInverse(ctx)\n    );\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      getCurrentTransform(ctx),\n      imgData.interpolate\n    );\n\n    drawImageAtIntegerCoords(\n      ctx,\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n    this.compose();\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = imgData.bitmap;\n    } else {\n      const w = imgData.width;\n      const h = imgData.height;\n\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n\n    for (const entry of map) {\n      ctx.save();\n      ctx.transform(...entry.transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(\n        ctx,\n        imgToPaint,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n    this.compose();\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath(clipBox) {\n    const isEmpty = this.current.isEmptyClip();\n    if (this.pendingClip) {\n      this.current.updateClipFromPath();\n    }\n    if (!this.pendingClip) {\n      this.compose(clipBox);\n    }\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (!isEmpty) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n      }\n      this.pendingClip = null;\n    }\n    this.current.startNewPathAndClipBox(this.current.clipBox);\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (!this._cachedGetSinglePixelWidth) {\n      const m = getCurrentTransform(this.ctx);\n      if (m[1] === 0 && m[2] === 0) {\n        // Fast path\n        this._cachedGetSinglePixelWidth =\n          1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n      } else {\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n        const normX = Math.hypot(m[0], m[2]);\n        const normY = Math.hypot(m[1], m[3]);\n        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n      }\n    }\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getScaleForStroking() {\n    // A pixel has thicknessX = thicknessY = 1;\n    // A transformed pixel is a parallelogram and the thicknesses\n    // corresponds to the heights.\n    // The goal of this function is to rescale before setting the\n    // lineWidth in order to have both thicknesses greater or equal\n    // to 1 after transform.\n    if (this._cachedScaleForStroking[0] === -1) {\n      const { lineWidth } = this.current;\n      const { a, b, c, d } = this.ctx.getTransform();\n      let scaleX, scaleY;\n\n      if (b === 0 && c === 0) {\n        // Fast path\n        const normX = Math.abs(a);\n        const normY = Math.abs(d);\n        if (normX === normY) {\n          if (lineWidth === 0) {\n            scaleX = scaleY = 1 / normX;\n          } else {\n            const scaledLineWidth = normX * lineWidth;\n            scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n          }\n        } else if (lineWidth === 0) {\n          scaleX = 1 / normX;\n          scaleY = 1 / normY;\n        } else {\n          const scaledXLineWidth = normX * lineWidth;\n          const scaledYLineWidth = normY * lineWidth;\n          scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n          scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n        }\n      } else {\n        // A pixel (base (x, y)) is transformed by M into a parallelogram:\n        //  - its area is |det(M)|;\n        //  - heightY (orthogonal to Mx) has a length: |det(M)| / norm(Mx);\n        //  - heightX (orthogonal to My) has a length: |det(M)| / norm(My).\n        // heightX and heightY are the thicknesses of the transformed pixel\n        // and they must be both greater or equal to 1.\n        const absDet = Math.abs(a * d - b * c);\n        const normX = Math.hypot(a, b);\n        const normY = Math.hypot(c, d);\n        if (lineWidth === 0) {\n          scaleX = normY / absDet;\n          scaleY = normX / absDet;\n        } else {\n          const baseArea = lineWidth * absDet;\n          scaleX = normY > baseArea ? normY / baseArea : 1;\n          scaleY = normX > baseArea ? normX / baseArea : 1;\n        }\n      }\n      this._cachedScaleForStroking[0] = scaleX;\n      this._cachedScaleForStroking[1] = scaleY;\n    }\n    return this._cachedScaleForStroking;\n  }\n\n  // Rescale before stroking in order to have a final lineWidth\n  // with both thicknesses greater or equal to 1.\n  rescaleAndStroke(saveRestore) {\n    const { ctx } = this;\n    const { lineWidth } = this.current;\n    const [scaleX, scaleY] = this.getScaleForStroking();\n\n    ctx.lineWidth = lineWidth || 1;\n\n    if (scaleX === 1 && scaleY === 1) {\n      ctx.stroke();\n      return;\n    }\n\n    const dashes = ctx.getLineDash();\n    if (saveRestore) {\n      ctx.save();\n    }\n\n    ctx.scale(scaleX, scaleY);\n\n    // How the dashed line is rendered depends on the current transform...\n    // so we added a rescale to handle too thin lines and consequently\n    // the way the line is dashed will be modified.\n    // If scaleX === scaleY, the dashed lines will be rendered correctly\n    // else we'll have some bugs (but only with too thin lines).\n    // Here we take the max... why not taking the min... or something else.\n    // Anyway, as said it's buggy when scaleX !== scaleY.\n    if (dashes.length > 0) {\n      const scale = Math.max(scaleX, scaleY);\n      ctx.setLineDash(dashes.map(x => x / scale));\n      ctx.lineDashOffset /= scale;\n    }\n\n    ctx.stroke();\n\n    if (saveRestore) {\n      ctx.restore();\n    }\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormatError, info, unreachable, Util } from \"../shared/util.js\";\nimport { getCurrentTransform } from \"./display_utils.js\";\n\nconst PathType = {\n  FILL: \"Fill\",\n  STROKE: \"Stroke\",\n  SHADING: \"Shading\",\n};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox) {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    let pattern;\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n      const ownerBBox = owner.current.getClippedPathBoundingBox(\n        pathType,\n        getCurrentTransform(ctx)\n      ) || [0, 0, 0, 0];\n      // Create a canvas that is only as big as the current path. This doesn't\n      // allow us to cache the pattern, but it generally creates much smaller\n      // canvases and saves memory use. See bug 1722807 for an example.\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\n        \"pattern\",\n        width,\n        height,\n        true\n      );\n\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.beginPath();\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      // Non shading fill patterns are positioned relative to the base transform\n      // (usually the page's initial transform), but we may have created a\n      // smaller canvas based on the path, so we must account for the shift.\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n      inverse = Util.transform(inverse, [\n        1,\n        0,\n        0,\n        1,\n        ownerBBox[0],\n        ownerBBox[1],\n      ]);\n\n      tmpCtx.transform(...owner.baseTransform);\n      if (this.matrix) {\n        tmpCtx.transform(...this.matrix);\n      }\n      applyBoundingBox(tmpCtx, this._bbox);\n\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\n      tmpCtx.fill();\n\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n      const domMatrix = new DOMMatrix(inverse);\n      pattern.setTransform(domMatrix);\n    } else {\n      // Shading fills are applied relative to the current matrix which is also\n      // how canvas gradients work, so there's no need to do anything special\n      // here.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (pathType === PathType.SHADING) {\n      scale = Util.singularValueDecompose2dScale(getCurrentTransform(ctx));\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      pathType === PathType.SHADING ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (pathType !== PathType.SHADING) {\n      ctx.setTransform(...owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform(...this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static MAX_PATTERN_SIZE = 3000;\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 coordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    // To match CanvasGraphics beginDrawing we must save the context here or\n    // else we end up with unbalanced save/restores.\n    tmpCtx.save();\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = getCurrentTransform(graphics.ctx);\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.current.updateRectMinMax(getCurrentTransform(graphics.ctx), [\n      x0,\n      y0,\n      x1,\n      y1,\n    ]);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (pathType !== PathType.SHADING) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    pattern.setTransform(domMatrix);\n\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, PathType, TilingPattern };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FeatureTest, ImageKind } from \"./util.js\";\n\nfunction convertToRGBA(params) {\n  switch (params.kind) {\n    case ImageKind.GRAYSCALE_1BPP:\n      return convertBlackAndWhiteToRGBA(params);\n    case ImageKind.RGB_24BPP:\n      return convertRGBToRGBA(params);\n  }\n\n  return null;\n}\n\nfunction convertBlackAndWhiteToRGBA({\n  src,\n  srcPos = 0,\n  dest,\n  width,\n  height,\n  nonBlackColor = 0xffffffff,\n  inverseDecode = false,\n}) {\n  const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n  const [zeroMapping, oneMapping] = inverseDecode\n    ? [nonBlackColor, black]\n    : [black, nonBlackColor];\n  const widthInSource = width >> 3;\n  const widthRemainder = width & 7;\n  const srcLength = src.length;\n  dest = new Uint32Array(dest.buffer);\n  let destPos = 0;\n\n  for (let i = 0; i < height; i++) {\n    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\n      const elem = srcPos < srcLength ? src[srcPos] : 255;\n      dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\n    }\n    if (widthRemainder === 0) {\n      continue;\n    }\n    const elem = srcPos < srcLength ? src[srcPos++] : 255;\n    for (let j = 0; j < widthRemainder; j++) {\n      dest[destPos++] = elem & (1 << (7 - j)) ? oneMapping : zeroMapping;\n    }\n  }\n  return { srcPos, destPos };\n}\n\nfunction convertRGBToRGBA({\n  src,\n  srcPos = 0,\n  dest,\n  destPos = 0,\n  width,\n  height,\n}) {\n  let i = 0;\n  const len32 = src.length >> 2;\n  const src32 = new Uint32Array(src.buffer, srcPos, len32);\n\n  if (FeatureTest.isLittleEndian) {\n    // It's a way faster to do the shuffle manually instead of working\n    // component by component with some Uint8 arrays.\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i]; // R2B1G1R1\n      const s2 = src32[i + 1]; // G3R3B2G2\n      const s3 = src32[i + 2]; // B4G4R4B3\n\n      dest[destPos] = s1 | 0xff000000;\n      dest[destPos + 1] = (s1 >>> 24) | (s2 << 8) | 0xff000000;\n      dest[destPos + 2] = (s2 >>> 16) | (s3 << 16) | 0xff000000;\n      dest[destPos + 3] = (s3 >>> 8) | 0xff000000;\n    }\n\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] =\n        src[j] | (src[j + 1] << 8) | (src[j + 2] << 16) | 0xff000000;\n    }\n  } else {\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i]; // R1G1B1R2\n      const s2 = src32[i + 1]; // G2B2R3G3\n      const s3 = src32[i + 2]; // B3R4G4B4\n\n      dest[destPos] = s1 | 0xff;\n      dest[destPos + 1] = (s1 << 24) | (s2 >>> 8) | 0xff;\n      dest[destPos + 2] = (s2 << 16) | (s3 >>> 16) | 0xff;\n      dest[destPos + 3] = (s3 << 8) | 0xff;\n    }\n\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] =\n        (src[j] << 24) | (src[j + 1] << 16) | (src[j + 2] << 8) | 0xff;\n    }\n  }\n\n  return { srcPos, destPos };\n}\n\nfunction grayToRGBA(src, dest) {\n  if (FeatureTest.isLittleEndian) {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = (src[i] * 0x10101) | 0xff000000;\n    }\n  } else {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = (src[i] * 0x1010100) | 0x000000ff;\n    }\n  }\n}\n\nexport { convertBlackAndWhiteToRGBA, convertToRGBA, grayToRGBA };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort = null;\nGlobalWorkerOptions.workerSrc = \"\";\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  MissingPDFException,\n  PasswordException,\n  PromiseCapability,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    unreachable(\n      'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n    );\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this.#processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this.#createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this.comObj.postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = new PromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this.comObj.postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = new PromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          comObj.postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = new PromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = new PromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  #createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = new PromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        comObj.postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: new PromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  #processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull?.());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onCancel?.(wrapReason(data.reason)));\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  async #deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall?.promise,\n      streamController.pullCall?.promise,\n      streamController.cancelCall?.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  #metadataMap;\n\n  #data;\n\n  constructor({ parsedData, rawData }) {\n    this.#metadataMap = parsedData;\n    this.#data = rawData;\n  }\n\n  getRaw() {\n    return this.#data;\n  }\n\n  get(name) {\n    return this.#metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this.#metadataMap);\n  }\n\n  has(name) {\n    return this.#metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap, unreachable, warn } from \"../shared/util.js\";\nimport { MurmurHash3_64 } from \"../shared/murmurhash3.js\";\n\nconst INTERNAL = Symbol(\"INTERNAL\");\n\nclass OptionalContentGroup {\n  #visible = true;\n\n  constructor(name, intent) {\n    this.name = name;\n    this.intent = intent;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get visible() {\n    return this.#visible;\n  }\n\n  /**\n   * @ignore\n   */\n  _setVisible(internal, visible) {\n    if (internal !== INTERNAL) {\n      unreachable(\"Internal method `_setVisible` called.\");\n    }\n    this.#visible = visible;\n  }\n}\n\nclass OptionalContentConfig {\n  #cachedGetHash = null;\n\n  #groups = new Map();\n\n  #initialHash = null;\n\n  #order = null;\n\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this.#order = data.order;\n    for (const group of data.groups) {\n      this.#groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this.#groups.values()) {\n        group._setVisible(INTERNAL, false);\n      }\n    }\n\n    for (const on of data.on) {\n      this.#groups.get(on)._setVisible(INTERNAL, true);\n    }\n\n    for (const off of data.off) {\n      this.#groups.get(off)._setVisible(INTERNAL, false);\n    }\n\n    // The following code must always run *last* in the constructor.\n    this.#initialHash = this.getHash();\n  }\n\n  #evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this.#evaluateVisibilityExpression(element);\n      } else if (this.#groups.has(element)) {\n        state = this.#groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this.#groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this.#groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this.#groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this.#evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this.#groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this.#groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this.#groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this.#groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this.#groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this.#groups.get(id)._setVisible(INTERNAL, !!visible);\n\n    this.#cachedGetHash = null;\n  }\n\n  get hasInitialVisibility() {\n    return this.#initialHash === null || this.getHash() === this.#initialHash;\n  }\n\n  getOrder() {\n    if (!this.#groups.size) {\n      return null;\n    }\n    if (this.#order) {\n      return this.#order.slice();\n    }\n    return [...this.#groups.keys()];\n  }\n\n  getGroups() {\n    return this.#groups.size > 0 ? objectFromMap(this.#groups) : null;\n  }\n\n  getGroup(id) {\n    return this.#groups.get(id) || null;\n  }\n\n  getHash() {\n    if (this.#cachedGetHash !== null) {\n      return this.#cachedGetHash;\n    }\n    const hash = new MurmurHash3_64();\n\n    for (const [id, group] of this.#groups) {\n      hash.update(`${id}:${group.visible}`);\n    }\n    return (this.#cachedGetHash = hash.hexdigest());\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"../interfaces\").IPDFStream} IPDFStream */\n/** @typedef {import(\"../interfaces\").IPDFStreamReader} IPDFStreamReader */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../interfaces\").IPDFStreamRangeReader} IPDFStreamRangeReader */\n\nimport { assert, PromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(\n    {\n      length,\n      initialData,\n      progressiveDone = false,\n      contentDispositionFilename = null,\n      disableRange = false,\n      disableStream = false,\n    },\n    pdfDataRangeTransport\n  ) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = progressiveDone;\n    this._contentDispositionFilename = contentDispositionFilename;\n\n    if (initialData?.length > 0) {\n      // Prevent any possible issues by only transferring a Uint8Array that\n      // completely \"utilizes\" its underlying ArrayBuffer.\n      const buffer =\n        initialData instanceof Uint8Array &&\n        initialData.byteLength === initialData.buffer.byteLength\n          ? initialData.buffer\n          : new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !disableStream;\n    this._isRangeSupported = !disableRange;\n    this._contentLength = length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData({ begin, chunk }) {\n    // Prevent any possible issues by only transferring a Uint8Array that\n    // completely \"utilizes\" its underlying ArrayBuffer.\n    const buffer =\n      chunk instanceof Uint8Array &&\n      chunk.byteLength === chunk.buffer.byteLength\n        ? chunk.buffer\n        : new Uint8Array(chunk).buffer;\n\n    if (begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      this._rangeReaders[0]?.onProgress?.({ loaded: evt.loaded });\n    } else {\n      this._fullRequestReader?.onProgress?.({\n        loaded: evt.loaded,\n        total: evt.total,\n      });\n    }\n  }\n\n  _onProgressiveDone() {\n    this._fullRequestReader?.progressiveDone();\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  PromiseCapability,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (value === undefined) {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\nfunction getArrayBuffer(val) {\n  if (val instanceof Uint8Array) {\n    return val.buffer;\n  }\n  if (val instanceof ArrayBuffer) {\n    return val;\n  }\n  warn(`getArrayBuffer - unexpected data format: ${val}`);\n  return new Uint8Array(val).buffer;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = new PromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._abortController = new AbortController();\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    this.onProgress?.({\n      loaded: this._loaded,\n      total: this._contentLength,\n    });\n\n    return { value: getArrayBuffer(value), done: false };\n  }\n\n  cancel(reason) {\n    this._reader?.cancel(reason);\n    this._abortController.abort();\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = new PromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    this._abortController = new AbortController();\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    this.onProgress?.({ loaded: this._loaded });\n\n    return { value: getArrayBuffer(value), done: false };\n  }\n\n  cancel(reason) {\n    this._reader?.cancel(reason);\n    this._abortController.abort();\n  }\n}\n\nexport { PDFFetchStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      Number.isInteger(rangeChunkSize) && rangeChunkSize > 0,\n      \"rangeChunkSize must be an integer larger than zero.\"\n    );\n  }\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch {\n        // TextDecoder constructor threw - unrecognized encoding.\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replaceAll(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replaceAll(\"_\", \" \");\n          text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, PromiseCapability, stringToBytes } from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  return stringToBytes(data).buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = new XMLHttpRequest();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (value === undefined) {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = new PromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  MissingPDFException,\n  PromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const url = __non_webpack_require__(\"url\");\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = new PromiseCapability();\n    this._headersCapability = new PromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = new PromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    this.onProgress?.({\n      loaded: this._loaded,\n      total: this._contentLength,\n    });\n\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = new PromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = new PromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    this.onProgress?.({ loaded: this._loaded });\n\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      const http = __non_webpack_require__(\"http\");\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      const https = __non_webpack_require__(\"https\");\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (value === undefined) {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      const http = __non_webpack_require__(\"http\");\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      const https = __non_webpack_require__(\"https\");\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    const fs = __non_webpack_require__(\"fs\");\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    const fs = __non_webpack_require__(\"fs\");\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport { deprecated, DOMSVGFactory } from \"./display_utils.js\";\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNodeJS,\n  OPS,\n  TextRenderingMode,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"GENERIC\")) {\n  throw new Error(\n    'Module \"SVGGraphics\" shall not be used outside GENERIC builds.'\n  );\n}\n\nconst SVG_DEFAULTS = {\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  fillColor: \"#000000\",\n};\nconst XML_NS = \"http://www.w3.org/XML/1998/namespace\";\nconst XLINK_NS = \"http://www.w3.org/1999/xlink\";\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\nconst createObjectURL = function (\n  data,\n  contentType = \"\",\n  forceDataSchema = false\n) {\n  if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n};\n\nconst convertImgDataToPng = (function () {\n  const PNG_HEADER = new Uint8Array([\n    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n  ]);\n  const CHUNK_WRAPPER_SIZE = 12;\n\n  const crcTable = new Int32Array(256);\n  for (let i = 0; i < 256; i++) {\n    let c = i;\n    for (let h = 0; h < 8; h++) {\n      c = c & 1 ? 0xedb88320 ^ ((c >> 1) & 0x7fffffff) : (c >> 1) & 0x7fffffff;\n    }\n    crcTable[i] = c;\n  }\n\n  function crc32(data, start, end) {\n    let crc = -1;\n    for (let i = start; i < end; i++) {\n      const a = (crc ^ data[i]) & 0xff;\n      const b = crcTable[a];\n      crc = (crc >>> 8) ^ b;\n    }\n    return crc ^ -1;\n  }\n\n  function writePngChunk(type, body, data, offset) {\n    let p = offset;\n    const len = body.length;\n\n    data[p] = (len >> 24) & 0xff;\n    data[p + 1] = (len >> 16) & 0xff;\n    data[p + 2] = (len >> 8) & 0xff;\n    data[p + 3] = len & 0xff;\n    p += 4;\n\n    data[p] = type.charCodeAt(0) & 0xff;\n    data[p + 1] = type.charCodeAt(1) & 0xff;\n    data[p + 2] = type.charCodeAt(2) & 0xff;\n    data[p + 3] = type.charCodeAt(3) & 0xff;\n    p += 4;\n\n    data.set(body, p);\n    p += body.length;\n\n    const crc = crc32(data, offset + 4, p);\n    data[p] = (crc >> 24) & 0xff;\n    data[p + 1] = (crc >> 16) & 0xff;\n    data[p + 2] = (crc >> 8) & 0xff;\n    data[p + 3] = crc & 0xff;\n  }\n\n  function adler32(data, start, end) {\n    let a = 1;\n    let b = 0;\n    for (let i = start; i < end; ++i) {\n      a = (a + (data[i] & 0xff)) % 65521;\n      b = (b + a) % 65521;\n    }\n    return (b << 16) | a;\n  }\n\n  /**\n   * @param {Uint8Array} literals The input data.\n   * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n   *   This is the required format for compressed streams in the PNG format:\n   *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n   */\n  function deflateSync(literals) {\n    if (!isNodeJS) {\n      // zlib is certainly not available outside of Node.js. We can either use\n      // the pako library for client-side DEFLATE compression, or use the\n      // canvas API of the browser to obtain a more optimal PNG file.\n      return deflateSyncUncompressed(literals);\n    }\n    try {\n      // NOTE: This implementation is far from perfect, but already way better\n      // than not applying any compression.\n      //\n      // A better algorithm will try to choose a good predictor/filter and\n      // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n      //\n      // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n      // Node v3.0.0   Buffer inherits from Uint8Array.\n      // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n      const input =\n        // eslint-disable-next-line no-undef\n        parseInt(process.versions.node) >= 8 ? literals : Buffer.from(literals);\n      const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n        level: 9,\n      });\n      return output instanceof Uint8Array ? output : new Uint8Array(output);\n    } catch (e) {\n      warn(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n    }\n\n    return deflateSyncUncompressed(literals);\n  }\n\n  // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n  function deflateSyncUncompressed(literals) {\n    let len = literals.length;\n    const maxBlockLength = 0xffff;\n\n    const deflateBlocks = Math.ceil(len / maxBlockLength);\n    const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n    let pi = 0;\n    idat[pi++] = 0x78; // compression method and flags\n    idat[pi++] = 0x9c; // flags\n\n    let pos = 0;\n    while (len > maxBlockLength) {\n      // writing non-final DEFLATE blocks type 0 and length of 65535\n      idat[pi++] = 0x00;\n      idat[pi++] = 0xff;\n      idat[pi++] = 0xff;\n      idat[pi++] = 0x00;\n      idat[pi++] = 0x00;\n      idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n      pi += maxBlockLength;\n      pos += maxBlockLength;\n      len -= maxBlockLength;\n    }\n\n    // writing non-final DEFLATE blocks type 0\n    idat[pi++] = 0x01;\n    idat[pi++] = len & 0xff;\n    idat[pi++] = (len >> 8) & 0xff;\n    idat[pi++] = ~len & 0xffff & 0xff;\n    idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n    idat.set(literals.subarray(pos), pi);\n    pi += literals.length - pos;\n\n    const adler = adler32(literals, 0, literals.length); // checksum\n    idat[pi++] = (adler >> 24) & 0xff;\n    idat[pi++] = (adler >> 16) & 0xff;\n    idat[pi++] = (adler >> 8) & 0xff;\n    idat[pi++] = adler & 0xff;\n    return idat;\n  }\n\n  function encode(imgData, kind, forceDataSchema, isMask) {\n    const width = imgData.width;\n    const height = imgData.height;\n    let bitDepth, colorType, lineSize;\n    const bytes = imgData.data;\n\n    switch (kind) {\n      case ImageKind.GRAYSCALE_1BPP:\n        colorType = 0;\n        bitDepth = 1;\n        lineSize = (width + 7) >> 3;\n        break;\n      case ImageKind.RGB_24BPP:\n        colorType = 2;\n        bitDepth = 8;\n        lineSize = width * 3;\n        break;\n      case ImageKind.RGBA_32BPP:\n        colorType = 6;\n        bitDepth = 8;\n        lineSize = width * 4;\n        break;\n      default:\n        throw new Error(\"invalid format\");\n    }\n\n    // prefix every row with predictor 0\n    const literals = new Uint8Array((1 + lineSize) * height);\n    let offsetLiterals = 0,\n      offsetBytes = 0;\n    for (let y = 0; y < height; ++y) {\n      literals[offsetLiterals++] = 0; // no prediction\n      literals.set(\n        bytes.subarray(offsetBytes, offsetBytes + lineSize),\n        offsetLiterals\n      );\n      offsetBytes += lineSize;\n      offsetLiterals += lineSize;\n    }\n\n    if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n      // inverting for image masks\n      offsetLiterals = 0;\n      for (let y = 0; y < height; y++) {\n        offsetLiterals++; // skipping predictor\n        for (let i = 0; i < lineSize; i++) {\n          literals[offsetLiterals++] ^= 0xff;\n        }\n      }\n    }\n\n    const ihdr = new Uint8Array([\n      (width >> 24) & 0xff,\n      (width >> 16) & 0xff,\n      (width >> 8) & 0xff,\n      width & 0xff,\n      (height >> 24) & 0xff,\n      (height >> 16) & 0xff,\n      (height >> 8) & 0xff,\n      height & 0xff,\n      bitDepth, // bit depth\n      colorType, // color type\n      0x00, // compression method\n      0x00, // filter method\n      0x00, // interlace method\n    ]);\n    const idat = deflateSync(literals);\n\n    // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n    const pngLength =\n      PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n    const data = new Uint8Array(pngLength);\n    let offset = 0;\n    data.set(PNG_HEADER, offset);\n    offset += PNG_HEADER.length;\n    writePngChunk(\"IHDR\", ihdr, data, offset);\n    offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n    writePngChunk(\"IDATA\", idat, data, offset);\n    offset += CHUNK_WRAPPER_SIZE + idat.length;\n    writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n    return createObjectURL(data, \"image/png\", forceDataSchema);\n  }\n\n  // eslint-disable-next-line no-shadow\n  return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n    const kind =\n      imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n    return encode(imgData, kind, forceDataSchema, isMask);\n  };\n})();\n\nclass SVGExtraState {\n  constructor() {\n    this.fontSizeScale = 1;\n    this.fontWeight = SVG_DEFAULTS.fontWeight;\n    this.fontSize = 0;\n\n    this.textMatrix = IDENTITY_MATRIX;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textMatrixScale = 1;\n\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n\n    // Default foreground and background colors\n    this.fillColor = SVG_DEFAULTS.fillColor;\n    this.strokeColor = \"#000000\";\n\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.lineJoin = \"\";\n    this.lineCap = \"\";\n    this.miterLimit = 0;\n\n    this.dashArray = [];\n    this.dashPhase = 0;\n\n    this.dependencies = [];\n\n    // Clipping\n    this.activeClipUrl = null;\n    this.clipGroup = null;\n\n    this.maskId = \"\";\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nfunction opListToTree(opList) {\n  let opTree = [];\n  const tmp = [];\n\n  for (const opListElement of opList) {\n    if (opListElement.fn === \"save\") {\n      opTree.push({ fnId: 92, fn: \"group\", items: [] });\n      tmp.push(opTree);\n      opTree = opTree.at(-1).items;\n      continue;\n    }\n\n    if (opListElement.fn === \"restore\") {\n      opTree = tmp.pop();\n    } else {\n      opTree.push(opListElement);\n    }\n  }\n  return opTree;\n}\n\n/**\n * Format a float number as a string.\n *\n * @param value {number} - The float number to format.\n * @returns {string}\n */\nfunction pf(value) {\n  if (Number.isInteger(value)) {\n    return value.toString();\n  }\n  const s = value.toFixed(10);\n  let i = s.length - 1;\n  if (s[i] !== \"0\") {\n    return s;\n  }\n\n  // Remove trailing zeros.\n  do {\n    i--;\n  } while (s[i] === \"0\");\n  return s.substring(0, s[i] === \".\" ? i : i + 1);\n}\n\n/**\n * Format a transform matrix as a string. The standard rotation, scale and\n * translation matrices are replaced by their shorter forms, and for\n * identity matrices an empty string is returned to save memory.\n *\n * @param m {Array} - The transform matrix to format.\n * @returns {string}\n */\nfunction pm(m) {\n  if (m[4] === 0 && m[5] === 0) {\n    if (m[1] === 0 && m[2] === 0) {\n      if (m[0] === 1 && m[3] === 1) {\n        return \"\";\n      }\n      return `scale(${pf(m[0])} ${pf(m[3])})`;\n    }\n    if (m[0] === m[3] && m[1] === -m[2]) {\n      const a = (Math.acos(m[0]) * 180) / Math.PI;\n      return `rotate(${pf(a)})`;\n    }\n  } else if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n    return `translate(${pf(m[4])} ${pf(m[5])})`;\n  }\n  return (\n    `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n    `${pf(m[5])})`\n  );\n}\n\n// The counts below are relevant for all pages, so they have to be global\n// instead of being members of `SVGGraphics` (which is recreated for\n// each page).\nlet clipCount = 0;\nlet maskCount = 0;\nlet shadingCount = 0;\n\nclass SVGGraphics {\n  constructor(commonObjs, objs, forceDataSchema = false) {\n    deprecated(\n      \"The SVG back-end is no longer maintained and *may* be removed in the future.\"\n    );\n    this.svgFactory = new DOMSVGFactory();\n\n    this.current = new SVGExtraState();\n    this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n    this.transformStack = [];\n    this.extraStack = [];\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n\n    this.embedFonts = false;\n    this.embeddedFonts = Object.create(null);\n    this.cssStyle = null;\n    this.forceDataSchema = !!forceDataSchema;\n\n    // In `src/shared/util.js` the operator names are mapped to IDs.\n    // The list below represents the reverse of that, i.e., it maps IDs\n    // to operator names.\n    this._operatorIdMapping = [];\n    for (const op in OPS) {\n      this._operatorIdMapping[OPS[op]] = op;\n    }\n  }\n\n  getObject(data, fallback = null) {\n    if (typeof data === \"string\") {\n      return data.startsWith(\"g_\")\n        ? this.commonObjs.get(data)\n        : this.objs.get(data);\n    }\n    return fallback;\n  }\n\n  save() {\n    this.transformStack.push(this.transformMatrix);\n    const old = this.current;\n    this.extraStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    this.transformMatrix = this.transformStack.pop();\n    this.current = this.extraStack.pop();\n    this.pendingClip = null;\n    this.tgrp = null;\n  }\n\n  group(items) {\n    this.save();\n    this.executeOpTree(items);\n    this.restore();\n  }\n\n  loadDependencies(operatorList) {\n    const fnArray = operatorList.fnArray;\n    const argsArray = operatorList.argsArray;\n\n    for (let i = 0, ii = fnArray.length; i < ii; i++) {\n      if (fnArray[i] !== OPS.dependency) {\n        continue;\n      }\n\n      for (const obj of argsArray[i]) {\n        const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n        const promise = new Promise(resolve => {\n          objsPool.get(obj, resolve);\n        });\n        this.current.dependencies.push(promise);\n      }\n    }\n    return Promise.all(this.current.dependencies);\n  }\n\n  transform(a, b, c, d, e, f) {\n    const transformMatrix = [a, b, c, d, e, f];\n    this.transformMatrix = Util.transform(\n      this.transformMatrix,\n      transformMatrix\n    );\n    this.tgrp = null;\n  }\n\n  getSVG(operatorList, viewport) {\n    this.viewport = viewport;\n\n    const svgElement = this._initialize(viewport);\n    return this.loadDependencies(operatorList).then(() => {\n      this.transformMatrix = IDENTITY_MATRIX;\n      this.executeOpTree(this.convertOpList(operatorList));\n      return svgElement;\n    });\n  }\n\n  convertOpList(operatorList) {\n    const operatorIdMapping = this._operatorIdMapping;\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    const opList = [];\n    for (let i = 0, ii = fnArray.length; i < ii; i++) {\n      const fnId = fnArray[i];\n      opList.push({\n        fnId,\n        fn: operatorIdMapping[fnId],\n        args: argsArray[i],\n      });\n    }\n    return opListToTree(opList);\n  }\n\n  executeOpTree(opTree) {\n    for (const opTreeElement of opTree) {\n      const fn = opTreeElement.fn;\n      const fnId = opTreeElement.fnId;\n      const args = opTreeElement.args;\n\n      switch (fnId | 0) {\n        case OPS.beginText:\n          this.beginText();\n          break;\n        case OPS.dependency:\n          // Handled in `loadDependencies`, so no warning should be shown.\n          break;\n        case OPS.setLeading:\n          this.setLeading(args);\n          break;\n        case OPS.setLeadingMoveText:\n          this.setLeadingMoveText(args[0], args[1]);\n          break;\n        case OPS.setFont:\n          this.setFont(args);\n          break;\n        case OPS.showText:\n          this.showText(args[0]);\n          break;\n        case OPS.showSpacedText:\n          this.showText(args[0]);\n          break;\n        case OPS.endText:\n          this.endText();\n          break;\n        case OPS.moveText:\n          this.moveText(args[0], args[1]);\n          break;\n        case OPS.setCharSpacing:\n          this.setCharSpacing(args[0]);\n          break;\n        case OPS.setWordSpacing:\n          this.setWordSpacing(args[0]);\n          break;\n        case OPS.setHScale:\n          this.setHScale(args[0]);\n          break;\n        case OPS.setTextMatrix:\n          this.setTextMatrix(\n            args[0],\n            args[1],\n            args[2],\n            args[3],\n            args[4],\n            args[5]\n          );\n          break;\n        case OPS.setTextRise:\n          this.setTextRise(args[0]);\n          break;\n        case OPS.setTextRenderingMode:\n          this.setTextRenderingMode(args[0]);\n          break;\n        case OPS.setLineWidth:\n          this.setLineWidth(args[0]);\n          break;\n        case OPS.setLineJoin:\n          this.setLineJoin(args[0]);\n          break;\n        case OPS.setLineCap:\n          this.setLineCap(args[0]);\n          break;\n        case OPS.setMiterLimit:\n          this.setMiterLimit(args[0]);\n          break;\n        case OPS.setFillRGBColor:\n          this.setFillRGBColor(args[0], args[1], args[2]);\n          break;\n        case OPS.setStrokeRGBColor:\n          this.setStrokeRGBColor(args[0], args[1], args[2]);\n          break;\n        case OPS.setStrokeColorN:\n          this.setStrokeColorN(args);\n          break;\n        case OPS.setFillColorN:\n          this.setFillColorN(args);\n          break;\n        case OPS.shadingFill:\n          this.shadingFill(args[0]);\n          break;\n        case OPS.setDash:\n          this.setDash(args[0], args[1]);\n          break;\n        case OPS.setRenderingIntent:\n          this.setRenderingIntent(args[0]);\n          break;\n        case OPS.setFlatness:\n          this.setFlatness(args[0]);\n          break;\n        case OPS.setGState:\n          this.setGState(args[0]);\n          break;\n        case OPS.fill:\n          this.fill();\n          break;\n        case OPS.eoFill:\n          this.eoFill();\n          break;\n        case OPS.stroke:\n          this.stroke();\n          break;\n        case OPS.fillStroke:\n          this.fillStroke();\n          break;\n        case OPS.eoFillStroke:\n          this.eoFillStroke();\n          break;\n        case OPS.clip:\n          this.clip(\"nonzero\");\n          break;\n        case OPS.eoClip:\n          this.clip(\"evenodd\");\n          break;\n        case OPS.paintSolidColorImageMask:\n          this.paintSolidColorImageMask();\n          break;\n        case OPS.paintImageXObject:\n          this.paintImageXObject(args[0]);\n          break;\n        case OPS.paintInlineImageXObject:\n          this.paintInlineImageXObject(args[0]);\n          break;\n        case OPS.paintImageMaskXObject:\n          this.paintImageMaskXObject(args[0]);\n          break;\n        case OPS.paintFormXObjectBegin:\n          this.paintFormXObjectBegin(args[0], args[1]);\n          break;\n        case OPS.paintFormXObjectEnd:\n          this.paintFormXObjectEnd();\n          break;\n        case OPS.closePath:\n          this.closePath();\n          break;\n        case OPS.closeStroke:\n          this.closeStroke();\n          break;\n        case OPS.closeFillStroke:\n          this.closeFillStroke();\n          break;\n        case OPS.closeEOFillStroke:\n          this.closeEOFillStroke();\n          break;\n        case OPS.nextLine:\n          this.nextLine();\n          break;\n        case OPS.transform:\n          this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n          break;\n        case OPS.constructPath:\n          this.constructPath(args[0], args[1]);\n          break;\n        case OPS.endPath:\n          this.endPath();\n          break;\n        case 92:\n          this.group(opTreeElement.items);\n          break;\n        default:\n          warn(`Unimplemented operator ${fn}`);\n          break;\n      }\n    }\n  }\n\n  setWordSpacing(wordSpacing) {\n    this.current.wordSpacing = wordSpacing;\n  }\n\n  setCharSpacing(charSpacing) {\n    this.current.charSpacing = charSpacing;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    const current = this.current;\n    current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n    current.textMatrixScale = Math.hypot(a, b);\n\n    current.x = current.lineX = 0;\n    current.y = current.lineY = 0;\n\n    current.xcoords = [];\n    current.ycoords = [];\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n    current.tspan.setAttributeNS(\n      null,\n      \"font-size\",\n      `${pf(current.fontSize)}px`\n    );\n    current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n    current.txtElement = this.svgFactory.createElement(\"svg:text\");\n    current.txtElement.append(current.tspan);\n  }\n\n  beginText() {\n    const current = this.current;\n    current.x = current.lineX = 0;\n    current.y = current.lineY = 0;\n    current.textMatrix = IDENTITY_MATRIX;\n    current.lineMatrix = IDENTITY_MATRIX;\n    current.textMatrixScale = 1;\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.txtElement = this.svgFactory.createElement(\"svg:text\");\n    current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n    current.xcoords = [];\n    current.ycoords = [];\n  }\n\n  moveText(x, y) {\n    const current = this.current;\n    current.x = current.lineX += x;\n    current.y = current.lineY += y;\n\n    current.xcoords = [];\n    current.ycoords = [];\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n    current.tspan.setAttributeNS(\n      null,\n      \"font-size\",\n      `${pf(current.fontSize)}px`\n    );\n    current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return;\n    }\n\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    let x = 0;\n    for (const glyph of glyphs) {\n      if (glyph === null) {\n        // Word break\n        x += fontDirection * wordSpacing;\n        continue;\n      } else if (typeof glyph === \"number\") {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        let vx;\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n        vx = -vx * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (glyph.isInFont || font.missingFile) {\n        current.xcoords.push(current.x + scaledX);\n        if (vertical) {\n          current.ycoords.push(-current.y + scaledY);\n        }\n        current.tspan.textContent += character;\n      } else {\n        // TODO: To assist with text selection, we should replace the missing\n        // character with a space character if charWidth is not zero.\n        // But we cannot just do \"character = ' '\", because the ' ' character\n        // might actually map to a different glyph.\n      }\n\n      const charWidth = vertical\n        ? width * widthAdvanceScale - spacing * fontDirection\n        : width * widthAdvanceScale + spacing * fontDirection;\n\n      x += charWidth;\n    }\n    current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n    if (vertical) {\n      current.tspan.setAttributeNS(\n        null,\n        \"y\",\n        current.ycoords.map(pf).join(\" \")\n      );\n    } else {\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n\n    current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n    current.tspan.setAttributeNS(\n      null,\n      \"font-size\",\n      `${pf(current.fontSize)}px`\n    );\n    if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n      current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n    }\n    if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n      current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n    }\n\n    const fillStrokeMode =\n      current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    if (\n      fillStrokeMode === TextRenderingMode.FILL ||\n      fillStrokeMode === TextRenderingMode.FILL_STROKE\n    ) {\n      if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n        current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n      }\n      if (current.fillAlpha < 1) {\n        current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n      }\n    } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n      // Workaround for Firefox: We must set fill=\"transparent\" because\n      // fill=\"none\" would generate an empty clipping path.\n      current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n    } else {\n      current.tspan.setAttributeNS(null, \"fill\", \"none\");\n    }\n\n    if (\n      fillStrokeMode === TextRenderingMode.STROKE ||\n      fillStrokeMode === TextRenderingMode.FILL_STROKE\n    ) {\n      const lineWidthScale = 1 / (current.textMatrixScale || 1);\n      this._setStrokeAttributes(current.tspan, lineWidthScale);\n    }\n\n    // Include the text rise in the text matrix since the `pm` function\n    // creates the SVG element's `translate` entry (work on a copy to avoid\n    // altering the original text matrix).\n    let textMatrix = current.textMatrix;\n    if (current.textRise !== 0) {\n      textMatrix = textMatrix.slice();\n      textMatrix[5] += current.textRise;\n    }\n\n    current.txtElement.setAttributeNS(\n      null,\n      \"transform\",\n      `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n    );\n    current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n    current.txtElement.append(current.tspan);\n    current.txtgrp.append(current.txtElement);\n\n    this._ensureTransformGroup().append(current.txtElement);\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  addFontStyle(fontObj) {\n    if (!fontObj.data) {\n      throw new Error(\n        \"addFontStyle: No font data available, \" +\n          'ensure that the \"fontExtraProperties\" API parameter is set.'\n      );\n    }\n    if (!this.cssStyle) {\n      this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n      this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n      this.defs.append(this.cssStyle);\n    }\n\n    const url = createObjectURL(\n      fontObj.data,\n      fontObj.mimetype,\n      this.forceDataSchema\n    );\n    this.cssStyle.textContent +=\n      `@font-face { font-family: \"${fontObj.loadedName}\";` +\n      ` src: url(${url}); }\\n`;\n  }\n\n  setFont(details) {\n    const current = this.current;\n    const fontObj = this.commonObjs.get(details[0]);\n    let size = details[1];\n    current.font = fontObj;\n\n    if (\n      this.embedFonts &&\n      !fontObj.missingFile &&\n      !this.embeddedFonts[fontObj.loadedName]\n    ) {\n      this.addFontStyle(fontObj);\n      this.embeddedFonts[fontObj.loadedName] = fontObj;\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n    current.fontSize = size;\n    current.fontFamily = fontObj.loadedName;\n    current.fontWeight = bold;\n    current.fontStyle = italic;\n\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    current.xcoords = [];\n    current.ycoords = [];\n  }\n\n  endText() {\n    const current = this.current;\n    if (\n      current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n      current.txtElement?.hasChildNodes()\n    ) {\n      // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n      current.element = current.txtElement;\n      this.clip(\"nonzero\");\n      this.endPath();\n    }\n  }\n\n  // Path properties\n  setLineWidth(width) {\n    if (width > 0) {\n      this.current.lineWidth = width;\n    }\n  }\n\n  setLineCap(style) {\n    this.current.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.current.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.current.miterLimit = limit;\n  }\n\n  setStrokeAlpha(strokeAlpha) {\n    this.current.strokeAlpha = strokeAlpha;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    this.current.strokeColor = Util.makeHexColor(r, g, b);\n  }\n\n  setFillAlpha(fillAlpha) {\n    this.current.fillAlpha = fillAlpha;\n  }\n\n  setFillRGBColor(r, g, b) {\n    this.current.fillColor = Util.makeHexColor(r, g, b);\n    this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    this.current.xcoords = [];\n    this.current.ycoords = [];\n  }\n\n  setStrokeColorN(args) {\n    this.current.strokeColor = this._makeColorN_Pattern(args);\n  }\n\n  setFillColorN(args) {\n    this.current.fillColor = this._makeColorN_Pattern(args);\n  }\n\n  shadingFill(args) {\n    const { width, height } = this.viewport;\n    const inv = Util.inverseTransform(this.transformMatrix);\n    const [x0, y0, x1, y1] = Util.getAxialAlignedBoundingBox(\n      [0, 0, width, height],\n      inv\n    );\n\n    const rect = this.svgFactory.createElement(\"svg:rect\");\n    rect.setAttributeNS(null, \"x\", x0);\n    rect.setAttributeNS(null, \"y\", y0);\n    rect.setAttributeNS(null, \"width\", x1 - x0);\n    rect.setAttributeNS(null, \"height\", y1 - y0);\n    rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n    if (this.current.fillAlpha < 1) {\n      rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n    }\n    this._ensureTransformGroup().append(rect);\n  }\n\n  /**\n   * @private\n   */\n  _makeColorN_Pattern(args) {\n    if (args[0] === \"TilingPattern\") {\n      return this._makeTilingPattern(args);\n    }\n    return this._makeShadingPattern(args);\n  }\n\n  /**\n   * @private\n   */\n  _makeTilingPattern(args) {\n    const color = args[1];\n    const operatorList = args[2];\n    const matrix = args[3] || IDENTITY_MATRIX;\n    const [x0, y0, x1, y1] = args[4];\n    const xstep = args[5];\n    const ystep = args[6];\n    const paintType = args[7];\n\n    const tilingId = `shading${shadingCount++}`;\n    const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n      ...Util.applyTransform([x0, y0], matrix),\n      ...Util.applyTransform([x1, y1], matrix),\n    ]);\n    const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n    const txstep = xstep * xscale;\n    const tystep = ystep * yscale;\n\n    const tiling = this.svgFactory.createElement(\"svg:pattern\");\n    tiling.setAttributeNS(null, \"id\", tilingId);\n    tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n    tiling.setAttributeNS(null, \"width\", txstep);\n    tiling.setAttributeNS(null, \"height\", tystep);\n    tiling.setAttributeNS(null, \"x\", `${tx0}`);\n    tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n    // Save current state.\n    const svg = this.svg;\n    const transformMatrix = this.transformMatrix;\n    const fillColor = this.current.fillColor;\n    const strokeColor = this.current.strokeColor;\n\n    const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n    this.svg = bbox;\n    this.transformMatrix = matrix;\n    if (paintType === 2) {\n      const cssColor = Util.makeHexColor(...color);\n      this.current.fillColor = cssColor;\n      this.current.strokeColor = cssColor;\n    }\n    this.executeOpTree(this.convertOpList(operatorList));\n\n    // Restore saved state.\n    this.svg = svg;\n    this.transformMatrix = transformMatrix;\n    this.current.fillColor = fillColor;\n    this.current.strokeColor = strokeColor;\n\n    tiling.append(bbox.childNodes[0]);\n    this.defs.append(tiling);\n    return `url(#${tilingId})`;\n  }\n\n  /**\n   * @private\n   */\n  _makeShadingPattern(args) {\n    if (typeof args === \"string\") {\n      args = this.objs.get(args);\n    }\n    switch (args[0]) {\n      case \"RadialAxial\":\n        const shadingId = `shading${shadingCount++}`;\n        const colorStops = args[3];\n        let gradient;\n\n        switch (args[1]) {\n          case \"axial\":\n            const point0 = args[4];\n            const point1 = args[5];\n            gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n            gradient.setAttributeNS(null, \"id\", shadingId);\n            gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n            gradient.setAttributeNS(null, \"x1\", point0[0]);\n            gradient.setAttributeNS(null, \"y1\", point0[1]);\n            gradient.setAttributeNS(null, \"x2\", point1[0]);\n            gradient.setAttributeNS(null, \"y2\", point1[1]);\n            break;\n          case \"radial\":\n            const focalPoint = args[4];\n            const circlePoint = args[5];\n            const focalRadius = args[6];\n            const circleRadius = args[7];\n            gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n            gradient.setAttributeNS(null, \"id\", shadingId);\n            gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n            gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n            gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n            gradient.setAttributeNS(null, \"r\", circleRadius);\n            gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n            gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n            gradient.setAttributeNS(null, \"fr\", focalRadius);\n            break;\n          default:\n            throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n        }\n        for (const colorStop of colorStops) {\n          const stop = this.svgFactory.createElement(\"svg:stop\");\n          stop.setAttributeNS(null, \"offset\", colorStop[0]);\n          stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n          gradient.append(stop);\n        }\n        this.defs.append(gradient);\n        return `url(#${shadingId})`;\n      case \"Mesh\":\n        warn(\"Unimplemented pattern Mesh\");\n        return null;\n      case \"Dummy\":\n        return \"hotpink\";\n      default:\n        throw new Error(`Unknown IR type: ${args[0]}`);\n    }\n  }\n\n  setDash(dashArray, dashPhase) {\n    this.current.dashArray = dashArray;\n    this.current.dashPhase = dashPhase;\n  }\n\n  constructPath(ops, args) {\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let d = [];\n    let j = 0;\n\n    for (const op of ops) {\n      switch (op | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n          const xw = x + width;\n          const yh = y + height;\n          d.push(\n            \"M\",\n            pf(x),\n            pf(y),\n            \"L\",\n            pf(xw),\n            pf(y),\n            \"L\",\n            pf(xw),\n            pf(yh),\n            \"L\",\n            pf(x),\n            pf(yh),\n            \"Z\"\n          );\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          d.push(\"M\", pf(x), pf(y));\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          d.push(\"L\", pf(x), pf(y));\n          break;\n        case OPS.curveTo:\n          x = args[j + 4];\n          y = args[j + 5];\n          d.push(\n            \"C\",\n            pf(args[j]),\n            pf(args[j + 1]),\n            pf(args[j + 2]),\n            pf(args[j + 3]),\n            pf(x),\n            pf(y)\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          d.push(\n            \"C\",\n            pf(x),\n            pf(y),\n            pf(args[j]),\n            pf(args[j + 1]),\n            pf(args[j + 2]),\n            pf(args[j + 3])\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          x = args[j + 2];\n          y = args[j + 3];\n          d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n          j += 4;\n          break;\n        case OPS.closePath:\n          d.push(\"Z\");\n          break;\n      }\n    }\n\n    d = d.join(\" \");\n\n    if (\n      current.path &&\n      ops.length > 0 &&\n      ops[0] !== OPS.rectangle &&\n      ops[0] !== OPS.moveTo\n    ) {\n      // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n      // probably been divided into two OPS.constructPath operators by\n      // OperatorList. Append the commands to the previous path element.\n      d = current.path.getAttributeNS(null, \"d\") + d;\n    } else {\n      current.path = this.svgFactory.createElement(\"svg:path\");\n      this._ensureTransformGroup().append(current.path);\n    }\n\n    current.path.setAttributeNS(null, \"d\", d);\n    current.path.setAttributeNS(null, \"fill\", \"none\");\n\n    // Saving a reference in current.element so that it can be addressed\n    // in 'fill' and 'stroke'\n    current.element = current.path;\n    current.setCurrentPoint(x, y);\n  }\n\n  endPath() {\n    const current = this.current;\n\n    // Painting operators end a path.\n    current.path = null;\n\n    if (!this.pendingClip) {\n      return;\n    }\n    if (!current.element) {\n      this.pendingClip = null;\n      return;\n    }\n\n    // Add the current path to a clipping path.\n    const clipId = `clippath${clipCount++}`;\n    const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n    clipPath.setAttributeNS(null, \"id\", clipId);\n    clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n    // A deep clone is needed when text is used as a clipping path.\n    const clipElement = current.element.cloneNode(true);\n    if (this.pendingClip === \"evenodd\") {\n      clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n    } else {\n      clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n    }\n    this.pendingClip = null;\n    clipPath.append(clipElement);\n    this.defs.append(clipPath);\n\n    if (current.activeClipUrl) {\n      // The previous clipping group content can go out of order -- resetting\n      // cached clipGroups.\n      current.clipGroup = null;\n      for (const prev of this.extraStack) {\n        prev.clipGroup = null;\n      }\n      // Intersect with the previous clipping path.\n      clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n    }\n    current.activeClipUrl = `url(#${clipId})`;\n\n    this.tgrp = null;\n  }\n\n  clip(type) {\n    this.pendingClip = type;\n  }\n\n  closePath() {\n    const current = this.current;\n    if (current.path) {\n      const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n      current.path.setAttributeNS(null, \"d\", d);\n    }\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setTextRise(textRise) {\n    this.current.textRise = textRise;\n  }\n\n  setTextRenderingMode(textRenderingMode) {\n    this.current.textRenderingMode = textRenderingMode;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (const [key, value] of states) {\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value);\n          break;\n        case \"CA\":\n          this.setStrokeAlpha(value);\n          break;\n        case \"ca\":\n          this.setFillAlpha(value);\n          break;\n        default:\n          warn(`Unimplemented graphic state operator ${key}`);\n          break;\n      }\n    }\n  }\n\n  fill() {\n    const current = this.current;\n    if (current.element) {\n      current.element.setAttributeNS(null, \"fill\", current.fillColor);\n      current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n      this.endPath();\n    }\n  }\n\n  stroke() {\n    const current = this.current;\n    if (current.element) {\n      this._setStrokeAttributes(current.element);\n      current.element.setAttributeNS(null, \"fill\", \"none\");\n      this.endPath();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setStrokeAttributes(element, lineWidthScale = 1) {\n    const current = this.current;\n    let dashArray = current.dashArray;\n    if (lineWidthScale !== 1 && dashArray.length > 0) {\n      dashArray = dashArray.map(function (value) {\n        return lineWidthScale * value;\n      });\n    }\n    element.setAttributeNS(null, \"stroke\", current.strokeColor);\n    element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n    element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n    element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n    element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n    element.setAttributeNS(\n      null,\n      \"stroke-width\",\n      pf(lineWidthScale * current.lineWidth) + \"px\"\n    );\n    element.setAttributeNS(\n      null,\n      \"stroke-dasharray\",\n      dashArray.map(pf).join(\" \")\n    );\n    element.setAttributeNS(\n      null,\n      \"stroke-dashoffset\",\n      pf(lineWidthScale * current.dashPhase) + \"px\"\n    );\n  }\n\n  eoFill() {\n    this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n    this.fill();\n  }\n\n  fillStroke() {\n    // Order is important since stroke wants fill to be none.\n    // First stroke, then if fill needed, it will be overwritten.\n    this.stroke();\n    this.fill();\n  }\n\n  eoFillStroke() {\n    this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n    this.fillStroke();\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.closePath();\n    this.eoFillStroke();\n  }\n\n  paintSolidColorImageMask() {\n    const rect = this.svgFactory.createElement(\"svg:rect\");\n    rect.setAttributeNS(null, \"x\", \"0\");\n    rect.setAttributeNS(null, \"y\", \"0\");\n    rect.setAttributeNS(null, \"width\", \"1px\");\n    rect.setAttributeNS(null, \"height\", \"1px\");\n    rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n    this._ensureTransformGroup().append(rect);\n  }\n\n  paintImageXObject(objId) {\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(`Dependent image with object ID ${objId} is not ready yet`);\n      return;\n    }\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintInlineImageXObject(imgData, mask) {\n    const width = imgData.width;\n    const height = imgData.height;\n\n    const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n    const cliprect = this.svgFactory.createElement(\"svg:rect\");\n    cliprect.setAttributeNS(null, \"x\", \"0\");\n    cliprect.setAttributeNS(null, \"y\", \"0\");\n    cliprect.setAttributeNS(null, \"width\", pf(width));\n    cliprect.setAttributeNS(null, \"height\", pf(height));\n    this.current.element = cliprect;\n    this.clip(\"nonzero\");\n\n    const imgEl = this.svgFactory.createElement(\"svg:image\");\n    imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n    imgEl.setAttributeNS(null, \"x\", \"0\");\n    imgEl.setAttributeNS(null, \"y\", pf(-height));\n    imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n    imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n    imgEl.setAttributeNS(\n      null,\n      \"transform\",\n      `scale(${pf(1 / width)} ${pf(-1 / height)})`\n    );\n    if (mask) {\n      mask.append(imgEl);\n    } else {\n      this._ensureTransformGroup().append(imgEl);\n    }\n  }\n\n  paintImageMaskXObject(img) {\n    const imgData = this.getObject(img.data, img);\n    if (imgData.bitmap) {\n      warn(\n        \"paintImageMaskXObject: ImageBitmap support is not implemented, \" +\n          \"ensure that the `isOffscreenCanvasSupported` API parameter is disabled.\"\n      );\n      return;\n    }\n    const current = this.current;\n    const width = imgData.width;\n    const height = imgData.height;\n    const fillColor = current.fillColor;\n\n    current.maskId = `mask${maskCount++}`;\n    const mask = this.svgFactory.createElement(\"svg:mask\");\n    mask.setAttributeNS(null, \"id\", current.maskId);\n\n    const rect = this.svgFactory.createElement(\"svg:rect\");\n    rect.setAttributeNS(null, \"x\", \"0\");\n    rect.setAttributeNS(null, \"y\", \"0\");\n    rect.setAttributeNS(null, \"width\", pf(width));\n    rect.setAttributeNS(null, \"height\", pf(height));\n    rect.setAttributeNS(null, \"fill\", fillColor);\n    rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n    this.defs.append(mask);\n    this._ensureTransformGroup().append(rect);\n\n    this.paintInlineImageXObject(imgData, mask);\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform(\n        matrix[0],\n        matrix[1],\n        matrix[2],\n        matrix[3],\n        matrix[4],\n        matrix[5]\n      );\n    }\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", bbox[0]);\n      cliprect.setAttributeNS(null, \"y\", bbox[1]);\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {}\n\n  /**\n   * @private\n   */\n  _initialize(viewport) {\n    const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n    // Create the definitions element.\n    const definitions = this.svgFactory.createElement(\"svg:defs\");\n    svg.append(definitions);\n    this.defs = definitions;\n\n    // Create the root group element, which acts a container for all other\n    // groups and applies the viewport transform.\n    const rootGroup = this.svgFactory.createElement(\"svg:g\");\n    rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n    svg.append(rootGroup);\n\n    // For the construction of the SVG image we are only interested in the\n    // root group, so we expose it as the entry point of the SVG image for\n    // the other code in this class.\n    this.svg = rootGroup;\n\n    return svg;\n  }\n\n  /**\n   * @private\n   */\n  _ensureClipGroup() {\n    if (!this.current.clipGroup) {\n      const clipGroup = this.svgFactory.createElement(\"svg:g\");\n      clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n      this.svg.append(clipGroup);\n      this.current.clipGroup = clipGroup;\n    }\n    return this.current.clipGroup;\n  }\n\n  /**\n   * @private\n   */\n  _ensureTransformGroup() {\n    if (!this.tgrp) {\n      this.tgrp = this.svgFactory.createElement(\"svg:g\");\n      this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n      if (this.current.activeClipUrl) {\n        this._ensureClipGroup().append(this.tgrp);\n      } else {\n        this.svg.append(this.tgrp);\n      }\n    }\n    return this.tgrp;\n  }\n}\n\nexport { SVGGraphics };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").TextContent} TextContent */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"./api\").TextContent} TextContent */\n\nimport {\n  AbortException,\n  FeatureTest,\n  PromiseCapability,\n  Util,\n} from \"../shared/util.js\";\nimport { deprecated, setLayerDimensions } from \"./display_utils.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {ReadableStream | TextContent} textContentSource - Text content to\n *   render, i.e. the value returned by the page's `streamTextContent` or\n *   `getTextContent` method.\n * @property {HTMLElement} container - The DOM node that will contain the text\n *   runs.\n * @property {PageViewport} viewport - The target viewport to properly layout\n *   the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that correspond to\n *   the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {WeakMap<HTMLElement,Object>} [textDivProperties] - Some properties\n *   weakly mapped to the HTML elements used to render the text.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *   the `str` property of the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {boolean} [isOffscreenCanvasSupported] true if we can use\n *   OffscreenCanvas to measure string widths.\n */\n\n/**\n * Text layer update parameters.\n *\n * @typedef {Object} TextLayerUpdateParameters\n * @property {HTMLElement} container - The DOM node that will contain the text\n *   runs.\n * @property {PageViewport} viewport - The target viewport to properly layout\n *   the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that correspond to\n *   the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {WeakMap<HTMLElement,Object>} [textDivProperties] - Some properties\n *   weakly mapped to the HTML elements used to render the text.\n * @property {boolean} [isOffscreenCanvasSupported] true if we can use\n *   OffscreenCanvas to measure string widths.\n * @property {boolean} [mustRotate] true if the text layer must be rotated.\n * @property {boolean} [mustRescale] true if the text layer contents must be\n *   rescaled.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\n\nfunction getCtx(size, isOffscreenCanvasSupported) {\n  let ctx;\n  if (isOffscreenCanvasSupported && FeatureTest.isOffscreenCanvasSupported) {\n    ctx = new OffscreenCanvas(size, size).getContext(\"2d\", { alpha: false });\n  } else {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = canvas.height = size;\n    ctx = canvas.getContext(\"2d\", { alpha: false });\n  }\n\n  return ctx;\n}\n\nfunction getAscent(fontFamily, isOffscreenCanvasSupported) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);\n\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n\n    ctx.canvas.width = ctx.canvas.height = 0;\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.canvas.width = ctx.canvas.height = 0;\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = {\n    angle: 0,\n    canvasWidth: 0,\n    hasText: geom.str !== \"\",\n    hasEOL: geom.hasEOL,\n    fontSize: 0,\n  };\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent =\n    fontHeight * getAscent(style.fontFamily, task._isOffscreenCanvasSupported);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n\n  const scaleFactorStr = \"calc(var(--scale-factor)*\";\n  const divStyle = textDiv.style;\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  if (task._container === task._rootContainer) {\n    divStyle.left = `${((100 * left) / task._pageWidth).toFixed(2)}%`;\n    divStyle.top = `${((100 * top) / task._pageHeight).toFixed(2)}%`;\n  } else {\n    // We're in a marked content span, hence we can't use percents.\n    divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n    divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n  }\n  divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;\n  divStyle.fontFamily = style.fontFamily;\n\n  textDivProperties.fontSize = fontHeight;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (geom.str.length > 1) {\n    shouldScaleText = true;\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._isReadableStream) {\n    task._layoutText(textDiv);\n  }\n}\n\nfunction layout(params) {\n  const { div, scale, properties, ctx, prevFontSize, prevFontFamily } = params;\n  const { style } = div;\n  let transform = \"\";\n  if (properties.canvasWidth !== 0 && properties.hasText) {\n    const { fontFamily } = style;\n    const { canvasWidth, fontSize } = properties;\n\n    if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {\n      ctx.font = `${fontSize * scale}px ${fontFamily}`;\n      params.prevFontSize = fontSize;\n      params.prevFontFamily = fontFamily;\n    }\n\n    // Only measure the width for multi-char text divs, see `appendText`.\n    const { width } = ctx.measureText(div.textContent);\n\n    if (width > 0) {\n      transform = `scaleX(${(canvasWidth * scale) / width})`;\n    }\n  }\n  if (properties.angle !== 0) {\n    transform = `rotate(${properties.angle}deg) ${transform}`;\n  }\n  if (transform.length > 0) {\n    style.transform = transform;\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    capability.resolve();\n    return;\n  }\n\n  if (!task._isReadableStream) {\n    for (const textDiv of textDivs) {\n      task._layoutText(textDiv);\n    }\n  }\n  capability.resolve();\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContentSource,\n    container,\n    viewport,\n    textDivs,\n    textDivProperties,\n    textContentItemsStr,\n    isOffscreenCanvasSupported,\n  }) {\n    this._textContentSource = textContentSource;\n    this._isReadableStream = textContentSource instanceof ReadableStream;\n    this._container = this._rootContainer = container;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._textDivProperties = textDivProperties || new WeakMap();\n    this._canceled = false;\n    this._capability = new PromiseCapability();\n    this._layoutTextParams = {\n      prevFontSize: null,\n      prevFontFamily: null,\n      div: null,\n      scale: viewport.scale * (globalThis.devicePixelRatio || 1),\n      properties: null,\n      ctx: getCtx(0, isOffscreenCanvasSupported),\n    };\n    const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n    this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];\n    this._pageWidth = pageWidth;\n    this._pageHeight = pageHeight;\n\n    setLayerDimensions(container, viewport);\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        this._layoutTextParams = null;\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    this._capability.reject(new AbortException(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (const item of items) {\n      if (item.str === undefined) {\n        if (\n          item.type === \"beginMarkedContentProps\" ||\n          item.type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (item.id !== null) {\n            this._container.setAttribute(\"id\", `${item.id}`);\n          }\n          parent.append(this._container);\n        } else if (item.type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(item.str);\n      appendText(this, item, styleCache);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = (this._layoutTextParams.properties =\n      this._textDivProperties.get(textDiv));\n    this._layoutTextParams.div = textDiv;\n    layout(this._layoutTextParams);\n\n    if (textDivProperties.hasText) {\n      this._container.append(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.append(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render() {\n    const capability = new PromiseCapability();\n    let styleCache = Object.create(null);\n\n    if (this._isReadableStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentSource.getReader();\n      pump();\n    } else if (this._textContentSource) {\n      const { items, styles } = this._textContentSource;\n      this._processItems(items, styles);\n      capability.resolve();\n    } else {\n      throw new Error('No \"textContentSource\" parameter specified.');\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      render(this);\n    }, this._capability.reject);\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} params\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(params) {\n  if (\n    (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n    !params.textContentSource &&\n    (params.textContent || params.textContentStream)\n  ) {\n    deprecated(\n      \"The TextLayerRender `textContent`/`textContentStream` parameters \" +\n        \"will be removed in the future, please use `textContentSource` instead.\"\n    );\n    params.textContentSource = params.textContent || params.textContentStream;\n  }\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC && !TESTING\")) {\n    const { container, viewport } = params;\n    const style = getComputedStyle(container);\n    const visibility = style.getPropertyValue(\"visibility\");\n    const scaleFactor = parseFloat(style.getPropertyValue(\"--scale-factor\"));\n\n    if (\n      visibility === \"visible\" &&\n      (!scaleFactor || Math.abs(scaleFactor - viewport.scale) > 1e-5)\n    ) {\n      console.error(\n        \"The `--scale-factor` CSS-variable must be set, \" +\n          \"to the same value as `viewport.scale`, \" +\n          \"either on the `container`-element itself or higher up in the DOM.\"\n      );\n    }\n  }\n  const task = new TextLayerRenderTask(params);\n  task._render();\n  return task;\n}\n\n/**\n * @param {TextLayerUpdateParameters} params\n * @returns {undefined}\n */\nfunction updateTextLayer({\n  container,\n  viewport,\n  textDivs,\n  textDivProperties,\n  isOffscreenCanvasSupported,\n  mustRotate = true,\n  mustRescale = true,\n}) {\n  if (mustRotate) {\n    setLayerDimensions(container, { rotation: viewport.rotation });\n  }\n\n  if (mustRescale) {\n    const ctx = getCtx(0, isOffscreenCanvasSupported);\n    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n    const params = {\n      prevFontSize: null,\n      prevFontFamily: null,\n      div: null,\n      scale,\n      properties: null,\n      ctx,\n    };\n    for (const div of textDivs) {\n      params.properties = textDivProperties.get(div);\n      params.div = div;\n      layout(params);\n    }\n  }\n}\n\nexport { renderTextLayer, TextLayerRenderTask, updateTextLayer };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./tools.js\").AnnotationEditorUIManager} AnnotationEditorUIManager */\n/** @typedef {import(\"../display_utils.js\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../../web/text_accessibility.js\").TextAccessibilityManager} TextAccessibilityManager */\n/** @typedef {import(\"../../../web/interfaces\").IL10n} IL10n */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../annotation_layer.js\").AnnotationLayer} AnnotationLayer */\n\nimport { AnnotationEditorType, FeatureTest } from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { FreeTextEditor } from \"./freetext.js\";\nimport { InkEditor } from \"./ink.js\";\nimport { setLayerDimensions } from \"../display_utils.js\";\nimport { StampEditor } from \"./stamp.js\";\n\n/**\n * @typedef {Object} AnnotationEditorLayerOptions\n * @property {Object} mode\n * @property {HTMLDivElement} div\n * @property {AnnotationEditorUIManager} uiManager\n * @property {boolean} enabled\n * @property {TextAccessibilityManager} [accessibilityManager]\n * @property {number} pageIndex\n * @property {IL10n} l10n\n * @property {AnnotationLayer} [annotationLayer]\n * @property {PageViewport} viewport\n */\n\n/**\n * @typedef {Object} RenderEditorLayerOptions\n * @property {PageViewport} viewport\n */\n\n/**\n * Manage all the different editors on a page.\n */\nclass AnnotationEditorLayer {\n  #accessibilityManager;\n\n  #allowClick = false;\n\n  #annotationLayer = null;\n\n  #boundPointerup = this.pointerup.bind(this);\n\n  #boundPointerdown = this.pointerdown.bind(this);\n\n  #editors = new Map();\n\n  #hadPointerDown = false;\n\n  #isCleaningUp = false;\n\n  #isDisabling = false;\n\n  #uiManager;\n\n  static _initialized = false;\n\n  /**\n   * @param {AnnotationEditorLayerOptions} options\n   */\n  constructor({\n    uiManager,\n    pageIndex,\n    div,\n    accessibilityManager,\n    annotationLayer,\n    viewport,\n    l10n,\n  }) {\n    const editorTypes = [FreeTextEditor, InkEditor, StampEditor];\n    if (!AnnotationEditorLayer._initialized) {\n      AnnotationEditorLayer._initialized = true;\n      for (const editorType of editorTypes) {\n        editorType.initialize(l10n);\n      }\n    }\n    uiManager.registerEditorTypes(editorTypes);\n\n    this.#uiManager = uiManager;\n    this.pageIndex = pageIndex;\n    this.div = div;\n    this.#accessibilityManager = accessibilityManager;\n    this.#annotationLayer = annotationLayer;\n    this.viewport = viewport;\n\n    this.#uiManager.addLayer(this);\n  }\n\n  get isEmpty() {\n    return this.#editors.size === 0;\n  }\n\n  /**\n   * Update the toolbar if it's required to reflect the tool currently used.\n   * @param {number} mode\n   */\n  updateToolbar(mode) {\n    this.#uiManager.updateToolbar(mode);\n  }\n\n  /**\n   * The mode has changed: it must be updated.\n   * @param {number} mode\n   */\n  updateMode(mode = this.#uiManager.getMode()) {\n    this.#cleanup();\n    if (mode === AnnotationEditorType.INK) {\n      // We always want to an ink editor ready to draw in.\n      this.addInkEditorIfNeeded(false);\n      this.disableClick();\n    } else {\n      this.enableClick();\n    }\n\n    if (mode !== AnnotationEditorType.NONE) {\n      this.div.classList.toggle(\n        \"freeTextEditing\",\n        mode === AnnotationEditorType.FREETEXT\n      );\n      this.div.classList.toggle(\n        \"inkEditing\",\n        mode === AnnotationEditorType.INK\n      );\n      this.div.classList.toggle(\n        \"stampEditing\",\n        mode === AnnotationEditorType.STAMP\n      );\n      this.div.hidden = false;\n    }\n  }\n\n  addInkEditorIfNeeded(isCommitting) {\n    if (\n      !isCommitting &&\n      this.#uiManager.getMode() !== AnnotationEditorType.INK\n    ) {\n      return;\n    }\n\n    if (!isCommitting) {\n      // We're removing an editor but an empty one can already exist so in this\n      // case we don't need to create a new one.\n      for (const editor of this.#editors.values()) {\n        if (editor.isEmpty()) {\n          editor.setInBackground();\n          return;\n        }\n      }\n    }\n\n    const editor = this.#createAndAddNewEditor(\n      { offsetX: 0, offsetY: 0 },\n      /* isCentered = */ false\n    );\n    editor.setInBackground();\n  }\n\n  /**\n   * Set the editing state.\n   * @param {boolean} isEditing\n   */\n  setEditingState(isEditing) {\n    this.#uiManager.setEditingState(isEditing);\n  }\n\n  /**\n   * Add some commands into the CommandManager (undo/redo stuff).\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this.#uiManager.addCommands(params);\n  }\n\n  /**\n   * Enable pointer events on the main div in order to enable\n   * editor creation.\n   */\n  enable() {\n    this.div.style.pointerEvents = \"auto\";\n    const annotationElementIds = new Set();\n    for (const editor of this.#editors.values()) {\n      editor.enableEditing();\n      if (editor.annotationElementId) {\n        annotationElementIds.add(editor.annotationElementId);\n      }\n    }\n\n    if (!this.#annotationLayer) {\n      return;\n    }\n\n    const editables = this.#annotationLayer.getEditableAnnotations();\n    for (const editable of editables) {\n      // The element must be hidden whatever its state is.\n      editable.hide();\n      if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {\n        continue;\n      }\n      if (annotationElementIds.has(editable.data.id)) {\n        continue;\n      }\n      const editor = this.deserialize(editable);\n      if (!editor) {\n        continue;\n      }\n      this.addOrRebuild(editor);\n      editor.enableEditing();\n    }\n  }\n\n  /**\n   * Disable editor creation.\n   */\n  disable() {\n    this.#isDisabling = true;\n    this.div.style.pointerEvents = \"none\";\n    const hiddenAnnotationIds = new Set();\n    for (const editor of this.#editors.values()) {\n      editor.disableEditing();\n      if (!editor.annotationElementId || editor.serialize() !== null) {\n        hiddenAnnotationIds.add(editor.annotationElementId);\n        continue;\n      }\n      this.getEditableAnnotation(editor.annotationElementId)?.show();\n      editor.remove();\n    }\n\n    if (this.#annotationLayer) {\n      // Show the annotations that were hidden in enable().\n      const editables = this.#annotationLayer.getEditableAnnotations();\n      for (const editable of editables) {\n        const { id } = editable.data;\n        if (\n          hiddenAnnotationIds.has(id) ||\n          this.#uiManager.isDeletedAnnotationElement(id)\n        ) {\n          continue;\n        }\n        editable.show();\n      }\n    }\n\n    this.#cleanup();\n    if (this.isEmpty) {\n      this.div.hidden = true;\n    }\n    this.#isDisabling = false;\n  }\n\n  getEditableAnnotation(id) {\n    return this.#annotationLayer?.getEditableAnnotation(id) || null;\n  }\n\n  /**\n   * Set the current editor.\n   * @param {AnnotationEditor} editor\n   */\n  setActiveEditor(editor) {\n    const currentActive = this.#uiManager.getActive();\n    if (currentActive === editor) {\n      return;\n    }\n\n    this.#uiManager.setActiveEditor(editor);\n  }\n\n  enableClick() {\n    this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\n    this.div.addEventListener(\"pointerup\", this.#boundPointerup);\n  }\n\n  disableClick() {\n    this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\n    this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\n  }\n\n  attach(editor) {\n    this.#editors.set(editor.id, editor);\n    const { annotationElementId } = editor;\n    if (\n      annotationElementId &&\n      this.#uiManager.isDeletedAnnotationElement(annotationElementId)\n    ) {\n      this.#uiManager.removeDeletedAnnotationElement(editor);\n    }\n  }\n\n  detach(editor) {\n    this.#editors.delete(editor.id);\n    this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n\n    if (!this.#isDisabling && editor.annotationElementId) {\n      this.#uiManager.addDeletedAnnotationElement(editor);\n    }\n  }\n\n  /**\n   * Remove an editor.\n   * @param {AnnotationEditor} editor\n   */\n  remove(editor) {\n    // Since we can undo a removal we need to keep the\n    // parent property as it is, so don't null it!\n\n    this.detach(editor);\n    this.#uiManager.removeEditor(editor);\n    if (editor.div.contains(document.activeElement)) {\n      setTimeout(() => {\n        // When the div is removed from DOM the focus can move on the\n        // document.body, so we need to move it back to the main container.\n        this.#uiManager.focusMainContainer();\n      }, 0);\n    }\n    editor.div.remove();\n    editor.isAttachedToDOM = false;\n\n    if (!this.#isCleaningUp) {\n      this.addInkEditorIfNeeded(/* isCommitting = */ false);\n    }\n  }\n\n  /**\n   * An editor can have a different parent, for example after having\n   * being dragged and droped from a page to another.\n   * @param {AnnotationEditor} editor\n   */\n  changeParent(editor) {\n    if (editor.parent === this) {\n      return;\n    }\n\n    if (editor.annotationElementId) {\n      this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);\n      AnnotationEditor.deleteAnnotationElement(editor);\n      editor.annotationElementId = null;\n    }\n\n    this.attach(editor);\n    editor.parent?.detach(editor);\n    editor.setParent(this);\n    if (editor.div && editor.isAttachedToDOM) {\n      editor.div.remove();\n      this.div.append(editor.div);\n    }\n  }\n\n  /**\n   * Add a new editor in the current view.\n   * @param {AnnotationEditor} editor\n   */\n  add(editor) {\n    this.changeParent(editor);\n    this.#uiManager.addEditor(editor);\n    this.attach(editor);\n\n    if (!editor.isAttachedToDOM) {\n      const div = editor.render();\n      this.div.append(div);\n      editor.isAttachedToDOM = true;\n    }\n\n    // The editor will be correctly moved into the DOM (see fixAndSetPosition).\n    editor.fixAndSetPosition();\n    editor.onceAdded();\n    this.#uiManager.addToAnnotationStorage(editor);\n  }\n\n  moveEditorInDOM(editor) {\n    if (!editor.isAttachedToDOM) {\n      return;\n    }\n\n    const { activeElement } = document;\n    if (editor.div.contains(activeElement)) {\n      // When the div is moved in the DOM the focus can move somewhere else,\n      // so we want to be sure that the focus will stay on the editor but we\n      // don't want to call any focus callbacks, hence we disable them and only\n      // re-enable them when the editor has the focus.\n      editor._focusEventsAllowed = false;\n      setTimeout(() => {\n        if (!editor.div.contains(document.activeElement)) {\n          editor.div.addEventListener(\n            \"focusin\",\n            () => {\n              editor._focusEventsAllowed = true;\n            },\n            { once: true }\n          );\n          activeElement.focus();\n        } else {\n          editor._focusEventsAllowed = true;\n        }\n      }, 0);\n    }\n\n    editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(\n      this.div,\n      editor.div,\n      editor.contentDiv,\n      /* isRemovable = */ true\n    );\n  }\n\n  /**\n   * Add or rebuild depending if it has been removed or not.\n   * @param {AnnotationEditor} editor\n   */\n  addOrRebuild(editor) {\n    if (editor.needsToBeRebuilt()) {\n      editor.rebuild();\n    } else {\n      this.add(editor);\n    }\n  }\n\n  /**\n   * Add a new editor and make this addition undoable.\n   * @param {AnnotationEditor} editor\n   */\n  addUndoableEditor(editor) {\n    const cmd = () => editor._uiManager.rebuild(editor);\n    const undo = () => {\n      editor.remove();\n    };\n\n    this.addCommands({ cmd, undo, mustExec: false });\n  }\n\n  /**\n   * Get an id for an editor.\n   * @returns {string}\n   */\n  getNextId() {\n    return this.#uiManager.getId();\n  }\n\n  /**\n   * Create a new editor\n   * @param {Object} params\n   * @returns {AnnotationEditor}\n   */\n  #createNewEditor(params) {\n    switch (this.#uiManager.getMode()) {\n      case AnnotationEditorType.FREETEXT:\n        return new FreeTextEditor(params);\n      case AnnotationEditorType.INK:\n        return new InkEditor(params);\n      case AnnotationEditorType.STAMP:\n        return new StampEditor(params);\n    }\n    return null;\n  }\n\n  /**\n   * Paste some content into a new editor.\n   * @param {number} mode\n   * @param {Object} params\n   */\n  pasteEditor(mode, params) {\n    this.#uiManager.updateToolbar(mode);\n    this.#uiManager.updateMode(mode);\n\n    const { offsetX, offsetY } = this.#getCenterPoint();\n    const id = this.getNextId();\n    const editor = this.#createNewEditor({\n      parent: this,\n      id,\n      x: offsetX,\n      y: offsetY,\n      uiManager: this.#uiManager,\n      isCentered: true,\n      ...params,\n    });\n    if (editor) {\n      this.add(editor);\n    }\n  }\n\n  /**\n   * Create a new editor\n   * @param {Object} data\n   * @returns {AnnotationEditor}\n   */\n  deserialize(data) {\n    switch (data.annotationType ?? data.annotationEditorType) {\n      case AnnotationEditorType.FREETEXT:\n        return FreeTextEditor.deserialize(data, this, this.#uiManager);\n      case AnnotationEditorType.INK:\n        return InkEditor.deserialize(data, this, this.#uiManager);\n      case AnnotationEditorType.STAMP:\n        return StampEditor.deserialize(data, this, this.#uiManager);\n    }\n    return null;\n  }\n\n  /**\n   * Create and add a new editor.\n   * @param {PointerEvent} event\n   * @param {boolean} isCentered\n   * @returns {AnnotationEditor}\n   */\n  #createAndAddNewEditor(event, isCentered) {\n    const id = this.getNextId();\n    const editor = this.#createNewEditor({\n      parent: this,\n      id,\n      x: event.offsetX,\n      y: event.offsetY,\n      uiManager: this.#uiManager,\n      isCentered,\n    });\n    if (editor) {\n      this.add(editor);\n    }\n\n    return editor;\n  }\n\n  #getCenterPoint() {\n    const { x, y, width, height } = this.div.getBoundingClientRect();\n    const tlX = Math.max(0, x);\n    const tlY = Math.max(0, y);\n    const brX = Math.min(window.innerWidth, x + width);\n    const brY = Math.min(window.innerHeight, y + height);\n    const centerX = (tlX + brX) / 2 - x;\n    const centerY = (tlY + brY) / 2 - y;\n    const [offsetX, offsetY] =\n      this.viewport.rotation % 180 === 0\n        ? [centerX, centerY]\n        : [centerY, centerX];\n\n    return { offsetX, offsetY };\n  }\n\n  /**\n   * Create and add a new editor.\n   */\n  addNewEditor() {\n    this.#createAndAddNewEditor(\n      this.#getCenterPoint(),\n      /* isCentered = */ true\n    );\n  }\n\n  /**\n   * Set the last selected editor.\n   * @param {AnnotationEditor} editor\n   */\n  setSelected(editor) {\n    this.#uiManager.setSelected(editor);\n  }\n\n  /**\n   * Add or remove an editor the current selection.\n   * @param {AnnotationEditor} editor\n   */\n  toggleSelected(editor) {\n    this.#uiManager.toggleSelected(editor);\n  }\n\n  /**\n   * Check if the editor is selected.\n   * @param {AnnotationEditor} editor\n   */\n  isSelected(editor) {\n    return this.#uiManager.isSelected(editor);\n  }\n\n  /**\n   * Unselect an editor.\n   * @param {AnnotationEditor} editor\n   */\n  unselect(editor) {\n    this.#uiManager.unselect(editor);\n  }\n\n  /**\n   * Pointerup callback.\n   * @param {PointerEvent} event\n   */\n  pointerup(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Don't create an editor on right click.\n      return;\n    }\n\n    if (event.target !== this.div) {\n      return;\n    }\n\n    if (!this.#hadPointerDown) {\n      // It can happen when the user starts a drag inside a text editor\n      // and then releases the mouse button outside of it. In such a case\n      // we don't want to create a new editor, hence we check that a pointerdown\n      // occurred on this div previously.\n      return;\n    }\n    this.#hadPointerDown = false;\n\n    if (!this.#allowClick) {\n      this.#allowClick = true;\n      return;\n    }\n\n    if (this.#uiManager.getMode() === AnnotationEditorType.STAMP) {\n      this.#uiManager.unselectAll();\n      return;\n    }\n\n    this.#createAndAddNewEditor(event, /* isCentered = */ false);\n  }\n\n  /**\n   * Pointerdown callback.\n   * @param {PointerEvent} event\n   */\n  pointerdown(event) {\n    if (this.#hadPointerDown) {\n      // It's possible to have a second pointerdown event before a pointerup one\n      // when the user puts a finger on a touchscreen and then add a second one\n      // to start a pinch-to-zoom gesture.\n      // That said, in case it's possible to have two pointerdown events with\n      // a mouse, we don't want to create a new editor in such a case either.\n      this.#hadPointerDown = false;\n      return;\n    }\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Do nothing on right click.\n      return;\n    }\n\n    if (event.target !== this.div) {\n      return;\n    }\n\n    this.#hadPointerDown = true;\n\n    const editor = this.#uiManager.getActive();\n    this.#allowClick = !editor || editor.isEmpty();\n  }\n\n  /**\n   *\n   * @param {AnnotationEditor} editor\n   * @param {number} x\n   * @param {number} y\n   * @returns\n   */\n  findNewParent(editor, x, y) {\n    const layer = this.#uiManager.findParent(x, y);\n    if (layer === null || layer === this) {\n      return false;\n    }\n    layer.changeParent(editor);\n    return true;\n  }\n\n  /**\n   * Destroy the main editor.\n   */\n  destroy() {\n    if (this.#uiManager.getActive()?.parent === this) {\n      // We need to commit the current editor before destroying the layer.\n      this.#uiManager.commitOrRemove();\n      this.#uiManager.setActiveEditor(null);\n    }\n\n    for (const editor of this.#editors.values()) {\n      this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n      editor.setParent(null);\n      editor.isAttachedToDOM = false;\n      editor.div.remove();\n    }\n    this.div = null;\n    this.#editors.clear();\n    this.#uiManager.removeLayer(this);\n  }\n\n  #cleanup() {\n    // When we're cleaning up, some editors are removed but we don't want\n    // to add a new one which will induce an addition in this.#editors, hence\n    // an infinite loop.\n    this.#isCleaningUp = true;\n    for (const editor of this.#editors.values()) {\n      if (editor.isEmpty()) {\n        editor.remove();\n      }\n    }\n    this.#isCleaningUp = false;\n  }\n\n  /**\n   * Render the main editor.\n   * @param {RenderEditorLayerOptions} parameters\n   */\n  render({ viewport }) {\n    this.viewport = viewport;\n    setLayerDimensions(this.div, viewport);\n    for (const editor of this.#uiManager.getEditors(this.pageIndex)) {\n      this.add(editor);\n    }\n    this.updateMode();\n  }\n\n  /**\n   * Update the main editor.\n   * @param {RenderEditorLayerOptions} parameters\n   */\n  update({ viewport }) {\n    // Editors have their dimensions/positions in percent so to avoid any\n    // issues (see #15582), we must commit the current one before changing\n    // the viewport.\n    this.#uiManager.commitOrRemove();\n\n    this.viewport = viewport;\n    setLayerDimensions(this.div, { rotation: viewport.rotation });\n    this.updateMode();\n  }\n\n  /**\n   * Get page dimensions.\n   * @returns {Object} dimensions.\n   */\n  get pageDimensions() {\n    const { pageWidth, pageHeight } = this.viewport.rawDims;\n    return [pageWidth, pageHeight];\n  }\n}\n\nexport { AnnotationEditorLayer };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  assert,\n  LINE_FACTOR,\n  shadow,\n  Util,\n} from \"../../shared/util.js\";\nimport {\n  AnnotationEditorUIManager,\n  bindEvents,\n  KeyboardManager,\n} from \"./tools.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { FreeTextAnnotationElement } from \"../annotation_layer.js\";\n\n/**\n * Basic text editor in order to create a FreeTex annotation.\n */\nclass FreeTextEditor extends AnnotationEditor {\n  #boundEditorDivBlur = this.editorDivBlur.bind(this);\n\n  #boundEditorDivFocus = this.editorDivFocus.bind(this);\n\n  #boundEditorDivInput = this.editorDivInput.bind(this);\n\n  #boundEditorDivKeydown = this.editorDivKeydown.bind(this);\n\n  #color;\n\n  #content = \"\";\n\n  #editorDivId = `${this.id}-editor`;\n\n  #fontSize;\n\n  #initialData = null;\n\n  static _freeTextDefaultContent = \"\";\n\n  static _internalPadding = 0;\n\n  static _defaultColor = null;\n\n  static _defaultFontSize = 10;\n\n  static get _keyboardManager() {\n    const proto = FreeTextEditor.prototype;\n\n    const arrowChecker = self => self.isEmpty();\n\n    const small = AnnotationEditorUIManager.TRANSLATE_SMALL;\n    const big = AnnotationEditorUIManager.TRANSLATE_BIG;\n\n    return shadow(\n      this,\n      \"_keyboardManager\",\n      new KeyboardManager([\n        [\n          // Commit the text in case the user use ctrl+s to save the document.\n          // The event must bubble in order to be caught by the viewer.\n          // See bug 1831574.\n          [\"ctrl+s\", \"mac+meta+s\", \"ctrl+p\", \"mac+meta+p\"],\n          proto.commitOrRemove,\n          { bubbles: true },\n        ],\n        [\n          [\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"],\n          proto.commitOrRemove,\n        ],\n        [\n          [\"ArrowLeft\", \"mac+ArrowLeft\"],\n          proto._translateEmpty,\n          { args: [-small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"],\n          proto._translateEmpty,\n          { args: [-big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowRight\", \"mac+ArrowRight\"],\n          proto._translateEmpty,\n          { args: [small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"],\n          proto._translateEmpty,\n          { args: [big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowUp\", \"mac+ArrowUp\"],\n          proto._translateEmpty,\n          { args: [0, -small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"],\n          proto._translateEmpty,\n          { args: [0, -big], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowDown\", \"mac+ArrowDown\"],\n          proto._translateEmpty,\n          { args: [0, small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"],\n          proto._translateEmpty,\n          { args: [0, big], checker: arrowChecker },\n        ],\n      ])\n    );\n  }\n\n  static _type = \"freetext\";\n\n  constructor(params) {\n    super({ ...params, name: \"freeTextEditor\" });\n    this.#color =\n      params.color ||\n      FreeTextEditor._defaultColor ||\n      AnnotationEditor._defaultLineColor;\n    this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\n  }\n\n  /** @inheritdoc */\n  static initialize(l10n) {\n    AnnotationEditor.initialize(l10n, {\n      strings: [\"free_text2_default_content\", \"editor_free_text2_aria_label\"],\n    });\n    const style = getComputedStyle(document.documentElement);\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      const lineHeight = parseFloat(\n        style.getPropertyValue(\"--freetext-line-height\")\n      );\n      assert(\n        lineHeight === LINE_FACTOR,\n        \"Update the CSS variable to agree with the constant.\"\n      );\n    }\n\n    this._internalPadding = parseFloat(\n      style.getPropertyValue(\"--freetext-padding\")\n    );\n  }\n\n  /** @inheritdoc */\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        FreeTextEditor._defaultFontSize = value;\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        FreeTextEditor._defaultColor = value;\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        this.#updateFontSize(value);\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        this.#updateColor(value);\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  static get defaultPropertiesToUpdate() {\n    return [\n      [\n        AnnotationEditorParamsType.FREETEXT_SIZE,\n        FreeTextEditor._defaultFontSize,\n      ],\n      [\n        AnnotationEditorParamsType.FREETEXT_COLOR,\n        FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor,\n      ],\n    ];\n  }\n\n  /** @inheritdoc */\n  get propertiesToUpdate() {\n    return [\n      [AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize],\n      [AnnotationEditorParamsType.FREETEXT_COLOR, this.#color],\n    ];\n  }\n\n  /**\n   * Update the font size and make this action as undoable.\n   * @param {number} fontSize\n   */\n  #updateFontSize(fontSize) {\n    const setFontsize = size => {\n      this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n      this.translate(0, -(size - this.#fontSize) * this.parentScale);\n      this.#fontSize = size;\n      this.#setEditorDimensions();\n    };\n    const savedFontsize = this.#fontSize;\n    this.addCommands({\n      cmd: () => {\n        setFontsize(fontSize);\n      },\n      undo: () => {\n        setFontsize(savedFontsize);\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.FREETEXT_SIZE,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the color and make this action undoable.\n   * @param {string} color\n   */\n  #updateColor(color) {\n    const savedColor = this.#color;\n    this.addCommands({\n      cmd: () => {\n        this.#color = this.editorDiv.style.color = color;\n      },\n      undo: () => {\n        this.#color = this.editorDiv.style.color = savedColor;\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.FREETEXT_COLOR,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Helper to translate the editor with the keyboard when it's empty.\n   * @param {number} x in page units.\n   * @param {number} y in page units.\n   */\n  _translateEmpty(x, y) {\n    this._uiManager.translateSelectedEditors(x, y, /* noCommit = */ true);\n  }\n\n  /** @inheritdoc */\n  getInitialTranslation() {\n    // The start of the base line is where the user clicked.\n    const scale = this.parentScale;\n    return [\n      -FreeTextEditor._internalPadding * scale,\n      -(FreeTextEditor._internalPadding + this.#fontSize) * scale,\n    ];\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilting it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n    }\n  }\n\n  /** @inheritdoc */\n  enableEditMode() {\n    if (this.isInEditMode()) {\n      return;\n    }\n\n    this.parent.setEditingState(false);\n    this.parent.updateToolbar(AnnotationEditorType.FREETEXT);\n    super.enableEditMode();\n    this.overlayDiv.classList.remove(\"enabled\");\n    this.editorDiv.contentEditable = true;\n    this._isDraggable = false;\n    this.div.removeAttribute(\"aria-activedescendant\");\n    this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\n    this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\n    this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\n    this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\n  }\n\n  /** @inheritdoc */\n  disableEditMode() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n\n    this.parent.setEditingState(true);\n    super.disableEditMode();\n    this.overlayDiv.classList.add(\"enabled\");\n    this.editorDiv.contentEditable = false;\n    this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n    this._isDraggable = true;\n    this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\n    this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\n    this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\n    this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\n\n    // On Chrome, the focus is given to <body> when contentEditable is set to\n    // false, hence we focus the div.\n    this.div.focus({\n      preventScroll: true /* See issue #15744 */,\n    });\n\n    // In case the blur callback hasn't been called.\n    this.isEditing = false;\n    this.parent.div.classList.add(\"freeTextEditing\");\n  }\n\n  /** @inheritdoc */\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    super.focusin(event);\n    if (event.target !== this.editorDiv) {\n      this.editorDiv.focus();\n    }\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    if (this.width) {\n      this.#cheatInitialRect();\n      // The editor was created in using ctrl+c.\n      return;\n    }\n    this.enableEditMode();\n    this.editorDiv.focus();\n    if (this._initialOptions?.isCentered) {\n      this.center();\n    }\n    this._initialOptions = null;\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n  }\n\n  /** @inheritdoc */\n  remove() {\n    this.isEditing = false;\n    if (this.parent) {\n      this.parent.setEditingState(true);\n      this.parent.div.classList.add(\"freeTextEditing\");\n    }\n    super.remove();\n  }\n\n  /**\n   * Extract the text from this editor.\n   * @returns {string}\n   */\n  #extractText() {\n    const divs = this.editorDiv.getElementsByTagName(\"div\");\n    if (divs.length === 0) {\n      return this.editorDiv.innerText;\n    }\n    const buffer = [];\n    for (const div of divs) {\n      buffer.push(div.innerText.replace(/\\r\\n?|\\n/, \"\"));\n    }\n    return buffer.join(\"\\n\");\n  }\n\n  #setEditorDimensions() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n\n    let rect;\n    if (this.isAttachedToDOM) {\n      rect = this.div.getBoundingClientRect();\n    } else {\n      // This editor isn't on screen but we need to get its dimensions, so\n      // we just insert it in the DOM, get its bounding box and then remove it.\n      const { currentLayer, div } = this;\n      const savedDisplay = div.style.display;\n      div.style.display = \"hidden\";\n      currentLayer.div.append(this.div);\n      rect = div.getBoundingClientRect();\n      div.remove();\n      div.style.display = savedDisplay;\n    }\n\n    // The dimensions are relative to the rotation of the page, hence we need to\n    // take that into account (see issue #16636).\n    if (this.rotation % 180 === this.parentRotation % 180) {\n      this.width = rect.width / parentWidth;\n      this.height = rect.height / parentHeight;\n    } else {\n      this.width = rect.height / parentWidth;\n      this.height = rect.width / parentHeight;\n    }\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Commit the content we have in this editor.\n   * @returns {undefined}\n   */\n  commit() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n\n    super.commit();\n    this.disableEditMode();\n    const savedText = this.#content;\n    const newText = (this.#content = this.#extractText().trimEnd());\n    if (savedText === newText) {\n      return;\n    }\n\n    const setText = text => {\n      this.#content = text;\n      if (!text) {\n        this.remove();\n        return;\n      }\n      this.#setContent();\n      this._uiManager.rebuild(this);\n      this.#setEditorDimensions();\n    };\n    this.addCommands({\n      cmd: () => {\n        setText(newText);\n      },\n      undo: () => {\n        setText(savedText);\n      },\n      mustExec: false,\n    });\n    this.#setEditorDimensions();\n  }\n\n  /** @inheritdoc */\n  shouldGetKeyboardEvents() {\n    return this.isInEditMode();\n  }\n\n  /** @inheritdoc */\n  enterInEditMode() {\n    this.enableEditMode();\n    this.editorDiv.focus();\n  }\n\n  /**\n   * ondblclick callback.\n   * @param {MouseEvent} event\n   */\n  dblclick(event) {\n    this.enterInEditMode();\n  }\n\n  /**\n   * onkeydown callback.\n   * @param {KeyboardEvent} event\n   */\n  keydown(event) {\n    if (event.target === this.div && event.key === \"Enter\") {\n      this.enterInEditMode();\n      // Avoid to add an unwanted new line.\n      event.preventDefault();\n    }\n  }\n\n  editorDivKeydown(event) {\n    FreeTextEditor._keyboardManager.exec(this, event);\n  }\n\n  editorDivFocus(event) {\n    this.isEditing = true;\n  }\n\n  editorDivBlur(event) {\n    this.isEditing = false;\n  }\n\n  editorDivInput(event) {\n    this.parent.div.classList.toggle(\"freeTextEditing\", this.isEmpty());\n  }\n\n  /** @inheritdoc */\n  disableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"comment\");\n    this.editorDiv.removeAttribute(\"aria-multiline\");\n  }\n\n  /** @inheritdoc */\n  enableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"textbox\");\n    this.editorDiv.setAttribute(\"aria-multiline\", true);\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n    this.editorDiv = document.createElement(\"div\");\n    this.editorDiv.className = \"internal\";\n\n    this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n    this.enableEditing();\n\n    AnnotationEditor._l10nPromise\n      .get(\"editor_free_text2_aria_label\")\n      .then(msg => this.editorDiv?.setAttribute(\"aria-label\", msg));\n\n    AnnotationEditor._l10nPromise\n      .get(\"free_text2_default_content\")\n      .then(msg => this.editorDiv?.setAttribute(\"default-content\", msg));\n    this.editorDiv.contentEditable = true;\n\n    const { style } = this.editorDiv;\n    style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n    style.color = this.#color;\n\n    this.div.append(this.editorDiv);\n\n    this.overlayDiv = document.createElement(\"div\");\n    this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n    this.div.append(this.overlayDiv);\n\n    // TODO: implement paste callback.\n    // The goal is to sanitize and have something suitable for this\n    // editor.\n    bindEvents(this, this.div, [\"dblclick\", \"keydown\"]);\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      if (this.annotationElementId) {\n        // This stuff is hard to test: if something is changed here, please\n        // test with the following PDF file:\n        //  - freetexts.pdf\n        //  - rotated_freetexts.pdf\n        // Only small variations between the original annotation and its editor\n        // are allowed.\n\n        // position is the position of the first glyph in the annotation\n        // and it's relative to its container.\n        const { position } = this.#initialData;\n        let [tx, ty] = this.getInitialTranslation();\n        [tx, ty] = this.pageTranslationToScreen(tx, ty);\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        const [pageX, pageY] = this.pageTranslation;\n        let posX, posY;\n        switch (this.rotation) {\n          case 0:\n            posX = baseX + (position[0] - pageX) / pageWidth;\n            posY = baseY + this.height - (position[1] - pageY) / pageHeight;\n            break;\n          case 90:\n            posX = baseX + (position[0] - pageX) / pageWidth;\n            posY = baseY - (position[1] - pageY) / pageHeight;\n            [tx, ty] = [ty, -tx];\n            break;\n          case 180:\n            posX = baseX - this.width + (position[0] - pageX) / pageWidth;\n            posY = baseY - (position[1] - pageY) / pageHeight;\n            [tx, ty] = [-tx, -ty];\n            break;\n          case 270:\n            posX =\n              baseX +\n              (position[0] - pageX - this.height * pageHeight) / pageWidth;\n            posY =\n              baseY +\n              (position[1] - pageY - this.width * pageWidth) / pageHeight;\n            [tx, ty] = [-ty, tx];\n            break;\n        }\n        this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\n      } else {\n        this.setAt(\n          baseX * parentWidth,\n          baseY * parentHeight,\n          this.width * parentWidth,\n          this.height * parentHeight\n        );\n      }\n\n      this.#setContent();\n      this._isDraggable = true;\n      this.editorDiv.contentEditable = false;\n    } else {\n      this._isDraggable = false;\n      this.editorDiv.contentEditable = true;\n    }\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      this.div.setAttribute(\"annotation-id\", this.annotationElementId);\n    }\n\n    return this.div;\n  }\n\n  #setContent() {\n    this.editorDiv.replaceChildren();\n    if (!this.#content) {\n      return;\n    }\n    for (const line of this.#content.split(\"\\n\")) {\n      const div = document.createElement(\"div\");\n      div.append(\n        line ? document.createTextNode(line) : document.createElement(\"br\")\n      );\n      this.editorDiv.append(div);\n    }\n  }\n\n  get contentDiv() {\n    return this.editorDiv;\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    let initialData = null;\n    if (data instanceof FreeTextAnnotationElement) {\n      const {\n        data: {\n          defaultAppearanceData: { fontSize, fontColor },\n          rect,\n          rotation,\n          id,\n        },\n        textContent,\n        textPosition,\n        parent: {\n          page: { pageNumber },\n        },\n      } = data;\n      // textContent is supposed to be an array of strings containing each line\n      // of text. However, it can be null or empty.\n      if (!textContent || textContent.length === 0) {\n        // Empty annotation.\n        return null;\n      }\n      initialData = data = {\n        annotationType: AnnotationEditorType.FREETEXT,\n        color: Array.from(fontColor),\n        fontSize,\n        value: textContent.join(\"\\n\"),\n        position: textPosition,\n        pageIndex: pageNumber - 1,\n        rect,\n        rotation,\n        id,\n        deleted: false,\n      };\n    }\n    const editor = super.deserialize(data, parent, uiManager);\n\n    editor.#fontSize = data.fontSize;\n    editor.#color = Util.makeHexColor(...data.color);\n    editor.#content = data.value;\n    editor.annotationElementId = data.id || null;\n    editor.#initialData = initialData;\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize(isForCopying = false) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    if (this.deleted) {\n      return {\n        pageIndex: this.pageIndex,\n        id: this.annotationElementId,\n        deleted: true,\n      };\n    }\n\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    const rect = this.getRect(padding, padding);\n    const color = AnnotationEditor._colorManager.convert(\n      this.isAttachedToDOM\n        ? getComputedStyle(this.editorDiv).color\n        : this.#color\n    );\n\n    const serialized = {\n      annotationType: AnnotationEditorType.FREETEXT,\n      color,\n      fontSize: this.#fontSize,\n      value: this.#content,\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n      structTreeParentId: this._structTreeParentId,\n    };\n\n    if (isForCopying) {\n      // Don't add the id when copying because the pasted editor mustn't be\n      // linked to an existing annotation.\n      return serialized;\n    }\n\n    if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\n      return null;\n    }\n\n    serialized.id = this.annotationElementId;\n\n    return serialized;\n  }\n\n  #hasElementChanged(serialized) {\n    const { value, fontSize, color, rect, pageIndex } = this.#initialData;\n\n    return (\n      serialized.value !== value ||\n      serialized.fontSize !== fontSize ||\n      serialized.rect.some((x, i) => Math.abs(x - rect[i]) >= 1) ||\n      serialized.color.some((c, i) => c !== color[i]) ||\n      serialized.pageIndex !== pageIndex\n    );\n  }\n\n  #cheatInitialRect(delayed = false) {\n    // The annotation has a rect but the editor has an other one.\n    // When we want to know if the annotation has changed (e.g. has been moved)\n    // we must compare the editor initial rect with the current one.\n    // So this method is a hack to have a way to compare the real rects.\n    if (!this.annotationElementId) {\n      return;\n    }\n\n    this.#setEditorDimensions();\n    if (!delayed && (this.width === 0 || this.height === 0)) {\n      setTimeout(() => this.#cheatInitialRect(/* delayed = */ true), 0);\n      return;\n    }\n\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    this.#initialData.rect = this.getRect(padding, padding);\n  }\n}\n\nexport { FreeTextEditor };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../web/text_accessibility.js\").TextAccessibilityManager} TextAccessibilityManager */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../web/interfaces\").IDownloadManager} IDownloadManager */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationEditorType,\n  AnnotationPrefix,\n  AnnotationType,\n  FeatureTest,\n  LINE_FACTOR,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n  setLayerDimensions,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\nimport { NullL10n } from \"display-l10n_utils\";\nimport { XfaLayer } from \"./xfa_layer.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst DEFAULT_FONT_SIZE = 9;\nconst GetElementsByNameSet = new WeakSet();\n\nfunction getRectDims(rect) {\n  return {\n    width: rect[2] - rect[0],\n    height: rect[3] - rect[1],\n  };\n}\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n          case \"Sig\":\n            return new SignatureWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  #hasBorder = false;\n\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this.parent = parameters.parent;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this._createQuadrilaterals();\n    }\n  }\n\n  static _hasPopupData({ titleObj, contentsObj, richText }) {\n    return !!(titleObj?.str || contentsObj?.str || richText?.str);\n  }\n\n  get hasPopupData() {\n    return AnnotationElement._hasPopupData(this.data);\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLElement} A section element.\n   */\n  _createContainer(ignoreBorder) {\n    const {\n      data,\n      parent: { page, viewport },\n    } = this;\n\n    const container = document.createElement(\"section\");\n    container.setAttribute(\"data-annotation-id\", data.id);\n    if (!(this instanceof WidgetAnnotationElement)) {\n      container.tabIndex = DEFAULT_TAB_INDEX;\n    }\n\n    // The accessibility manager will move the annotation in the DOM in\n    // order to match the visual ordering.\n    // But if an annotation is above an other one, then we must draw it\n    // after the other one whatever the order is in the DOM, hence the\n    // use of the z-index.\n    container.style.zIndex = this.parent.zIndex++;\n\n    if (this.data.popupRef) {\n      container.setAttribute(\"aria-haspopup\", \"dialog\");\n    }\n\n    if (data.noRotate) {\n      container.classList.add(\"norotate\");\n    }\n\n    const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n\n    if (!data.rect || this instanceof PopupAnnotationElement) {\n      const { rotation } = data;\n      if (!data.hasOwnCanvas && rotation !== 0) {\n        this.setRotation(rotation, container);\n      }\n      return container;\n    }\n\n    const { width, height } = getRectDims(data.rect);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n        container.style.borderRadius = radius;\n      } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || null;\n      if (borderColor) {\n        this.#hasBorder = true;\n        container.style.borderColor = Util.makeHexColor(\n          borderColor[0] | 0,\n          borderColor[1] | 0,\n          borderColor[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${(100 * (rect[0] - pageX)) / pageWidth}%`;\n    container.style.top = `${(100 * (rect[1] - pageY)) / pageHeight}%`;\n\n    const { rotation } = data;\n    if (data.hasOwnCanvas || rotation === 0) {\n      container.style.width = `${(100 * width) / pageWidth}%`;\n      container.style.height = `${(100 * height) / pageHeight}%`;\n    } else {\n      this.setRotation(rotation, container);\n    }\n\n    return container;\n  }\n\n  setRotation(angle, container = this.container) {\n    if (!this.data.rect) {\n      return;\n    }\n    const { pageWidth, pageHeight } = this.parent.viewport.rawDims;\n    const { width, height } = getRectDims(this.data.rect);\n\n    let elementWidth, elementHeight;\n    if (angle % 180 === 0) {\n      elementWidth = (100 * width) / pageWidth;\n      elementHeight = (100 * height) / pageHeight;\n    } else {\n      elementWidth = (100 * height) / pageWidth;\n      elementHeight = (100 * width) / pageHeight;\n    }\n\n    container.style.width = `${elementWidth}%`;\n    container.style.height = `${elementHeight}%`;\n\n    container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n  }\n\n  get _commonActions() {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      const colorType = color[0];\n      const colorArray = color.slice(1);\n      event.target.style[styleName] =\n        ColorConverters[`${colorType}_HTML`](colorArray);\n      this.annotationStorage.setValue(this.data.id, {\n        [styleName]: ColorConverters[`${colorType}_rgb`](colorArray),\n      });\n    };\n\n    return shadow(this, \"_commonActions\", {\n      display: event => {\n        const { display } = event.detail;\n        // See scripting/constants.js for the values of `Display`.\n        // 0 = visible, 1 = hidden, 2 = noPrint and 3 = noView.\n        const hidden = display % 2 === 1;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          noView: hidden,\n          noPrint: display === 1 || display === 2,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          noPrint: !event.detail.print,\n        });\n      },\n      hidden: event => {\n        const { hidden } = event.detail;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          noPrint: hidden,\n          noView: hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        event.target.disabled = event.detail.readonly;\n      },\n      required: event => {\n        this._setRequired(event.target, event.detail.required);\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n      rotation: event => {\n        const angle = event.detail.rotation;\n        this.setRotation(angle);\n        this.annotationStorage.setValue(this.data.id, {\n          rotation: angle,\n        });\n      },\n    });\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const commonActions = this._commonActions;\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      action?.(jsEvent);\n    }\n  }\n\n  _setDefaultPropertiesFromJS(element) {\n    if (!this.enableScripting) {\n      return;\n    }\n\n    // Some properties may have been updated thanks to JS.\n    const storedData = this.annotationStorage.getRawValue(this.data.id);\n    if (!storedData) {\n      return;\n    }\n\n    const commonActions = this._commonActions;\n    for (const [actionName, detail] of Object.entries(storedData)) {\n      const action = commonActions[actionName];\n      if (action) {\n        const eventProxy = {\n          detail: {\n            [actionName]: detail,\n          },\n          target: element,\n        };\n        action(eventProxy);\n        // The action has been consumed: no need to keep it.\n        delete storedData[actionName];\n      }\n    }\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @memberof AnnotationElement\n   */\n  _createQuadrilaterals() {\n    if (!this.container) {\n      return;\n    }\n    const { quadPoints } = this.data;\n    if (!quadPoints) {\n      return;\n    }\n\n    const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect;\n\n    if (quadPoints.length === 1) {\n      const [, { x: trX, y: trY }, { x: blX, y: blY }] = quadPoints[0];\n      if (\n        rectTrX === trX &&\n        rectTrY === trY &&\n        rectBlX === blX &&\n        rectBlY === blY\n      ) {\n        // The quadpoints cover the whole annotation rectangle, so no need to\n        // create a quadrilateral.\n        return;\n      }\n    }\n\n    const { style } = this.container;\n    let svgBuffer;\n    if (this.#hasBorder) {\n      const { borderColor, borderWidth } = style;\n      style.borderWidth = 0;\n      svgBuffer = [\n        \"url('data:image/svg+xml;utf8,\",\n        `<svg xmlns=\"http://www.w3.org/2000/svg\"`,\n        ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`,\n        `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`,\n      ];\n      this.container.classList.add(\"hasBorder\");\n    }\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      this.container.classList.add(\"hasClipPath\");\n    }\n\n    const width = rectTrX - rectBlX;\n    const height = rectTrY - rectBlY;\n\n    const { svgFactory } = this;\n    const svg = svgFactory.createElement(\"svg\");\n    svg.classList.add(\"quadrilateralsContainer\");\n    svg.setAttribute(\"width\", 0);\n    svg.setAttribute(\"height\", 0);\n    const defs = svgFactory.createElement(\"defs\");\n    svg.append(defs);\n    const clipPath = svgFactory.createElement(\"clipPath\");\n    const id = `clippath_${this.data.id}`;\n    clipPath.setAttribute(\"id\", id);\n    clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n    defs.append(clipPath);\n\n    for (const [, { x: trX, y: trY }, { x: blX, y: blY }] of quadPoints) {\n      const rect = svgFactory.createElement(\"rect\");\n      const x = (blX - rectBlX) / width;\n      const y = (rectTrY - trY) / height;\n      const rectWidth = (trX - blX) / width;\n      const rectHeight = (trY - blY) / height;\n      rect.setAttribute(\"x\", x);\n      rect.setAttribute(\"y\", y);\n      rect.setAttribute(\"width\", rectWidth);\n      rect.setAttribute(\"height\", rectHeight);\n      clipPath.append(rect);\n      svgBuffer?.push(\n        `<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`\n      );\n    }\n\n    if (this.#hasBorder) {\n      svgBuffer.push(`</g></svg>')`);\n      style.backgroundImage = svgBuffer.join(\"\");\n    }\n\n    this.container.append(svg);\n    this.container.style.clipPath = `url(#${id})`;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @memberof AnnotationElement\n   */\n  _createPopup() {\n    const { container, data } = this;\n    container.setAttribute(\"aria-haspopup\", \"dialog\");\n\n    const popup = new PopupAnnotationElement({\n      data: {\n        color: data.color,\n        titleObj: data.titleObj,\n        modificationDate: data.modificationDate,\n        contentsObj: data.contentsObj,\n        richText: data.richText,\n        parentRect: data.rect,\n        borderStyle: 0,\n        id: `popup_${data.id}`,\n        rotation: data.rotation,\n      },\n      parent: this.parent,\n      elements: [this],\n    });\n    this.parent.div.append(popup.render());\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.querySelector(\n            `[data-element-id=\"${id}\"]`\n          );\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { exportValue } = domElement;\n      const id = domElement.getAttribute(\"data-element-id\");\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n\n  show() {\n    if (this.container) {\n      this.container.hidden = false;\n    }\n    this.popup?.maybeShow();\n  }\n\n  hide() {\n    if (this.container) {\n      this.container.hidden = true;\n    }\n    this.popup?.forceHide();\n  }\n\n  /**\n   * Get the HTML element(s) which can trigger a popup when clicked or hovered.\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLElement>|HTMLElement} An array of elements or an\n   *          element.\n   */\n  getElementsToTriggerPopup() {\n    return this.container;\n  }\n\n  addHighlightArea() {\n    const triggers = this.getElementsToTriggerPopup();\n    if (Array.isArray(triggers)) {\n      for (const element of triggers) {\n        element.classList.add(\"highlightArea\");\n      }\n    } else {\n      triggers.classList.add(\"highlightArea\");\n    }\n  }\n\n  _editOnDoubleClick() {\n    const {\n      annotationEditorType: mode,\n      data: { id: editId },\n    } = this;\n    this.container.addEventListener(\"dblclick\", () => {\n      this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\n        source: this,\n        mode,\n        editId,\n      });\n    });\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters, options = null) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: !!options?.ignoreBorder,\n      createQuadrilaterals: true,\n    });\n    this.isTooltipOnly = parameters.data.isTooltipOnly;\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"data-element-id\", data.id);\n    let isBound = false;\n\n    if (data.url) {\n      linkService.addLinkAttributes(link, data.url, data.newWindow);\n      isBound = true;\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n      isBound = true;\n    } else if (data.attachment) {\n      this._bindAttachment(link, data.attachment);\n      isBound = true;\n    } else if (data.setOCGState) {\n      this.#bindSetOCGState(link, data.setOCGState);\n      isBound = true;\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n      isBound = true;\n    } else {\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        this._bindJSAction(link, data);\n        isBound = true;\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n        isBound = true;\n      } else if (this.isTooltipOnly && !isBound) {\n        this._bindLink(link, \"\");\n        isBound = true;\n      }\n    }\n\n    this.container.classList.add(\"linkAnnotation\");\n    if (isBound) {\n      this.container.append(link);\n    }\n\n    return this.container;\n  }\n\n  #setInternalLink() {\n    this.container.setAttribute(\"data-internal-link\", \"\");\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      this.#setInternalLink();\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind attachments to the link element.\n   * @param {Object} link\n   * @param {Object} attachment\n   */\n  _bindAttachment(link, attachment) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.downloadManager?.openOrDownloadData(\n        this.container,\n        attachment.content,\n        attachment.filename\n      );\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind SetOCGState actions to the link element.\n   * @param {Object} link\n   * @param {Object} action\n   */\n  #bindSetOCGState(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeSetOCGState(action);\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    this.#setInternalLink();\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    this.#setInternalLink();\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      otherClickAction?.();\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n\n        const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n        if (!domElement) {\n          continue;\n        } else if (!GetElementsByNameSet.has(domElement)) {\n          warn(`_bindResetFormAction - element not allowed: ${id}`);\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n  }\n\n  render() {\n    this.container.classList.add(\"textAnnotation\");\n\n    const image = document.createElement(\"img\");\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.append(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  showElementAndHideCanvas(element) {\n    if (this.data.hasOwnCanvas) {\n      if (element.previousSibling?.nodeName === \"CANVAS\") {\n        element.previousSibling.hidden = true;\n      }\n      element.hidden = false;\n    }\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = FeatureTest.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, elementData, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non-mouse events\n      element.addEventListener(baseName, event => {\n        if (baseName === \"blur\") {\n          if (!elementData.focused || !event.relatedTarget) {\n            return;\n          }\n          elementData.focused = false;\n        } else if (baseName === \"focus\") {\n          if (elementData.focused) {\n            return;\n          }\n          elementData.focused = true;\n        }\n\n        if (!valueGetter) {\n          return;\n        }\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, elementData, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        if (eventName === \"Focus\" || eventName === \"Blur\") {\n          elementData ||= { focused: false };\n        }\n        this._setEventListener(\n          element,\n          elementData,\n          baseName,\n          eventName,\n          getter\n        );\n        if (eventName === \"Focus\" && !this.data.actions?.Blur) {\n          // Ensure that elementData will have the correct value.\n          this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\n        } else if (eventName === \"Blur\" && !this.data.actions?.Focus) {\n          this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\n        }\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontColor } = this.data.defaultAppearanceData;\n    const fontSize =\n      this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;\n\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n\n    // We don't use the font, as specified in the PDF document, for the <input>\n    // element. Hence using the original `fontSize` could look bad, which is why\n    // it's instead based on the field height.\n    // If the height is \"big\" then it could lead to a too big font size\n    // so in this case use the one we've in the pdf (hence the min).\n    let computedFontSize;\n    const BORDER_SIZE = 2;\n    const roundToOneDecimal = x => Math.round(10 * x) / 10;\n    if (this.data.multiLine) {\n      const height = Math.abs(\n        this.data.rect[3] - this.data.rect[1] - BORDER_SIZE\n      );\n      const numberOfLines = Math.round(height / (LINE_FACTOR * fontSize)) || 1;\n      const lineHeight = height / numberOfLines;\n      computedFontSize = Math.min(\n        fontSize,\n        roundToOneDecimal(lineHeight / LINE_FACTOR)\n      );\n    } else {\n      const height = Math.abs(\n        this.data.rect[3] - this.data.rect[1] - BORDER_SIZE\n      );\n      computedFontSize = Math.min(\n        fontSize,\n        roundToOneDecimal(height / LINE_FACTOR)\n      );\n    }\n    style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n\n  _setRequired(element, isRequired) {\n    if (isRequired) {\n      element.setAttribute(\"required\", true);\n    } else {\n      element.removeAttribute(\"required\");\n    }\n    element.setAttribute(\"aria-required\", isRequired);\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.classList.add(\"textWidgetAnnotation\");\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n      });\n      let textContent = storedData.value || \"\";\n      const maxLen = storage.getValue(id, {\n        charLimit: this.data.maxLen,\n      }).charLimit;\n      if (maxLen && textContent.length > maxLen) {\n        textContent = textContent.slice(0, maxLen);\n      }\n\n      let fieldFormattedValues =\n        storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n      if (fieldFormattedValues && this.data.comb) {\n        fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n      }\n\n      const elementData = {\n        userValue: textContent,\n        formattedValue: fieldFormattedValues,\n        lastCommittedValue: null,\n        commitKey: 1,\n        focused: false,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = fieldFormattedValues ?? textContent;\n        if (this.data.doNotScroll) {\n          element.style.overflowY = \"hidden\";\n        }\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\n        if (this.data.doNotScroll) {\n          element.style.overflowX = \"hidden\";\n        }\n      }\n      if (this.data.hasOwnCanvas) {\n        element.hidden = true;\n      }\n      GetElementsByNameSet.add(element);\n      element.setAttribute(\"data-element-id\", id);\n\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      this._setRequired(element, this.data.required);\n\n      if (maxLen) {\n        element.maxLength = maxLen;\n      }\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n        elementData.formattedValue = null;\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue ?? \"\";\n        element.value = elementData.userValue = defaultValue;\n        elementData.formattedValue = null;\n      });\n\n      let blurListener = event => {\n        const { formattedValue } = elementData;\n        if (formattedValue !== null && formattedValue !== undefined) {\n          event.target.value = formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.focused) {\n            return;\n          }\n          const { target } = event;\n          if (elementData.userValue) {\n            target.value = elementData.userValue;\n          }\n          elementData.lastCommittedValue = target.value;\n          elementData.commitKey = 1;\n          elementData.focused = true;\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          this.showElementAndHideCanvas(jsEvent.target);\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value ?? \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              event.target.value = elementData.userValue;\n            },\n            formattedValue(event) {\n              const { formattedValue } = event.detail;\n              elementData.formattedValue = formattedValue;\n              if (\n                formattedValue !== null &&\n                formattedValue !== undefined &&\n                event.target !== document.activeElement\n              ) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue,\n              });\n            },\n            selRange(event) {\n              event.target.setSelectionRange(...event.detail.selRange);\n            },\n            charLimit: event => {\n              const { charLimit } = event.detail;\n              const { target } = event;\n              if (charLimit === 0) {\n                target.removeAttribute(\"maxLength\");\n                return;\n              }\n\n              target.setAttribute(\"maxLength\", charLimit);\n              let value = elementData.userValue;\n              if (!value || value.length <= charLimit) {\n                return;\n              }\n              value = value.slice(0, charLimit);\n              target.value = elementData.userValue = value;\n              storage.setValue(id, { value });\n\n              this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value,\n                  willCommit: true,\n                  commitKey: 1,\n                  selStart: target.selectionStart,\n                  selEnd: target.selectionEnd,\n                },\n              });\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.commitKey = 1;\n          // If the key is one of Escape, Enter then the data are committed.\n          // If we've a Tab then data will be committed on blur.\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\" && !this.data.multiLine) {\n            // When we've a multiline field, \"Enter\" key is a key as the other\n            // hence we don't commit the data (Acrobat behaves the same way)\n            // (see issue #15627).\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            elementData.commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          const { value } = event.target;\n          if (elementData.lastCommittedValue === value) {\n            return;\n          }\n          elementData.lastCommittedValue = value;\n          // Save the entered value\n          elementData.userValue = value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (!elementData.focused || !event.relatedTarget) {\n            return;\n          }\n          elementData.focused = false;\n          const { value } = event.target;\n          elementData.userValue = value;\n          if (elementData.lastCommittedValue !== value) {\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                willCommit: true,\n                commitKey: elementData.commitKey,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n\n        if (this.data.actions?.Keystroke) {\n          element.addEventListener(\"beforeinput\", event => {\n            elementData.lastCommittedValue = null;\n            const { data, target } = event;\n            const { value, selectionStart, selectionEnd } = target;\n\n            let selStart = selectionStart,\n              selEnd = selectionEnd;\n\n            switch (event.inputType) {\n              // https://rawgit.com/w3c/input-events/v1/index.html#interface-InputEvent-Attributes\n              case \"deleteWordBackward\": {\n                const match = value\n                  .substring(0, selectionStart)\n                  .match(/\\w*[^\\w]*$/);\n                if (match) {\n                  selStart -= match[0].length;\n                }\n                break;\n              }\n              case \"deleteWordForward\": {\n                const match = value\n                  .substring(selectionStart)\n                  .match(/^[^\\w]*\\w*/);\n                if (match) {\n                  selEnd += match[0].length;\n                }\n                break;\n              }\n              case \"deleteContentBackward\":\n                if (selectionStart === selectionEnd) {\n                  selStart -= 1;\n                }\n                break;\n              case \"deleteContentForward\":\n                if (selectionStart === selectionEnd) {\n                  selEnd += 1;\n                }\n                break;\n            }\n\n            // We handle the event ourselves.\n            event.preventDefault();\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                change: data || \"\",\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          elementData,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: !!parameters.data.hasOwnCanvas });\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        null,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        null,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { ignoreBorder: parameters.data.hasAppearance });\n  }\n\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    const linkElement = container.lastChild;\n    if (this.enableScripting && this.hasJSActions && linkElement) {\n      this._setDefaultPropertiesFromJS(linkElement);\n\n      linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        this._dispatchEventFromSandbox({}, jsEvent);\n      });\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.classList.add(\"choiceWidgetAnnotation\");\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    const storedData = storage.getValue(id, {\n      value: this.data.fieldValue,\n    });\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.setAttribute(\"data-element-id\", id);\n\n    selectElement.disabled = this.data.readOnly;\n    this._setRequired(selectElement, this.data.required);\n    selectElement.name = this.data.fieldName;\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (storedData.value.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n        addAnEmptyEntry = false;\n      }\n      selectElement.append(optionElement);\n    }\n\n    let removeEmptyEntry = null;\n    if (addAnEmptyEntry) {\n      const noneOptionElement = document.createElement(\"option\");\n      noneOptionElement.value = \" \";\n      noneOptionElement.setAttribute(\"hidden\", true);\n      noneOptionElement.setAttribute(\"selected\", true);\n      selectElement.prepend(noneOptionElement);\n\n      removeEmptyEntry = () => {\n        noneOptionElement.remove();\n        selectElement.removeEventListener(\"input\", removeEmptyEntry);\n        removeEmptyEntry = null;\n      };\n      selectElement.addEventListener(\"input\", removeEmptyEntry);\n    }\n\n    const getValue = isExport => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const { options, multiple } = selectElement;\n      if (!multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    let selectedValues = getValue(/* isExport */ false);\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            removeEmptyEntry?.();\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const selectChild = selectElement.children[index];\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n\n            if (selectChild) {\n              selectChild.before(optionElement);\n            } else {\n              selectElement.append(optionElement);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.append(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(/* isExport */ true);\n        storage.setValue(id, { value: exportValue });\n\n        event.preventDefault();\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value: selectedValues,\n            changeEx: exportValue,\n            willCommit: false,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        null,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n          [\"input\", \"Validate\"],\n        ],\n        event => event.target.value\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(/* isExport */ true) });\n      });\n    }\n\n    if (this.data.combo) {\n      this._setTextStyle(selectElement);\n    } else {\n      // Just use the default font size...\n      // it's a bit hard to guess what is a good size.\n    }\n    this._setBackgroundColor(selectElement);\n    this._setDefaultPropertiesFromJS(selectElement);\n\n    this.container.append(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const { data, elements } = parameters;\n    super(parameters, { isRenderable: AnnotationElement._hasPopupData(data) });\n    this.elements = elements;\n  }\n\n  render() {\n    this.container.classList.add(\"popupAnnotation\");\n\n    const popup = new PopupElement({\n      container: this.container,\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n      richText: this.data.richText,\n      rect: this.data.rect,\n      parentRect: this.data.parentRect || null,\n      parent: this.parent,\n      elements: this.elements,\n      open: this.data.open,\n    });\n\n    const elementIds = [];\n    for (const element of this.elements) {\n      element.popup = popup;\n      elementIds.push(element.data.id);\n      element.addHighlightArea();\n    }\n\n    this.container.setAttribute(\n      \"aria-controls\",\n      elementIds.map(id => `${AnnotationPrefix}${id}`).join(\",\")\n    );\n\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  #dateTimePromise = null;\n\n  #boundKeyDown = this.#keyDown.bind(this);\n\n  #boundHide = this.#hide.bind(this);\n\n  #boundShow = this.#show.bind(this);\n\n  #boundToggle = this.#toggle.bind(this);\n\n  #color = null;\n\n  #container = null;\n\n  #contentsObj = null;\n\n  #elements = null;\n\n  #parent = null;\n\n  #parentRect = null;\n\n  #pinned = false;\n\n  #popup = null;\n\n  #rect = null;\n\n  #richText = null;\n\n  #titleObj = null;\n\n  #wasVisible = false;\n\n  constructor({\n    container,\n    color,\n    elements,\n    titleObj,\n    modificationDate,\n    contentsObj,\n    richText,\n    parent,\n    rect,\n    parentRect,\n    open,\n  }) {\n    this.#container = container;\n    this.#titleObj = titleObj;\n    this.#contentsObj = contentsObj;\n    this.#richText = richText;\n    this.#parent = parent;\n    this.#color = color;\n    this.#rect = rect;\n    this.#parentRect = parentRect;\n    this.#elements = elements;\n\n    const dateObject = PDFDateString.toDateObject(modificationDate);\n    if (dateObject) {\n      // The modification date is shown in the popup instead of the creation\n      // date if it is available and can be parsed correctly, which is\n      // consistent with other viewers such as Adobe Acrobat.\n      this.#dateTimePromise = parent.l10n.get(\"annotation_date_string\", {\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n    }\n\n    this.trigger = elements.flatMap(e => e.getElementsToTriggerPopup());\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this.#boundToggle);\n      element.addEventListener(\"mouseenter\", this.#boundShow);\n      element.addEventListener(\"mouseleave\", this.#boundHide);\n      element.classList.add(\"popupTriggerArea\");\n    }\n\n    // Attach the event listener to toggle the popup with the keyboard.\n    for (const element of elements) {\n      element.container?.addEventListener(\"keydown\", this.#boundKeyDown);\n    }\n\n    this.#container.hidden = true;\n    if (open) {\n      this.#toggle();\n    }\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      // Since the popup is lazily created, we need to ensure that it'll be\n      // created and displayed during reference tests.\n      this.#parent.popupShow.push(async () => {\n        if (this.#container.hidden) {\n          this.#show();\n        }\n        if (this.#dateTimePromise) {\n          await this.#dateTimePromise;\n        }\n      });\n    }\n  }\n\n  render() {\n    if (this.#popup) {\n      return;\n    }\n\n    const {\n      page: { view },\n      viewport: {\n        rawDims: { pageWidth, pageHeight, pageX, pageY },\n      },\n    } = this.#parent;\n    const popup = (this.#popup = document.createElement(\"div\"));\n    popup.className = \"popup\";\n\n    if (this.#color) {\n      const baseColor = (popup.style.outlineColor = Util.makeHexColor(\n        ...this.#color\n      ));\n      if (\n        (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")\n      ) {\n        popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\n      } else {\n        // color-mix isn't supported in some browsers hence this version.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix#browser_compatibility\n        // TODO: Use color-mix when it's supported everywhere.\n        // Enlighten the color.\n        const BACKGROUND_ENLIGHT = 0.7;\n        popup.style.backgroundColor = Util.makeHexColor(\n          ...this.#color.map(c =>\n            Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)\n          )\n        );\n      }\n    }\n\n    const header = document.createElement(\"span\");\n    header.className = \"header\";\n    const title = document.createElement(\"h1\");\n    header.append(title);\n    ({ dir: title.dir, str: title.textContent } = this.#titleObj);\n    popup.append(header);\n\n    if (this.#dateTimePromise) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.classList.add(\"popupDate\");\n      this.#dateTimePromise.then(localized => {\n        modificationDate.textContent = localized;\n      });\n      header.append(modificationDate);\n    }\n\n    const contentsObj = this.#contentsObj;\n    const richText = this.#richText;\n    if (\n      richText?.str &&\n      (!contentsObj?.str || contentsObj.str === richText.str)\n    ) {\n      XfaLayer.render({\n        xfaHtml: richText.html,\n        intent: \"richText\",\n        div: popup,\n      });\n      popup.lastChild.classList.add(\"richText\", \"popupContent\");\n    } else {\n      const contents = this._formatContents(contentsObj);\n      popup.append(contents);\n    }\n\n    let useParentRect = !!this.#parentRect;\n    let rect = useParentRect ? this.#parentRect : this.#rect;\n    for (const element of this.#elements) {\n      if (!rect || Util.intersect(element.data.rect, rect) !== null) {\n        rect = element.data.rect;\n        useParentRect = true;\n        break;\n      }\n    }\n\n    const normalizedRect = Util.normalizeRect([\n      rect[0],\n      view[3] - rect[1] + view[1],\n      rect[2],\n      view[3] - rect[3] + view[1],\n    ]);\n\n    const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\n    const parentWidth = useParentRect\n      ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION\n      : 0;\n    const popupLeft = normalizedRect[0] + parentWidth;\n    const popupTop = normalizedRect[1];\n\n    const { style } = this.#container;\n    style.left = `${(100 * (popupLeft - pageX)) / pageWidth}%`;\n    style.top = `${(100 * (popupTop - pageY)) / pageHeight}%`;\n\n    this.#container.append(popup);\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.classList.add(\"popupContent\");\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.append(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.append(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  #keyDown(event) {\n    if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n      return;\n    }\n\n    if (event.key === \"Enter\" || (event.key === \"Escape\" && this.#pinned)) {\n      this.#toggle();\n    }\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   */\n  #toggle() {\n    this.#pinned = !this.#pinned;\n    if (this.#pinned) {\n      this.#show();\n      this.#container.addEventListener(\"click\", this.#boundToggle);\n      this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\n    } else {\n      this.#hide();\n      this.#container.removeEventListener(\"click\", this.#boundToggle);\n      this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\n    }\n  }\n\n  /**\n   * Show the popup.\n   */\n  #show() {\n    if (!this.#popup) {\n      this.render();\n    }\n    if (!this.isVisible) {\n      this.#container.hidden = false;\n      this.#container.style.zIndex =\n        parseInt(this.#container.style.zIndex) + 1000;\n    } else if (this.#pinned) {\n      this.#container.classList.add(\"focused\");\n    }\n  }\n\n  /**\n   * Hide the popup.\n   */\n  #hide() {\n    this.#container.classList.remove(\"focused\");\n    if (this.#pinned || !this.isVisible) {\n      return;\n    }\n    this.#container.hidden = true;\n    this.#container.style.zIndex =\n      parseInt(this.#container.style.zIndex) - 1000;\n  }\n\n  forceHide() {\n    this.#wasVisible = this.isVisible;\n    if (!this.#wasVisible) {\n      return;\n    }\n    this.#container.hidden = true;\n  }\n\n  maybeShow() {\n    if (!this.#wasVisible) {\n      return;\n    }\n    this.#wasVisible = false;\n    this.#container.hidden = false;\n  }\n\n  get isVisible() {\n    return this.#container.hidden === false;\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n    this.textContent = parameters.data.textContent;\n    this.textPosition = parameters.data.textPosition;\n    this.annotationEditorType = AnnotationEditorType.FREETEXT;\n  }\n\n  render() {\n    this.container.classList.add(\"freeTextAnnotation\");\n\n    if (this.textContent) {\n      const content = document.createElement(\"div\");\n      content.classList.add(\"annotationTextContent\");\n      content.setAttribute(\"role\", \"comment\");\n      for (const line of this.textContent) {\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.textContent = line;\n        content.append(lineSpan);\n      }\n      this.container.append(content);\n    }\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this._editOnDoubleClick();\n\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  #line = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"lineAnnotation\");\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = (this.#line = this.svgFactory.createElement(\"svg:line\"));\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n    line.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#line;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  #square = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"squareAnnotation\");\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = (this.#square = this.svgFactory.createElement(\"svg:rect\"));\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#square;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  #circle = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"circleAnnotation\");\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = (this.#circle =\n      this.svgFactory.createElement(\"svg:ellipse\"));\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#circle;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  #polyline = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.classList.add(this.containerClassName);\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = (this.#polyline = this.svgFactory.createElement(\n      this.svgElementName\n    ));\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#polyline;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"caretAnnotation\");\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  #polylines = [];\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n    this.annotationEditorType = AnnotationEditorType.INK;\n  }\n\n  render() {\n    this.container.classList.add(this.containerClassName);\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      this.#polylines.push(polyline);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      if (!data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n\n      svg.append(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#polylines;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"highlightAnnotation\");\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"underlineAnnotation\");\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"squigglyAnnotation\");\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"strikeoutAnnotation\");\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"stampAnnotation\");\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  #trigger = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename, /* onlyStripPath = */ true);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.classList.add(\"fileAttachmentAnnotation\");\n\n    const { container, data } = this;\n    let trigger;\n    if (data.hasAppearance || data.fillAlpha === 0) {\n      trigger = document.createElement(\"div\");\n    } else {\n      // Unfortunately it seems that it's not clearly specified exactly what\n      // names are actually valid, since Table 184 contains:\n      //   Conforming readers shall provide predefined icon appearances for at\n      //   least the following standard names: GraphPushPin, PaperclipTag.\n      //   Additional names may be supported as well. Default value: PushPin.\n      trigger = document.createElement(\"img\");\n      trigger.src = `${this.imageResourcesPath}annotation-${\n        /paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"\n      }.svg`;\n\n      if (data.fillAlpha && data.fillAlpha < 1) {\n        trigger.style = `filter: opacity(${Math.round(\n          data.fillAlpha * 100\n        )}%);`;\n\n        if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n          this.container.classList.add(\"hasFillAlpha\");\n        }\n      }\n    }\n    trigger.addEventListener(\"dblclick\", this.#download.bind(this));\n    this.#trigger = trigger;\n\n    const { isMac } = FeatureTest.platform;\n    container.addEventListener(\"keydown\", evt => {\n      if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\n        this.#download();\n      }\n    });\n\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    } else {\n      trigger.classList.add(\"popupTriggerArea\");\n    }\n\n    container.append(trigger);\n    return container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#trigger;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   */\n  #download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPageProxy} page\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n * @property {Object<string, Array<Object>> | null} [fieldObjects]\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap]\n * @property {TextAccessibilityManager} [accessibilityManager]\n */\n\n/**\n * Manage the layer containing all the annotations.\n */\nclass AnnotationLayer {\n  #accessibilityManager = null;\n\n  #annotationCanvasMap = null;\n\n  #editableAnnotations = new Map();\n\n  constructor({\n    div,\n    accessibilityManager,\n    annotationCanvasMap,\n    l10n,\n    page,\n    viewport,\n  }) {\n    this.div = div;\n    this.#accessibilityManager = accessibilityManager;\n    this.#annotationCanvasMap = annotationCanvasMap;\n    this.l10n = l10n;\n    this.page = page;\n    this.viewport = viewport;\n    this.zIndex = 0;\n\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"GENERIC && !TESTING\")\n    ) {\n      this.l10n ||= NullL10n;\n    }\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"showPopups\", {\n        value: async () => {\n          for (const show of this.popupShow) {\n            await show();\n          }\n        },\n      });\n      this.popupShow = [];\n    }\n  }\n\n  #appendElement(element, id) {\n    const contentElement = element.firstChild || element;\n    contentElement.id = `${AnnotationPrefix}${id}`;\n\n    this.div.append(element);\n    this.#accessibilityManager?.moveElementInDOM(\n      this.div,\n      element,\n      contentElement,\n      /* isRemovable = */ false\n    );\n  }\n\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @param {AnnotationLayerParameters} params\n   * @memberof AnnotationLayer\n   */\n  async render(params) {\n    const { annotations } = params;\n    const layer = this.div;\n    setLayerDimensions(layer, this.viewport);\n\n    const popupToElements = new Map();\n    const elementParams = {\n      data: null,\n      layer,\n      linkService: params.linkService,\n      downloadManager: params.downloadManager,\n      imageResourcesPath: params.imageResourcesPath || \"\",\n      renderForms: params.renderForms !== false,\n      svgFactory: new DOMSVGFactory(),\n      annotationStorage: params.annotationStorage || new AnnotationStorage(),\n      enableScripting: params.enableScripting === true,\n      hasJSActions: params.hasJSActions,\n      fieldObjects: params.fieldObjects,\n      parent: this,\n      elements: null,\n    };\n\n    for (const data of annotations) {\n      if (data.noHTML) {\n        continue;\n      }\n      const isPopupAnnotation = data.annotationType === AnnotationType.POPUP;\n      if (!isPopupAnnotation) {\n        const { width, height } = getRectDims(data.rect);\n        if (width <= 0 || height <= 0) {\n          continue; // Ignore empty annotations.\n        }\n      } else {\n        const elements = popupToElements.get(data.id);\n        if (!elements) {\n          // Ignore popup annotations without a corresponding annotation.\n          continue;\n        }\n        elementParams.elements = elements;\n      }\n      elementParams.data = data;\n      const element = AnnotationElementFactory.create(elementParams);\n\n      if (!element.isRenderable) {\n        continue;\n      }\n\n      if (!isPopupAnnotation && data.popupRef) {\n        const elements = popupToElements.get(data.popupRef);\n        if (!elements) {\n          popupToElements.set(data.popupRef, [element]);\n        } else {\n          elements.push(element);\n        }\n      }\n\n      if (element.annotationEditorType > 0) {\n        this.#editableAnnotations.set(element.data.id, element);\n      }\n\n      const rendered = element.render();\n      if (data.hidden) {\n        rendered.style.visibility = \"hidden\";\n      }\n      this.#appendElement(rendered, data.id);\n    }\n\n    this.#setAnnotationCanvasMap();\n\n    await this.l10n.translate(layer);\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @param {AnnotationLayerParameters} viewport\n   * @memberof AnnotationLayer\n   */\n  update({ viewport }) {\n    const layer = this.div;\n    this.viewport = viewport;\n    setLayerDimensions(layer, { rotation: viewport.rotation });\n\n    this.#setAnnotationCanvasMap();\n    layer.hidden = false;\n  }\n\n  #setAnnotationCanvasMap() {\n    if (!this.#annotationCanvasMap) {\n      return;\n    }\n    const layer = this.div;\n    for (const [id, canvas] of this.#annotationCanvasMap) {\n      const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\n      if (!element) {\n        continue;\n      }\n\n      const { firstChild } = element;\n      if (!firstChild) {\n        element.append(canvas);\n      } else if (firstChild.nodeName === \"CANVAS\") {\n        firstChild.replaceWith(canvas);\n      } else {\n        firstChild.before(canvas);\n      }\n    }\n    this.#annotationCanvasMap.clear();\n  }\n\n  getEditableAnnotations() {\n    return Array.from(this.#editableAnnotations.values());\n  }\n\n  getEditableAnnotation(id) {\n    return this.#editableAnnotations.get(id);\n  }\n}\n\nexport {\n  AnnotationLayer,\n  FreeTextAnnotationElement,\n  InkAnnotationElement,\n  StampAnnotationElement,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\nfunction scaleAndClamp(x) {\n  return Math.max(0, Math.min(255, 255 * x));\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_rgb([g]) {\n    g = scaleAndClamp(g);\n    return [g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_rgb(color) {\n    return color.map(scaleAndClamp);\n  }\n\n  static RGB_HTML(color) {\n    return `#${color.map(makeColorComp).join(\"\")}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static T_rgb() {\n    return [null];\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_rgb([c, y, m, k]) {\n    return [\n      scaleAndClamp(1 - Math.min(1, c + k)),\n      scaleAndClamp(1 - Math.min(1, m + k)),\n      scaleAndClamp(1 - Math.min(1, y + k)),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    const rgb = this.CMYK_RGB(components).slice(1);\n    return this.RGB_HTML(rgb);\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `web/` and\n *              `src/display/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\n/**\n * A subset of the l10n strings in the `l10n/en-US/viewer.properties` file.\n */\nconst DEFAULT_L10N_STRINGS = {\n  of_pages: \"of {{pagesCount}}\",\n  page_of_pages: \"({{pageNumber}} of {{pagesCount}})\",\n\n  document_properties_kb: \"{{size_kb}} KB ({{size_b}} bytes)\",\n  document_properties_mb: \"{{size_mb}} MB ({{size_b}} bytes)\",\n  document_properties_date_string: \"{{date}}, {{time}}\",\n  document_properties_page_size_unit_inches: \"in\",\n  document_properties_page_size_unit_millimeters: \"mm\",\n  document_properties_page_size_orientation_portrait: \"portrait\",\n  document_properties_page_size_orientation_landscape: \"landscape\",\n  document_properties_page_size_name_a3: \"A3\",\n  document_properties_page_size_name_a4: \"A4\",\n  document_properties_page_size_name_letter: \"Letter\",\n  document_properties_page_size_name_legal: \"Legal\",\n  document_properties_page_size_dimension_string:\n    \"{{width}} × {{height}} {{unit}} ({{orientation}})\",\n  document_properties_page_size_dimension_name_string:\n    \"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})\",\n  document_properties_linearized_yes: \"Yes\",\n  document_properties_linearized_no: \"No\",\n\n  additional_layers: \"Additional Layers\",\n  page_landmark: \"Page {{page}}\",\n  thumb_page_title: \"Page {{page}}\",\n  thumb_page_canvas: \"Thumbnail of Page {{page}}\",\n\n  find_reached_top: \"Reached top of document, continued from bottom\",\n  find_reached_bottom: \"Reached end of document, continued from top\",\n  \"find_match_count[one]\": \"{{current}} of {{total}} match\",\n  \"find_match_count[other]\": \"{{current}} of {{total}} matches\",\n  \"find_match_count_limit[one]\": \"More than {{limit}} match\",\n  \"find_match_count_limit[other]\": \"More than {{limit}} matches\",\n  find_not_found: \"Phrase not found\",\n\n  page_scale_width: \"Page Width\",\n  page_scale_fit: \"Page Fit\",\n  page_scale_auto: \"Automatic Zoom\",\n  page_scale_actual: \"Actual Size\",\n  page_scale_percent: \"{{scale}}%\",\n\n  loading_error: \"An error occurred while loading the PDF.\",\n  invalid_file_error: \"Invalid or corrupted PDF file.\",\n  missing_file_error: \"Missing PDF file.\",\n  unexpected_response_error: \"Unexpected server response.\",\n  rendering_error: \"An error occurred while rendering the page.\",\n\n  annotation_date_string: \"{{date}}, {{time}}\",\n\n  printing_not_supported:\n    \"Warning: Printing is not fully supported by this browser.\",\n  printing_not_ready: \"Warning: The PDF is not fully loaded for printing.\",\n  web_fonts_disabled:\n    \"Web fonts are disabled: unable to use embedded PDF fonts.\",\n\n  free_text2_default_content: \"Start typing…\",\n  editor_free_text2_aria_label: \"Text Editor\",\n  editor_ink2_aria_label: \"Draw Editor\",\n  editor_ink_canvas_aria_label: \"User-created image\",\n  editor_alt_text_button_label: \"Alt text\",\n  editor_alt_text_edit_button_label: \"Edit alt text\",\n  editor_alt_text_decorative_tooltip: \"Marked as decorative\",\n};\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) {\n  DEFAULT_L10N_STRINGS.print_progress_percent = \"{{progress}}%\";\n}\n\nfunction getL10nFallback(key, args) {\n  switch (key) {\n    case \"find_match_count\":\n      key = `find_match_count[${args.total === 1 ? \"one\" : \"other\"}]`;\n      break;\n    case \"find_match_count_limit\":\n      key = `find_match_count_limit[${args.limit === 1 ? \"one\" : \"other\"}]`;\n      break;\n  }\n  return DEFAULT_L10N_STRINGS[key] || \"\";\n}\n\n// Replaces {{arguments}} with their values.\nfunction formatL10nValue(text, args) {\n  if (!args) {\n    return text;\n  }\n  return text.replaceAll(/\\{\\{\\s*(\\w+)\\s*\\}\\}/g, (all, name) => {\n    return name in args ? args[name] : \"{{\" + name + \"}}\";\n  });\n}\n\n/**\n * No-op implementation of the localization service.\n * @implements {IL10n}\n */\nconst NullL10n = {\n  async getLanguage() {\n    return \"en-us\";\n  },\n\n  async getDirection() {\n    return \"ltr\";\n  },\n\n  async get(key, args = null, fallback = getL10nFallback(key, args)) {\n    return formatL10nValue(fallback, args);\n  },\n\n  async translate(element) {},\n};\n\nexport { getL10nFallback, NullL10n };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_storage\").AnnotationStorage} AnnotationStorage */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport { XfaText } from \"./xfa_text.js\";\n\n/**\n * @typedef {Object} XfaLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Object} xfaHtml\n * @property {AnnotationStorage} [annotationStorage]\n * @property {IPDFLinkService} linkService\n * @property {string} [intent] - (default value is 'display').\n */\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          html.setAttribute(\"value\", storedData.value);\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            } else if (option.attributes.hasOwnProperty(\"selected\")) {\n              delete option.attributes.selected;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      if (value === null || value === undefined) {\n        continue;\n      }\n\n      switch (key) {\n        case \"class\":\n          if (value.length) {\n            html.setAttribute(key, value.join(\" \"));\n          }\n          break;\n        case \"dataId\":\n          // We don't need to add dataId in the html object but it can\n          // be useful to know its value when writing printing tests:\n          // in this case, don't skip dataId to have its value.\n          break;\n        case \"id\":\n          html.setAttribute(\"data-element-id\", value);\n          break;\n        case \"style\":\n          Object.assign(html.style, value);\n          break;\n        case \"textContent\":\n          html.textContent = value;\n          break;\n        default:\n          if (!isHTMLAnchorElement || (key !== \"href\" && key !== \"newWindow\")) {\n            html.setAttribute(key, value);\n          }\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      linkService.addLinkAttributes(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure to overwrite any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  /**\n   * Render the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfaHtml;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.append(rootHtml);\n\n    if (parameters.viewport) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      rootDiv.style.transform = transform;\n    }\n\n    // Set defaults.\n    if (intent !== \"richText\") {\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n    }\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack.at(-1);\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack.at(-1)[1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.append(node);\n        continue;\n      }\n\n      const childHtml = child?.attributes?.xmlns\n        ? document.createElementNS(child.attributes.xmlns, name)\n        : document.createElement(name);\n\n      html.append(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.append(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  Util,\n} from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { InkAnnotationElement } from \"../annotation_layer.js\";\nimport { noContextMenu } from \"../display_utils.js\";\nimport { opacityToHex } from \"./tools.js\";\n\n/**\n * Basic draw editor in order to generate an Ink annotation.\n */\nclass InkEditor extends AnnotationEditor {\n  #baseHeight = 0;\n\n  #baseWidth = 0;\n\n  #boundCanvasPointermove = this.canvasPointermove.bind(this);\n\n  #boundCanvasPointerleave = this.canvasPointerleave.bind(this);\n\n  #boundCanvasPointerup = this.canvasPointerup.bind(this);\n\n  #boundCanvasPointerdown = this.canvasPointerdown.bind(this);\n\n  #currentPath2D = new Path2D();\n\n  #disableEditing = false;\n\n  #hasSomethingToDraw = false;\n\n  #isCanvasInitialized = false;\n\n  #observer = null;\n\n  #realWidth = 0;\n\n  #realHeight = 0;\n\n  #requestFrameCallback = null;\n\n  static _defaultColor = null;\n\n  static _defaultOpacity = 1;\n\n  static _defaultThickness = 1;\n\n  static _type = \"ink\";\n\n  constructor(params) {\n    super({ ...params, name: \"inkEditor\" });\n    this.color = params.color || null;\n    this.thickness = params.thickness || null;\n    this.opacity = params.opacity || null;\n    this.paths = [];\n    this.bezierPath2D = [];\n    this.allRawPaths = [];\n    this.currentPath = [];\n    this.scaleFactor = 1;\n    this.translationX = this.translationY = 0;\n    this.x = 0;\n    this.y = 0;\n    this._willKeepAspectRatio = true;\n  }\n\n  /** @inheritdoc */\n  static initialize(l10n) {\n    AnnotationEditor.initialize(l10n, {\n      strings: [\"editor_ink_canvas_aria_label\", \"editor_ink2_aria_label\"],\n    });\n  }\n\n  /** @inheritdoc */\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        InkEditor._defaultThickness = value;\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        InkEditor._defaultColor = value;\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        InkEditor._defaultOpacity = value / 100;\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        this.#updateThickness(value);\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        this.#updateColor(value);\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        this.#updateOpacity(value);\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  static get defaultPropertiesToUpdate() {\n    return [\n      [AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness],\n      [\n        AnnotationEditorParamsType.INK_COLOR,\n        InkEditor._defaultColor || AnnotationEditor._defaultLineColor,\n      ],\n      [\n        AnnotationEditorParamsType.INK_OPACITY,\n        Math.round(InkEditor._defaultOpacity * 100),\n      ],\n    ];\n  }\n\n  /** @inheritdoc */\n  get propertiesToUpdate() {\n    return [\n      [\n        AnnotationEditorParamsType.INK_THICKNESS,\n        this.thickness || InkEditor._defaultThickness,\n      ],\n      [\n        AnnotationEditorParamsType.INK_COLOR,\n        this.color ||\n          InkEditor._defaultColor ||\n          AnnotationEditor._defaultLineColor,\n      ],\n      [\n        AnnotationEditorParamsType.INK_OPACITY,\n        Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity)),\n      ],\n    ];\n  }\n\n  /**\n   * Update the thickness and make this action undoable.\n   * @param {number} thickness\n   */\n  #updateThickness(thickness) {\n    const savedThickness = this.thickness;\n    this.addCommands({\n      cmd: () => {\n        this.thickness = thickness;\n        this.#fitToContent();\n      },\n      undo: () => {\n        this.thickness = savedThickness;\n        this.#fitToContent();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_THICKNESS,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the color and make this action undoable.\n   * @param {string} color\n   */\n  #updateColor(color) {\n    const savedColor = this.color;\n    this.addCommands({\n      cmd: () => {\n        this.color = color;\n        this.#redraw();\n      },\n      undo: () => {\n        this.color = savedColor;\n        this.#redraw();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_COLOR,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the opacity and make this action undoable.\n   * @param {number} opacity\n   */\n  #updateOpacity(opacity) {\n    opacity /= 100;\n    const savedOpacity = this.opacity;\n    this.addCommands({\n      cmd: () => {\n        this.opacity = opacity;\n        this.#redraw();\n      },\n      undo: () => {\n        this.opacity = savedOpacity;\n        this.#redraw();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_OPACITY,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (!this.canvas) {\n      this.#createCanvas();\n      this.#createObserver();\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilding it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n      this.#setCanvasDims();\n    }\n    this.#fitToContent();\n  }\n\n  /** @inheritdoc */\n  remove() {\n    if (this.canvas === null) {\n      return;\n    }\n\n    if (!this.isEmpty()) {\n      this.commit();\n    }\n\n    // Destroy the canvas.\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.remove();\n    this.canvas = null;\n\n    this.#observer.disconnect();\n    this.#observer = null;\n\n    super.remove();\n  }\n\n  setParent(parent) {\n    if (!this.parent && parent) {\n      // We've a parent hence the rescale will be handled thanks to the\n      // ResizeObserver.\n      this._uiManager.removeShouldRescale(this);\n    } else if (this.parent && parent === null) {\n      // The editor is removed from the DOM, hence we handle the rescale thanks\n      // to the onScaleChanging callback.\n      // This way, it'll be saved/printed correctly.\n      this._uiManager.addShouldRescale(this);\n    }\n    super.setParent(parent);\n  }\n\n  onScaleChanging() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const width = this.width * parentWidth;\n    const height = this.height * parentHeight;\n    this.setDimensions(width, height);\n  }\n\n  /** @inheritdoc */\n  enableEditMode() {\n    if (this.#disableEditing || this.canvas === null) {\n      return;\n    }\n\n    super.enableEditMode();\n    this._isDraggable = false;\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n  }\n\n  /** @inheritdoc */\n  disableEditMode() {\n    if (!this.isInEditMode() || this.canvas === null) {\n      return;\n    }\n\n    super.disableEditMode();\n    this._isDraggable = !this.isEmpty();\n    this.div.classList.remove(\"editing\");\n\n    this.canvas.removeEventListener(\n      \"pointerdown\",\n      this.#boundCanvasPointerdown\n    );\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    this._isDraggable = !this.isEmpty();\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return (\n      this.paths.length === 0 ||\n      (this.paths.length === 1 && this.paths[0].length === 0)\n    );\n  }\n\n  #getInitialBBox() {\n    const {\n      parentRotation,\n      parentDimensions: [width, height],\n    } = this;\n    switch (parentRotation) {\n      case 90:\n        return [0, height, height, width];\n      case 180:\n        return [width, height, width, height];\n      case 270:\n        return [width, 0, height, width];\n      default:\n        return [0, 0, width, height];\n    }\n  }\n\n  /**\n   * Set line styles.\n   */\n  #setStroke() {\n    const { ctx, color, opacity, thickness, parentScale, scaleFactor } = this;\n    ctx.lineWidth = (thickness * parentScale) / scaleFactor;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.miterLimit = 10;\n    ctx.strokeStyle = `${color}${opacityToHex(opacity)}`;\n  }\n\n  /**\n   * Start to draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #startDrawing(x, y) {\n    this.canvas.addEventListener(\"contextmenu\", noContextMenu);\n    this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n    this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\n    this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\n    this.canvas.removeEventListener(\n      \"pointerdown\",\n      this.#boundCanvasPointerdown\n    );\n\n    this.isEditing = true;\n    if (!this.#isCanvasInitialized) {\n      this.#isCanvasInitialized = true;\n      this.#setCanvasDims();\n      this.thickness ||= InkEditor._defaultThickness;\n      this.color ||=\n        InkEditor._defaultColor || AnnotationEditor._defaultLineColor;\n      this.opacity ??= InkEditor._defaultOpacity;\n    }\n    this.currentPath.push([x, y]);\n    this.#hasSomethingToDraw = false;\n    this.#setStroke();\n\n    this.#requestFrameCallback = () => {\n      this.#drawPoints();\n      if (this.#requestFrameCallback) {\n        window.requestAnimationFrame(this.#requestFrameCallback);\n      }\n    };\n    window.requestAnimationFrame(this.#requestFrameCallback);\n  }\n\n  /**\n   * Draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #draw(x, y) {\n    const [lastX, lastY] = this.currentPath.at(-1);\n    if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n      return;\n    }\n    const currentPath = this.currentPath;\n    let path2D = this.#currentPath2D;\n    currentPath.push([x, y]);\n    this.#hasSomethingToDraw = true;\n\n    if (currentPath.length <= 2) {\n      path2D.moveTo(...currentPath[0]);\n      path2D.lineTo(x, y);\n      return;\n    }\n\n    if (currentPath.length === 3) {\n      this.#currentPath2D = path2D = new Path2D();\n      path2D.moveTo(...currentPath[0]);\n    }\n\n    this.#makeBezierCurve(\n      path2D,\n      ...currentPath.at(-3),\n      ...currentPath.at(-2),\n      x,\n      y\n    );\n  }\n\n  #endPath() {\n    if (this.currentPath.length === 0) {\n      return;\n    }\n    const lastPoint = this.currentPath.at(-1);\n    this.#currentPath2D.lineTo(...lastPoint);\n  }\n\n  /**\n   * Stop to draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #stopDrawing(x, y) {\n    this.#requestFrameCallback = null;\n\n    x = Math.min(Math.max(x, 0), this.canvas.width);\n    y = Math.min(Math.max(y, 0), this.canvas.height);\n\n    this.#draw(x, y);\n    this.#endPath();\n\n    // Interpolate the path entered by the user with some\n    // Bezier's curves in order to have a smoother path and\n    // to reduce the data size used to draw it in the PDF.\n    let bezier;\n    if (this.currentPath.length !== 1) {\n      bezier = this.#generateBezierPoints();\n    } else {\n      // We have only one point finally.\n      const xy = [x, y];\n      bezier = [[xy, xy.slice(), xy.slice(), xy]];\n    }\n    const path2D = this.#currentPath2D;\n    const currentPath = this.currentPath;\n    this.currentPath = [];\n    this.#currentPath2D = new Path2D();\n\n    const cmd = () => {\n      this.allRawPaths.push(currentPath);\n      this.paths.push(bezier);\n      this.bezierPath2D.push(path2D);\n      this.rebuild();\n    };\n\n    const undo = () => {\n      this.allRawPaths.pop();\n      this.paths.pop();\n      this.bezierPath2D.pop();\n      if (this.paths.length === 0) {\n        this.remove();\n      } else {\n        if (!this.canvas) {\n          this.#createCanvas();\n          this.#createObserver();\n        }\n        this.#fitToContent();\n      }\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  #drawPoints() {\n    if (!this.#hasSomethingToDraw) {\n      return;\n    }\n    this.#hasSomethingToDraw = false;\n\n    const thickness = Math.ceil(this.thickness * this.parentScale);\n    const lastPoints = this.currentPath.slice(-3);\n    const x = lastPoints.map(xy => xy[0]);\n    const y = lastPoints.map(xy => xy[1]);\n    const xMin = Math.min(...x) - thickness;\n    const xMax = Math.max(...x) + thickness;\n    const yMin = Math.min(...y) - thickness;\n    const yMax = Math.max(...y) + thickness;\n\n    const { ctx } = this;\n    ctx.save();\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      // In Chrome, the clip() method doesn't work as expected.\n      ctx.clearRect(xMin, yMin, xMax - xMin, yMax - yMin);\n      ctx.beginPath();\n      ctx.rect(xMin, yMin, xMax - xMin, yMax - yMin);\n      ctx.clip();\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    for (const path of this.bezierPath2D) {\n      ctx.stroke(path);\n    }\n    ctx.stroke(this.#currentPath2D);\n\n    ctx.restore();\n  }\n\n  #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\n    const prevX = (x0 + x1) / 2;\n    const prevY = (y0 + y1) / 2;\n    const x3 = (x1 + x2) / 2;\n    const y3 = (y1 + y2) / 2;\n\n    path2D.bezierCurveTo(\n      prevX + (2 * (x1 - prevX)) / 3,\n      prevY + (2 * (y1 - prevY)) / 3,\n      x3 + (2 * (x1 - x3)) / 3,\n      y3 + (2 * (y1 - y3)) / 3,\n      x3,\n      y3\n    );\n  }\n\n  #generateBezierPoints() {\n    const path = this.currentPath;\n    if (path.length <= 2) {\n      return [[path[0], path[0], path.at(-1), path.at(-1)]];\n    }\n\n    const bezierPoints = [];\n    let i;\n    let [x0, y0] = path[0];\n    for (i = 1; i < path.length - 2; i++) {\n      const [x1, y1] = path[i];\n      const [x2, y2] = path[i + 1];\n      const x3 = (x1 + x2) / 2;\n      const y3 = (y1 + y2) / 2;\n\n      // The quadratic is: [[x0, y0], [x1, y1], [x3, y3]].\n      // Convert the quadratic to a cubic\n      // (see https://fontforge.org/docs/techref/bezier.html#converting-truetype-to-postscript)\n      const control1 = [x0 + (2 * (x1 - x0)) / 3, y0 + (2 * (y1 - y0)) / 3];\n      const control2 = [x3 + (2 * (x1 - x3)) / 3, y3 + (2 * (y1 - y3)) / 3];\n\n      bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\n\n      [x0, y0] = [x3, y3];\n    }\n\n    const [x1, y1] = path[i];\n    const [x2, y2] = path[i + 1];\n\n    // The quadratic is: [[x0, y0], [x1, y1], [x2, y2]].\n    const control1 = [x0 + (2 * (x1 - x0)) / 3, y0 + (2 * (y1 - y0)) / 3];\n    const control2 = [x2 + (2 * (x1 - x2)) / 3, y2 + (2 * (y1 - y2)) / 3];\n\n    bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\n    return bezierPoints;\n  }\n\n  /**\n   * Redraw all the paths.\n   */\n  #redraw() {\n    if (this.isEmpty()) {\n      this.#updateTransform();\n      return;\n    }\n    this.#setStroke();\n\n    const { canvas, ctx } = this;\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.#updateTransform();\n\n    for (const path of this.bezierPath2D) {\n      ctx.stroke(path);\n    }\n  }\n\n  /**\n   * Commit the curves we have in this editor.\n   */\n  commit() {\n    if (this.#disableEditing) {\n      return;\n    }\n\n    super.commit();\n\n    this.isEditing = false;\n    this.disableEditMode();\n\n    // This editor must be on top of the main ink editor.\n    this.setInForeground();\n\n    this.#disableEditing = true;\n    this.div.classList.add(\"disabled\");\n\n    this.#fitToContent(/* firstTime = */ true);\n    this.makeResizable();\n\n    this.parent.addInkEditorIfNeeded(/* isCommitting = */ true);\n\n    // When commiting, the position of this editor is changed, hence we must\n    // move it to the right position in the DOM.\n    this.moveInDOM();\n    this.div.focus({\n      preventScroll: true /* See issue #15744 */,\n    });\n  }\n\n  /** @inheritdoc */\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    super.focusin(event);\n    this.enableEditMode();\n  }\n\n  /**\n   * onpointerdown callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerdown(event) {\n    if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n      return;\n    }\n\n    // We want to draw on top of any other editors.\n    // Since it's the last child, there's no need to give it a higher z-index.\n    this.setInForeground();\n\n    event.preventDefault();\n\n    if (event.type !== \"mouse\") {\n      this.div.focus();\n    }\n\n    this.#startDrawing(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * onpointermove callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointermove(event) {\n    event.preventDefault();\n    this.#draw(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * onpointerup callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerup(event) {\n    event.preventDefault();\n    this.#endDrawing(event);\n  }\n\n  /**\n   * onpointerleave callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerleave(event) {\n    this.#endDrawing(event);\n  }\n\n  /**\n   * End the drawing.\n   * @param {PointerEvent} event\n   */\n  #endDrawing(event) {\n    this.canvas.removeEventListener(\n      \"pointerleave\",\n      this.#boundCanvasPointerleave\n    );\n    this.canvas.removeEventListener(\n      \"pointermove\",\n      this.#boundCanvasPointermove\n    );\n    this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n\n    // Slight delay to avoid the context menu to appear (it can happen on a long\n    // tap with a pen).\n    setTimeout(() => {\n      this.canvas.removeEventListener(\"contextmenu\", noContextMenu);\n    }, 10);\n\n    this.#stopDrawing(event.offsetX, event.offsetY);\n\n    this.addToAnnotationStorage();\n\n    // Since the ink editor covers all of the page and we want to be able\n    // to select another editor, we just put this one in the background.\n    this.setInBackground();\n  }\n\n  /**\n   * Create the canvas element.\n   */\n  #createCanvas() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.className = \"inkEditorCanvas\";\n\n    AnnotationEditor._l10nPromise\n      .get(\"editor_ink_canvas_aria_label\")\n      .then(msg => this.canvas?.setAttribute(\"aria-label\", msg));\n    this.div.append(this.canvas);\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  /**\n   * Create the resize observer.\n   */\n  #createObserver() {\n    this.#observer = new ResizeObserver(entries => {\n      const rect = entries[0].contentRect;\n      if (rect.width && rect.height) {\n        this.setDimensions(rect.width, rect.height);\n      }\n    });\n    this.#observer.observe(this.div);\n  }\n\n  /** @inheritdoc */\n  get isResizable() {\n    return !this.isEmpty() && this.#disableEditing;\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n\n    AnnotationEditor._l10nPromise\n      .get(\"editor_ink2_aria_label\")\n      .then(msg => this.div?.setAttribute(\"aria-label\", msg));\n\n    const [x, y, w, h] = this.#getInitialBBox();\n    this.setAt(x, y, 0, 0);\n    this.setDims(w, h);\n\n    this.#createCanvas();\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\n      this.setAt(\n        baseX * parentWidth,\n        baseY * parentHeight,\n        this.width * parentWidth,\n        this.height * parentHeight\n      );\n      this.#isCanvasInitialized = true;\n      this.#setCanvasDims();\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\n      this.#redraw();\n      this.div.classList.add(\"disabled\");\n    } else {\n      this.div.classList.add(\"editing\");\n      this.enableEditMode();\n    }\n\n    this.#createObserver();\n\n    return this.div;\n  }\n\n  #setCanvasDims() {\n    if (!this.#isCanvasInitialized) {\n      return;\n    }\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.canvas.width = Math.ceil(this.width * parentWidth);\n    this.canvas.height = Math.ceil(this.height * parentHeight);\n    this.#updateTransform();\n  }\n\n  /**\n   * When the dimensions of the div change the inner canvas must\n   * renew its dimensions, hence it must redraw its own contents.\n   * @param {number} width - the new width of the div\n   * @param {number} height - the new height of the div\n   * @returns\n   */\n  setDimensions(width, height) {\n    const roundedWidth = Math.round(width);\n    const roundedHeight = Math.round(height);\n    if (\n      this.#realWidth === roundedWidth &&\n      this.#realHeight === roundedHeight\n    ) {\n      return;\n    }\n\n    this.#realWidth = roundedWidth;\n    this.#realHeight = roundedHeight;\n\n    this.canvas.style.visibility = \"hidden\";\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n    this.fixAndSetPosition();\n\n    if (this.#disableEditing) {\n      this.#setScaleFactor(width, height);\n    }\n\n    this.#setCanvasDims();\n    this.#redraw();\n\n    this.canvas.style.visibility = \"visible\";\n\n    // For any reason the dimensions couldn't be in percent but in pixels, hence\n    // we must fix them.\n    this.fixDims();\n  }\n\n  #setScaleFactor(width, height) {\n    const padding = this.#getPadding();\n    const scaleFactorW = (width - padding) / this.#baseWidth;\n    const scaleFactorH = (height - padding) / this.#baseHeight;\n    this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n  }\n\n  /**\n   * Update the canvas transform.\n   */\n  #updateTransform() {\n    const padding = this.#getPadding() / 2;\n    this.ctx.setTransform(\n      this.scaleFactor,\n      0,\n      0,\n      this.scaleFactor,\n      this.translationX * this.scaleFactor + padding,\n      this.translationY * this.scaleFactor + padding\n    );\n  }\n\n  /**\n   * Convert into a Path2D.\n   * @param {Array<Array<number>>} bezier\n   * @returns {Path2D}\n   */\n  static #buildPath2D(bezier) {\n    const path2D = new Path2D();\n    for (let i = 0, ii = bezier.length; i < ii; i++) {\n      const [first, control1, control2, second] = bezier[i];\n      if (i === 0) {\n        path2D.moveTo(...first);\n      }\n      path2D.bezierCurveTo(\n        control1[0],\n        control1[1],\n        control2[0],\n        control2[1],\n        second[0],\n        second[1]\n      );\n    }\n    return path2D;\n  }\n\n  static #toPDFCoordinates(points, rect, rotation) {\n    const [blX, blY, trX, trY] = rect;\n\n    switch (rotation) {\n      case 0:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] += blX;\n          points[i + 1] = trY - points[i + 1];\n        }\n        break;\n      case 90:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = points[i + 1] + blX;\n          points[i + 1] = x + blY;\n        }\n        break;\n      case 180:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] = trX - points[i];\n          points[i + 1] += blY;\n        }\n        break;\n      case 270:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = trX - points[i + 1];\n          points[i + 1] = trY - x;\n        }\n        break;\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n    return points;\n  }\n\n  static #fromPDFCoordinates(points, rect, rotation) {\n    const [blX, blY, trX, trY] = rect;\n\n    switch (rotation) {\n      case 0:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] -= blX;\n          points[i + 1] = trY - points[i + 1];\n        }\n        break;\n      case 90:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = points[i + 1] - blY;\n          points[i + 1] = x - blX;\n        }\n        break;\n      case 180:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] = trX - points[i];\n          points[i + 1] -= blY;\n        }\n        break;\n      case 270:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = trY - points[i + 1];\n          points[i + 1] = trX - x;\n        }\n        break;\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n    return points;\n  }\n\n  /**\n   * Transform and serialize the paths.\n   * @param {number} s - scale factor\n   * @param {number} tx - abscissa of the translation\n   * @param {number} ty - ordinate of the translation\n   * @param {Array<number>} rect - the bounding box of the annotation\n   */\n  #serializePaths(s, tx, ty, rect) {\n    const paths = [];\n    const padding = this.thickness / 2;\n    const shiftX = s * tx + padding;\n    const shiftY = s * ty + padding;\n    for (const bezier of this.paths) {\n      const buffer = [];\n      const points = [];\n      for (let j = 0, jj = bezier.length; j < jj; j++) {\n        const [first, control1, control2, second] = bezier[j];\n        const p10 = s * first[0] + shiftX;\n        const p11 = s * first[1] + shiftY;\n        const p20 = s * control1[0] + shiftX;\n        const p21 = s * control1[1] + shiftY;\n        const p30 = s * control2[0] + shiftX;\n        const p31 = s * control2[1] + shiftY;\n        const p40 = s * second[0] + shiftX;\n        const p41 = s * second[1] + shiftY;\n\n        if (j === 0) {\n          buffer.push(p10, p11);\n          points.push(p10, p11);\n        }\n        buffer.push(p20, p21, p30, p31, p40, p41);\n        points.push(p20, p21);\n        if (j === jj - 1) {\n          points.push(p40, p41);\n        }\n      }\n      paths.push({\n        bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),\n        points: InkEditor.#toPDFCoordinates(points, rect, this.rotation),\n      });\n    }\n\n    return paths;\n  }\n\n  /**\n   * Get the bounding box containing all the paths.\n   * @returns {Array<number>}\n   */\n  #getBbox() {\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let yMin = Infinity;\n    let yMax = -Infinity;\n\n    for (const path of this.paths) {\n      for (const [first, control1, control2, second] of path) {\n        const bbox = Util.bezierBoundingBox(\n          ...first,\n          ...control1,\n          ...control2,\n          ...second\n        );\n        xMin = Math.min(xMin, bbox[0]);\n        yMin = Math.min(yMin, bbox[1]);\n        xMax = Math.max(xMax, bbox[2]);\n        yMax = Math.max(yMax, bbox[3]);\n      }\n    }\n\n    return [xMin, yMin, xMax, yMax];\n  }\n\n  /**\n   * The bounding box is computed with null thickness, so we must take\n   * it into account for the display.\n   * It corresponds to the total padding, hence it should be divided by 2\n   * in order to have left/right paddings.\n   * @returns {number}\n   */\n  #getPadding() {\n    return this.#disableEditing\n      ? Math.ceil(this.thickness * this.parentScale)\n      : 0;\n  }\n\n  /**\n   * Set the div position and dimensions in order to fit to\n   * the bounding box of the contents.\n   * @returns {undefined}\n   */\n  #fitToContent(firstTime = false) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    if (!this.#disableEditing) {\n      this.#redraw();\n      return;\n    }\n\n    const bbox = this.#getBbox();\n    const padding = this.#getPadding();\n    this.#baseWidth = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n    this.#baseHeight = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n\n    const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\n    const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n\n    this.setAspectRatio(width, height);\n\n    const prevTranslationX = this.translationX;\n    const prevTranslationY = this.translationY;\n\n    this.translationX = -bbox[0];\n    this.translationY = -bbox[1];\n    this.#setCanvasDims();\n    this.#redraw();\n\n    this.#realWidth = width;\n    this.#realHeight = height;\n\n    this.setDims(width, height);\n    const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n    this.translate(\n      prevTranslationX - this.translationX - unscaledPadding,\n      prevTranslationY - this.translationY - unscaledPadding\n    );\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    if (data instanceof InkAnnotationElement) {\n      return null;\n    }\n    const editor = super.deserialize(data, parent, uiManager);\n\n    editor.thickness = data.thickness;\n    editor.color = Util.makeHexColor(...data.color);\n    editor.opacity = data.opacity;\n\n    const [pageWidth, pageHeight] = editor.pageDimensions;\n    const width = editor.width * pageWidth;\n    const height = editor.height * pageHeight;\n    const scaleFactor = editor.parentScale;\n    const padding = data.thickness / 2;\n\n    editor.#disableEditing = true;\n    editor.#realWidth = Math.round(width);\n    editor.#realHeight = Math.round(height);\n\n    const { paths, rect, rotation } = data;\n\n    for (let { bezier } of paths) {\n      bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);\n      const path = [];\n      editor.paths.push(path);\n      let p0 = scaleFactor * (bezier[0] - padding);\n      let p1 = scaleFactor * (bezier[1] - padding);\n      for (let i = 2, ii = bezier.length; i < ii; i += 6) {\n        const p10 = scaleFactor * (bezier[i] - padding);\n        const p11 = scaleFactor * (bezier[i + 1] - padding);\n        const p20 = scaleFactor * (bezier[i + 2] - padding);\n        const p21 = scaleFactor * (bezier[i + 3] - padding);\n        const p30 = scaleFactor * (bezier[i + 4] - padding);\n        const p31 = scaleFactor * (bezier[i + 5] - padding);\n        path.push([\n          [p0, p1],\n          [p10, p11],\n          [p20, p21],\n          [p30, p31],\n        ]);\n        p0 = p30;\n        p1 = p31;\n      }\n      const path2D = this.#buildPath2D(path);\n      editor.bezierPath2D.push(path2D);\n    }\n\n    const bbox = editor.#getBbox();\n    editor.#baseWidth = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n    editor.#baseHeight = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n    editor.#setScaleFactor(width, height);\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const rect = this.getRect(0, 0);\n    const color = AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n\n    return {\n      annotationType: AnnotationEditorType.INK,\n      color,\n      thickness: this.thickness,\n      opacity: this.opacity,\n      paths: this.#serializePaths(\n        this.scaleFactor / this.parentScale,\n        this.translationX,\n        this.translationY,\n        rect\n      ),\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n      structTreeParentId: this._structTreeParentId,\n    };\n  }\n}\n\nexport { InkEditor };\n","/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnnotationEditorType, shadow } from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { PixelsPerInch } from \"../display_utils.js\";\nimport { StampAnnotationElement } from \"../annotation_layer.js\";\n\n/**\n * Basic text editor in order to create a FreeTex annotation.\n */\nclass StampEditor extends AnnotationEditor {\n  #bitmap = null;\n\n  #bitmapId = null;\n\n  #bitmapPromise = null;\n\n  #bitmapUrl = null;\n\n  #bitmapFile = null;\n\n  #canvas = null;\n\n  #observer = null;\n\n  #resizeTimeoutId = null;\n\n  #isSvg = false;\n\n  #hasBeenAddedInUndoStack = false;\n\n  static _type = \"stamp\";\n\n  constructor(params) {\n    super({ ...params, name: \"stampEditor\" });\n    this.#bitmapUrl = params.bitmapUrl;\n    this.#bitmapFile = params.bitmapFile;\n  }\n\n  /** @inheritdoc */\n  static initialize(l10n) {\n    AnnotationEditor.initialize(l10n);\n  }\n\n  static get supportedTypes() {\n    // See https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\n    // to know which types are supported by the browser.\n    const types = [\n      \"apng\",\n      \"avif\",\n      \"bmp\",\n      \"gif\",\n      \"jpeg\",\n      \"png\",\n      \"svg+xml\",\n      \"webp\",\n      \"x-icon\",\n    ];\n    return shadow(\n      this,\n      \"supportedTypes\",\n      types.map(type => `image/${type}`)\n    );\n  }\n\n  static get supportedTypesStr() {\n    return shadow(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n  }\n\n  /** @inheritdoc */\n  static isHandlingMimeForPasting(mime) {\n    return this.supportedTypes.includes(mime);\n  }\n\n  /** @inheritdoc */\n  static paste(item, parent) {\n    parent.pasteEditor(AnnotationEditorType.STAMP, {\n      bitmapFile: item.getAsFile(),\n    });\n  }\n\n  #getBitmapFetched(data, fromId = false) {\n    if (!data) {\n      this.remove();\n      return;\n    }\n    this.#bitmap = data.bitmap;\n    if (!fromId) {\n      this.#bitmapId = data.id;\n      this.#isSvg = data.isSvg;\n    }\n    this.#createCanvas();\n  }\n\n  #getBitmapDone() {\n    this.#bitmapPromise = null;\n    this._uiManager.enableWaiting(false);\n    if (this.#canvas) {\n      this.div.focus();\n    }\n  }\n\n  #getBitmap() {\n    if (this.#bitmapId) {\n      this._uiManager.enableWaiting(true);\n      this._uiManager.imageManager\n        .getFromId(this.#bitmapId)\n        .then(data => this.#getBitmapFetched(data, /* fromId = */ true))\n        .finally(() => this.#getBitmapDone());\n      return;\n    }\n\n    if (this.#bitmapUrl) {\n      const url = this.#bitmapUrl;\n      this.#bitmapUrl = null;\n      this._uiManager.enableWaiting(true);\n      this.#bitmapPromise = this._uiManager.imageManager\n        .getFromUrl(url)\n        .then(data => this.#getBitmapFetched(data))\n        .finally(() => this.#getBitmapDone());\n      return;\n    }\n\n    if (this.#bitmapFile) {\n      const file = this.#bitmapFile;\n      this.#bitmapFile = null;\n      this._uiManager.enableWaiting(true);\n      this.#bitmapPromise = this._uiManager.imageManager\n        .getFromFile(file)\n        .then(data => this.#getBitmapFetched(data))\n        .finally(() => this.#getBitmapDone());\n      return;\n    }\n\n    const input = document.createElement(\"input\");\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      input.hidden = true;\n      input.id = \"stampEditorFileInput\";\n      document.body.append(input);\n    }\n    input.type = \"file\";\n    input.accept = StampEditor.supportedTypesStr;\n    this.#bitmapPromise = new Promise(resolve => {\n      input.addEventListener(\"change\", async () => {\n        if (!input.files || input.files.length === 0) {\n          this.remove();\n        } else {\n          this._uiManager.enableWaiting(true);\n          const data = await this._uiManager.imageManager.getFromFile(\n            input.files[0]\n          );\n          this.#getBitmapFetched(data);\n        }\n        if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n          input.remove();\n        }\n        resolve();\n      });\n      input.addEventListener(\"cancel\", () => {\n        this.remove();\n        resolve();\n      });\n    }).finally(() => this.#getBitmapDone());\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"TESTING\")) {\n      input.click();\n    }\n  }\n\n  /** @inheritdoc */\n  remove() {\n    if (this.#bitmapId) {\n      this.#bitmap = null;\n      this._uiManager.imageManager.deleteId(this.#bitmapId);\n      this.#canvas?.remove();\n      this.#canvas = null;\n      this.#observer?.disconnect();\n      this.#observer = null;\n    }\n    super.remove();\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    if (!this.parent) {\n      // It's possible to have to rebuild an editor which is not on a visible\n      // page.\n      if (this.#bitmapId) {\n        this.#getBitmap();\n      }\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (this.#bitmapId) {\n      this.#getBitmap();\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilting it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n    }\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    this._isDraggable = true;\n    this.div.focus();\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return !(\n      this.#bitmapPromise ||\n      this.#bitmap ||\n      this.#bitmapUrl ||\n      this.#bitmapFile\n    );\n  }\n\n  /** @inheritdoc */\n  get isResizable() {\n    return true;\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n    this.div.hidden = true;\n\n    if (this.#bitmap) {\n      this.#createCanvas();\n    } else {\n      this.#getBitmap();\n    }\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setAt(\n        baseX * parentWidth,\n        baseY * parentHeight,\n        this.width * parentWidth,\n        this.height * parentHeight\n      );\n    }\n\n    return this.div;\n  }\n\n  #createCanvas() {\n    const { div } = this;\n    let { width, height } = this.#bitmap;\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    const MAX_RATIO = 0.75;\n    if (this.width) {\n      width = this.width * pageWidth;\n      height = this.height * pageHeight;\n    } else if (\n      width > MAX_RATIO * pageWidth ||\n      height > MAX_RATIO * pageHeight\n    ) {\n      // If the the image is too big compared to the page dimensions\n      // (more than MAX_RATIO) then we scale it down.\n      const factor = Math.min(\n        (MAX_RATIO * pageWidth) / width,\n        (MAX_RATIO * pageHeight) / height\n      );\n      width *= factor;\n      height *= factor;\n    }\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.setDims(\n      (width * parentWidth) / pageWidth,\n      (height * parentHeight) / pageHeight\n    );\n\n    this._uiManager.enableWaiting(false);\n    const canvas = (this.#canvas = document.createElement(\"canvas\"));\n    div.append(canvas);\n    div.hidden = false;\n    this.#drawBitmap(width, height);\n    this.#createObserver();\n    if (!this.#hasBeenAddedInUndoStack) {\n      this.parent.addUndoableEditor(this);\n      this.#hasBeenAddedInUndoStack = true;\n    }\n\n    // There are multiple ways to add an image to the page, so here we just\n    // count the number of times an image is added to the page whatever the way\n    // is.\n    this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n      source: this,\n      details: {\n        type: \"editing\",\n        subtype: this.editorType,\n        data: {\n          action: \"inserted_image\",\n        },\n      },\n    });\n    this.addAltTextButton();\n  }\n\n  /**\n   * When the dimensions of the div change the inner canvas must\n   * renew its dimensions, hence it must redraw its own contents.\n   * @param {number} width - the new width of the div\n   * @param {number} height - the new height of the div\n   * @returns\n   */\n  #setDimensions(width, height) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n    this.setDims(width, height);\n    if (this._initialOptions?.isCentered) {\n      this.center();\n    } else {\n      this.fixAndSetPosition();\n    }\n    this._initialOptions = null;\n    if (this.#resizeTimeoutId !== null) {\n      clearTimeout(this.#resizeTimeoutId);\n    }\n    // When the user is resizing the editor we just use CSS to scale the image\n    // to avoid redrawing it too often.\n    // And once the user stops resizing the editor we redraw the image in\n    // rescaling it correctly (see this.#scaleBitmap).\n    const TIME_TO_WAIT = 200;\n    this.#resizeTimeoutId = setTimeout(() => {\n      this.#resizeTimeoutId = null;\n      this.#drawBitmap(width, height);\n    }, TIME_TO_WAIT);\n  }\n\n  #scaleBitmap(width, height) {\n    const { width: bitmapWidth, height: bitmapHeight } = this.#bitmap;\n\n    let newWidth = bitmapWidth;\n    let newHeight = bitmapHeight;\n    let bitmap = this.#bitmap;\n    while (newWidth > 2 * width || newHeight > 2 * height) {\n      const prevWidth = newWidth;\n      const prevHeight = newHeight;\n\n      if (newWidth > 2 * width) {\n        // See bug 1820511 (Windows specific bug).\n        // TODO: once the above bug is fixed we could revert to:\n        // newWidth = Math.ceil(newWidth / 2);\n        newWidth =\n          newWidth >= 16384\n            ? Math.floor(newWidth / 2) - 1\n            : Math.ceil(newWidth / 2);\n      }\n      if (newHeight > 2 * height) {\n        newHeight =\n          newHeight >= 16384\n            ? Math.floor(newHeight / 2) - 1\n            : Math.ceil(newHeight / 2);\n      }\n\n      const offscreen = new OffscreenCanvas(newWidth, newHeight);\n      const ctx = offscreen.getContext(\"2d\");\n      ctx.drawImage(\n        bitmap,\n        0,\n        0,\n        prevWidth,\n        prevHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      bitmap = offscreen.transferToImageBitmap();\n    }\n\n    return bitmap;\n  }\n\n  #drawBitmap(width, height) {\n    width = Math.ceil(width);\n    height = Math.ceil(height);\n    const canvas = this.#canvas;\n    if (!canvas || (canvas.width === width && canvas.height === height)) {\n      return;\n    }\n    canvas.width = width;\n    canvas.height = height;\n    const bitmap = this.#isSvg\n      ? this.#bitmap\n      : this.#scaleBitmap(width, height);\n    const ctx = canvas.getContext(\"2d\");\n    ctx.filter = this._uiManager.hcmFilter;\n    ctx.drawImage(\n      bitmap,\n      0,\n      0,\n      bitmap.width,\n      bitmap.height,\n      0,\n      0,\n      width,\n      height\n    );\n  }\n\n  #serializeBitmap(toUrl) {\n    if (toUrl) {\n      if (this.#isSvg) {\n        const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\n        if (url) {\n          return url;\n        }\n      }\n      // We convert to a data url because it's sync and the url can live in the\n      // clipboard.\n      const canvas = document.createElement(\"canvas\");\n      ({ width: canvas.width, height: canvas.height } = this.#bitmap);\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(this.#bitmap, 0, 0);\n\n      return canvas.toDataURL();\n    }\n\n    if (this.#isSvg) {\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      // Multiply by PixelsPerInch.PDF_TO_CSS_UNITS in order to increase the\n      // image resolution when rasterizing it.\n      const width = Math.round(\n        this.width * pageWidth * PixelsPerInch.PDF_TO_CSS_UNITS\n      );\n      const height = Math.round(\n        this.height * pageHeight * PixelsPerInch.PDF_TO_CSS_UNITS\n      );\n      const offscreen = new OffscreenCanvas(width, height);\n      const ctx = offscreen.getContext(\"2d\");\n      ctx.drawImage(\n        this.#bitmap,\n        0,\n        0,\n        this.#bitmap.width,\n        this.#bitmap.height,\n        0,\n        0,\n        width,\n        height\n      );\n      return offscreen.transferToImageBitmap();\n    }\n\n    return structuredClone(this.#bitmap);\n  }\n\n  /**\n   * Create the resize observer.\n   */\n  #createObserver() {\n    this.#observer = new ResizeObserver(entries => {\n      const rect = entries[0].contentRect;\n      if (rect.width && rect.height) {\n        this.#setDimensions(rect.width, rect.height);\n      }\n    });\n    this.#observer.observe(this.div);\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    if (data instanceof StampAnnotationElement) {\n      return null;\n    }\n    const editor = super.deserialize(data, parent, uiManager);\n    const { rect, bitmapUrl, bitmapId, isSvg, accessibilityData } = data;\n    if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\n      editor.#bitmapId = bitmapId;\n    } else {\n      editor.#bitmapUrl = bitmapUrl;\n    }\n    editor.#isSvg = isSvg;\n\n    const [parentWidth, parentHeight] = editor.pageDimensions;\n    editor.width = (rect[2] - rect[0]) / parentWidth;\n    editor.height = (rect[3] - rect[1]) / parentHeight;\n\n    if (accessibilityData) {\n      editor.altTextData = accessibilityData;\n    }\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize(isForCopying = false, context = null) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const serialized = {\n      annotationType: AnnotationEditorType.STAMP,\n      bitmapId: this.#bitmapId,\n      pageIndex: this.pageIndex,\n      rect: this.getRect(0, 0),\n      rotation: this.rotation,\n      isSvg: this.#isSvg,\n      structTreeParentId: this._structTreeParentId,\n    };\n\n    if (isForCopying) {\n      // We don't know what's the final destination (this pdf or another one)\n      // of this annotation and the clipboard doesn't support ImageBitmaps,\n      // hence we serialize the bitmap to a data url.\n      serialized.bitmapUrl = this.#serializeBitmap(/* toUrl = */ true);\n      serialized.accessibilityData = this.altTextData;\n      return serialized;\n    }\n\n    const { decorative, altText } = this.altTextData;\n    if (!decorative && altText) {\n      serialized.accessibilityData = { type: \"Figure\", alt: altText };\n    }\n\n    if (context === null) {\n      return serialized;\n    }\n\n    context.stamps ||= new Map();\n    const area = this.#isSvg\n      ? (serialized.rect[2] - serialized.rect[0]) *\n        (serialized.rect[3] - serialized.rect[1])\n      : null;\n    if (!context.stamps.has(this.#bitmapId)) {\n      // We don't want to have multiple copies of the same bitmap in the\n      // annotationMap, hence we only add the bitmap the first time we meet it.\n      context.stamps.set(this.#bitmapId, { area, serialized });\n      serialized.bitmap = this.#serializeBitmap(/* toUrl = */ false);\n    } else if (this.#isSvg) {\n      // If we have multiple copies of the same svg but with different sizes,\n      // then we want to keep the biggest one.\n      const prevData = context.stamps.get(this.#bitmapId);\n      if (area > prevData.area) {\n        prevData.area = area;\n        prevData.serialized.bitmap.close();\n        prevData.serialized.bitmap = this.#serializeBitmap(/* toUrl = */ false);\n      }\n    }\n    return serialized;\n  }\n}\n\nexport { StampEditor };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").OnProgressParameters} OnProgressParameters */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n/** @typedef {import(\"./display/display_utils\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/text_layer\").TextLayerRenderTask} TextLayerRenderTask */\n\nimport {\n  AbortException,\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  AnnotationMode,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  FeatureTest,\n  ImageKind,\n  InvalidPDFException,\n  MissingPDFException,\n  normalizeUnicode,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  PromiseCapability,\n  shadow,\n  UnexpectedResponseException,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  PDFDataRangeTransport,\n  PDFWorker,\n  SVGGraphics,\n  version,\n} from \"./display/api.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  loadScript,\n  noContextMenu,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  setLayerDimensions,\n} from \"./display/display_utils.js\";\nimport { renderTextLayer, updateTextLayer } from \"./display/text_layer.js\";\nimport { AnnotationEditorLayer } from \"./display/editor/annotation_editor_layer.js\";\nimport { AnnotationEditorUIManager } from \"./display/editor/tools.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nexport {\n  AbortException,\n  AnnotationEditorLayer,\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  AnnotationEditorUIManager,\n  AnnotationLayer,\n  AnnotationMode,\n  build,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  DOMSVGFactory,\n  FeatureTest,\n  getDocument,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  GlobalWorkerOptions,\n  ImageKind,\n  InvalidPDFException,\n  isDataScheme,\n  isPdfFile,\n  loadScript,\n  MissingPDFException,\n  noContextMenu,\n  normalizeUnicode,\n  OPS,\n  PasswordResponses,\n  PDFDataRangeTransport,\n  PDFDateString,\n  PDFWorker,\n  PermissionFlag,\n  PixelsPerInch,\n  PromiseCapability,\n  RenderingCancelledException,\n  renderTextLayer,\n  setLayerDimensions,\n  shadow,\n  SVGGraphics,\n  UnexpectedResponseException,\n  updateTextLayer,\n  Util,\n  VerbosityLevel,\n  version,\n  XfaLayer,\n};\n"]},"metadata":{},"sourceType":"script"}