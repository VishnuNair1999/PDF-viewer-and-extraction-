{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishn\\\\Desktop\\\\AuthInMern\\\\client\\\\src\\\\components\\\\Message\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n\n  const [pdfFileData, setPdfFileData] = useState();\n\n  async function readFileAsync(file) {\n    try {\n      const arrayBuffer = await file.arrayBuffer();\n\n      if (arrayBuffer) {\n        return new Uint8Array(arrayBuffer);\n      } else {\n        console.error(\"Error reading file: Array buffer is undefined.\");\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error reading file:\", error);\n      return null;\n    }\n  }\n\n  async function renderPdf(uint8array) {\n    try {\n      const pdfDoc = await PDFDocument.load(uint8array);\n      const [page2, page3] = await pdfDoc.copyPages(pdfDoc, [1, 2]);\n      const newPdfDoc = await PDFDocument.create();\n      newPdfDoc.addPage(page2);\n      newPdfDoc.addPage(page3);\n      const newPdfBytes = await newPdfDoc.save();\n      setPdfFileData(newPdfBytes);\n    } catch (error) {\n      console.error(\"Error rendering PDF:\", error);\n    }\n  } // Execute when the user selects a file\n\n\n  const onFileSelected = async e => {\n    const fileList = e.target.files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      const pdfFile = fileList[0];\n      const pdfArrayBuffer = await readFileAsync(pdfFile);\n      renderPdf(pdfArrayBuffer);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello world\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-selector\",\n      accept: \".pdf\",\n      onChange: onFileSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      title: \"PdfFrame\",\n      src: pdfFileData ? URL.createObjectURL(new Blob([pdfFileData], {\n        type: \"application/pdf\"\n      })) : null,\n      frameBorder: \"0\",\n      type: \"application/pdf\",\n      style: {\n        display: \"block\",\n        width: \"100%\",\n        height: \"90vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Home, \"lRhz6fD0rFJSUl+g5b2LfCpzvnQ=\");\n\n_c = Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/src/components/Message/index.jsx"],"names":["useState","PDFDocument","Home","pdfFileData","setPdfFileData","readFileAsync","file","arrayBuffer","Uint8Array","console","error","renderPdf","uint8array","pdfDoc","load","page2","page3","copyPages","newPdfDoc","create","addPage","newPdfBytes","save","onFileSelected","e","fileList","target","files","length","pdfFile","pdfArrayBuffer","URL","createObjectURL","Blob","type","display","width","height"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,QAA4B,SAA5B;;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,EAA9C;;AAEA,iBAAeK,aAAf,CAA6BC,IAA7B,EAAmC;AACjC,QAAI;AACF,YAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAL,EAA1B;;AACA,UAAIA,WAAJ,EAAiB;AACf,eAAO,IAAIC,UAAJ,CAAeD,WAAf,CAAP;AACD,OAFD,MAEO;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAc,gDAAd;AACA,eAAO,IAAP;AACD;AACF,KARD,CAQE,OAAOA,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACA,aAAO,IAAP;AACD;AACF;;AAGD,iBAAeC,SAAf,CAAyBC,UAAzB,EAAqC;AACnC,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMZ,WAAW,CAACa,IAAZ,CAAiBF,UAAjB,CAArB;AACA,YAAM,CAACG,KAAD,EAAQC,KAAR,IAAiB,MAAMH,MAAM,CAACI,SAAP,CAAiBJ,MAAjB,EAAyB,CAAC,CAAD,EAAI,CAAJ,CAAzB,CAA7B;AAEA,YAAMK,SAAS,GAAG,MAAMjB,WAAW,CAACkB,MAAZ,EAAxB;AACAD,MAAAA,SAAS,CAACE,OAAV,CAAkBL,KAAlB;AACAG,MAAAA,SAAS,CAACE,OAAV,CAAkBJ,KAAlB;AAEA,YAAMK,WAAW,GAAG,MAAMH,SAAS,CAACI,IAAV,EAA1B;AAEAlB,MAAAA,cAAc,CAACiB,WAAD,CAAd;AACD,KAXD,CAWE,OAAOX,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,sBAAd,EAAsCA,KAAtC;AACD;AACF,GAlC4B,CAoC7B;;;AACA,QAAMa,cAAc,GAAG,MAAOC,CAAP,IAAa;AAClC,UAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;;AACA,QAAI,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,IAAmB,CAAvB,EAA0B;AACxB,YAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACA,YAAMK,cAAc,GAAG,MAAMzB,aAAa,CAACwB,OAAD,CAA1C;AACAlB,MAAAA,SAAS,CAACmB,cAAD,CAAT;AACD;AACF,GAPD;;AASA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,EAAE,EAAC,eAFL;AAGE,MAAA,MAAM,EAAC,MAHT;AAIE,MAAA,QAAQ,EAAEP;AAJZ;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE;AACE,MAAA,KAAK,EAAC,UADR;AAEE,MAAA,GAAG,EAAEpB,WAAW,GAAG4B,GAAG,CAACC,eAAJ,CAAoB,IAAIC,IAAJ,CAAS,CAAC9B,WAAD,CAAT,EAAwB;AAAE+B,QAAAA,IAAI,EAAE;AAAR,OAAxB,CAApB,CAAH,GAA+E,IAFjG;AAGE,MAAA,WAAW,EAAC,GAHd;AAIE,MAAA,IAAI,EAAC,iBAJP;AAKE,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,KAAK,EAAE,MAA3B;AAAmCC,QAAAA,MAAM,EAAE;AAA3C;AALT;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAkBD;;GAhEuBnC,I;;KAAAA,I","sourcesContent":["import { useState } from \"react\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\n\r\nexport default function Home() {\r\n  const [pdfFileData, setPdfFileData] = useState();\r\n\r\n  async function readFileAsync(file) {\r\n    try {\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      if (arrayBuffer) {\r\n        return new Uint8Array(arrayBuffer);\r\n      } else {\r\n        console.error(\"Error reading file: Array buffer is undefined.\");\r\n        return null;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error reading file:\", error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n\r\n  async function renderPdf(uint8array) {\r\n    try {\r\n      const pdfDoc = await PDFDocument.load(uint8array);\r\n      const [page2, page3] = await pdfDoc.copyPages(pdfDoc, [1, 2]);\r\n\r\n      const newPdfDoc = await PDFDocument.create();\r\n      newPdfDoc.addPage(page2);\r\n      newPdfDoc.addPage(page3);\r\n\r\n      const newPdfBytes = await newPdfDoc.save();\r\n\r\n      setPdfFileData(newPdfBytes);\r\n    } catch (error) {\r\n      console.error(\"Error rendering PDF:\", error);\r\n    }\r\n  }\r\n\r\n  // Execute when the user selects a file\r\n  const onFileSelected = async (e) => {\r\n    const fileList = e.target.files;\r\n    if (fileList?.length > 0) {\r\n      const pdfFile = fileList[0];\r\n      const pdfArrayBuffer = await readFileAsync(pdfFile);\r\n      renderPdf(pdfArrayBuffer);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Hello world</h1>\r\n      <input\r\n        type=\"file\"\r\n        id=\"file-selector\"\r\n        accept=\".pdf\"\r\n        onChange={onFileSelected}\r\n      />\r\n      <iframe\r\n        title=\"PdfFrame\"\r\n        src={pdfFileData ? URL.createObjectURL(new Blob([pdfFileData], { type: \"application/pdf\" })) : null}\r\n        frameBorder=\"0\"\r\n        type=\"application/pdf\"\r\n        style={{ display: \"block\", width: \"100%\", height: \"90vh\" }}\r\n      ></iframe>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}