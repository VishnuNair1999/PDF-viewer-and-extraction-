{"ast":null,"code":"import { UnexpectedObjectTypeError, UnsupportedEncodingError } from \"../errors\";\nimport PDFArray from \"../objects/PDFArray\";\nimport PDFDict from \"../objects/PDFDict\";\nimport PDFName from \"../objects/PDFName\";\nimport PDFNumber from \"../objects/PDFNumber\";\nimport Ascii85Stream from \"./Ascii85Stream\";\nimport AsciiHexStream from \"./AsciiHexStream\";\nimport FlateStream from \"./FlateStream\";\nimport LZWStream from \"./LZWStream\";\nimport RunLengthStream from \"./RunLengthStream\";\nimport Stream from \"./Stream\";\n\nvar decodeStream = function decodeStream(stream, encoding, params) {\n  if (encoding === PDFName.of('FlateDecode')) {\n    return new FlateStream(stream);\n  }\n\n  if (encoding === PDFName.of('LZWDecode')) {\n    var earlyChange = 1;\n\n    if (params instanceof PDFDict) {\n      var EarlyChange = params.lookup(PDFName.of('EarlyChange'));\n\n      if (EarlyChange instanceof PDFNumber) {\n        earlyChange = EarlyChange.asNumber();\n      }\n    }\n\n    return new LZWStream(stream, undefined, earlyChange);\n  }\n\n  if (encoding === PDFName.of('ASCII85Decode')) {\n    return new Ascii85Stream(stream);\n  }\n\n  if (encoding === PDFName.of('ASCIIHexDecode')) {\n    return new AsciiHexStream(stream);\n  }\n\n  if (encoding === PDFName.of('RunLengthDecode')) {\n    return new RunLengthStream(stream);\n  }\n\n  throw new UnsupportedEncodingError(encoding.asString());\n};\n\nexport var decodePDFRawStream = function decodePDFRawStream(_a) {\n  var dict = _a.dict,\n      contents = _a.contents;\n  var stream = new Stream(contents);\n  var Filter = dict.lookup(PDFName.of('Filter'));\n  var DecodeParms = dict.lookup(PDFName.of('DecodeParms'));\n\n  if (Filter instanceof PDFName) {\n    stream = decodeStream(stream, Filter, DecodeParms);\n  } else if (Filter instanceof PDFArray) {\n    for (var idx = 0, len = Filter.size(); idx < len; idx++) {\n      stream = decodeStream(stream, Filter.lookup(idx, PDFName), DecodeParms && DecodeParms.lookupMaybe(idx, PDFDict));\n    }\n  } else if (!!Filter) {\n    throw new UnexpectedObjectTypeError([PDFName, PDFArray], Filter);\n  }\n\n  return stream;\n};","map":{"version":3,"sources":["C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\pdf-lib\\src\\core\\streams\\decode.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  UnexpectedObjectTypeError,\n  UnsupportedEncodingError,\n} from 'src/core/errors';\nimport PDFArray from 'src/core/objects/PDFArray';\nimport PDFDict from 'src/core/objects/PDFDict';\nimport PDFName from 'src/core/objects/PDFName';\nimport PDFNull from 'src/core/objects/PDFNull';\nimport PDFNumber from 'src/core/objects/PDFNumber';\nimport PDFRawStream from 'src/core/objects/PDFRawStream';\nimport Ascii85Stream from 'src/core/streams/Ascii85Stream';\nimport AsciiHexStream from 'src/core/streams/AsciiHexStream';\nimport FlateStream from 'src/core/streams/FlateStream';\nimport LZWStream from 'src/core/streams/LZWStream';\nimport RunLengthStream from 'src/core/streams/RunLengthStream';\nimport Stream, { StreamType } from 'src/core/streams/Stream';\n\nconst decodeStream = (\n  stream: StreamType,\n  encoding: PDFName,\n  params: undefined | typeof PDFNull | PDFDict,\n) => {\n  if (encoding === PDFName.of('FlateDecode')) {\n    return new FlateStream(stream);\n  }\n  if (encoding === PDFName.of('LZWDecode')) {\n    let earlyChange = 1;\n    if (params instanceof PDFDict) {\n      const EarlyChange = params.lookup(PDFName.of('EarlyChange'));\n      if (EarlyChange instanceof PDFNumber) {\n        earlyChange = EarlyChange.asNumber();\n      }\n    }\n    return new LZWStream(stream, undefined, earlyChange as 0 | 1);\n  }\n  if (encoding === PDFName.of('ASCII85Decode')) {\n    return new Ascii85Stream(stream);\n  }\n  if (encoding === PDFName.of('ASCIIHexDecode')) {\n    return new AsciiHexStream(stream);\n  }\n  if (encoding === PDFName.of('RunLengthDecode')) {\n    return new RunLengthStream(stream);\n  }\n  throw new UnsupportedEncodingError(encoding.asString());\n};\n\nexport const decodePDFRawStream = ({ dict, contents }: PDFRawStream) => {\n  let stream: StreamType = new Stream(contents);\n\n  const Filter = dict.lookup(PDFName.of('Filter'));\n  const DecodeParms = dict.lookup(PDFName.of('DecodeParms'));\n\n  if (Filter instanceof PDFName) {\n    stream = decodeStream(\n      stream,\n      Filter,\n      DecodeParms as PDFDict | typeof PDFNull | undefined,\n    );\n  } else if (Filter instanceof PDFArray) {\n    for (let idx = 0, len = Filter.size(); idx < len; idx++) {\n      stream = decodeStream(\n        stream,\n        Filter.lookup(idx, PDFName),\n        DecodeParms && (DecodeParms as PDFArray).lookupMaybe(idx, PDFDict),\n      );\n    }\n  } else if (!!Filter) {\n    throw new UnexpectedObjectTypeError([PDFName, PDFArray], Filter);\n  }\n\n  return stream;\n};\n"]},"metadata":{},"sourceType":"module"}