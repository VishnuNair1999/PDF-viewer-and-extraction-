{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishn\\\\Desktop\\\\AuthInMern\\\\client\\\\src\\\\components\\\\pdfViewer\\\\pdfViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { PDFDocument } from \"pdf-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [pdfFileData, setPdfFileData] = useState();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [pdfSrcDoc, setPdfSrcDoc] = useState(null);\n\n  const readFileAsync = file => {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  const renderPdf = uint8array => {\n    const tempblob = new Blob([uint8array], {\n      type: \"application/pdf\"\n    });\n    const docUrl = URL.createObjectURL(tempblob);\n    setPdfFileData(docUrl);\n  };\n\n  const extractPdfPage = async arrayBuff => {\n    try {\n      const loadedPdfSrcDoc = await PDFDocument.load(arrayBuff);\n      setPdfSrcDoc(loadedPdfSrcDoc);\n      console.log(\"Source PDF Document:\", loadedPdfSrcDoc);\n      console.log(\"Number of Pages in Source Document:\", loadedPdfSrcDoc.getPageCount());\n      const pdfNewDoc = await PDFDocument.create();\n      console.log(\"Copied Pages:\", pdfNewDoc.getPages());\n      const pageCount = loadedPdfSrcDoc.getPageCount();\n      console.log(\"Number of Pages to Copy:\", pageCount);\n      selectedPages.forEach(pageIndex => {\n        if (pageIndex < pageCount) {\n          const pageToCopy = loadedPdfSrcDoc.getPages()[pageIndex];\n          console.log(`Copying page ${pageIndex}`);\n          const copiedPage = pdfNewDoc.copyPages(loadedPdfSrcDoc, [pageToCopy])[0];\n          console.log(`Adding copied page to new document`);\n          pdfNewDoc.addPage(copiedPage);\n        } else {\n          console.error(`Page index ${pageIndex} is out of bounds.`);\n        }\n      });\n      const newPdfData = await pdfNewDoc.save();\n      console.log(\"New PDF Data Length:\", newPdfData.length);\n      renderPdf(newPdfData);\n    } catch (error) {\n      setErrorMessage(\"Error extracting or creating the new PDF file.\");\n      console.error(\"General error:\", error);\n    }\n  };\n\n  const onFileSelected = async e => {\n    setErrorMessage(\"\"); // Clear any previous error messages\n\n    setSelectedPages([]); // Clear selected pages\n\n    const fileList = e.target.files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      try {\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\n        const newPdfDoc = await extractPdfPage(pdfArrayBuffer);\n\n        if (newPdfDoc) {\n          renderPdf(newPdfDoc);\n        }\n      } catch (error) {\n        setErrorMessage(\"Error loading or processing the selected PDF file.\");\n        console.error(error);\n      }\n    }\n  };\n\n  const handleCheckboxChange = pageIndex => {\n    if (selectedPages.includes(pageIndex)) {\n      setSelectedPages(selectedPages.filter(page => page !== pageIndex));\n    } else {\n      setSelectedPages([...selectedPages, pageIndex]);\n    }\n  };\n\n  const createNewPdfWithSelectedPages = async () => {\n    setErrorMessage(\"\"); // Clear any previous error messages\n\n    if (selectedPages.length === 0) {\n      setErrorMessage(\"Please select at least one page.\");\n      return;\n    }\n\n    const fileList = document.getElementById(\"file-selector\").files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      try {\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\n        const pdfSrcDoc = await PDFDocument.load(pdfArrayBuffer);\n        console.log(\"Source PDF Document:\", pdfSrcDoc);\n\n        if (!pdfSrcDoc) {\n          setErrorMessage(\"Error loading the source PDF document.\");\n          return;\n        }\n\n        const pdfNewDoc = await PDFDocument.create();\n        console.log(\"Copied Pages:\", pdfNewDoc.getPages());\n\n        if (!pdfNewDoc) {\n          setErrorMessage(\"Error creating the new PDF document.\");\n          return;\n        }\n\n        const pageCount = pdfSrcDoc.getPageCount();\n        selectedPages.forEach(pageIndex => {\n          if (pageIndex < pageCount) {\n            const pageToCopy = pdfSrcDoc.getPages()[pageIndex];\n            const copiedPage = pdfNewDoc.copyPages(pdfSrcDoc, [pageToCopy])[0];\n            pdfNewDoc.addPage(copiedPage);\n          } else {\n            console.error(`Page index ${pageIndex} is out of bounds.`);\n          }\n        });\n        const newPdfData = await pdfNewDoc.save();\n        renderPdf(newPdfData);\n      } catch (error) {\n        setErrorMessage(\"Error creating the new PDF file.\");\n        console.error(\"General error:\", error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-selector\",\n      accept: \".pdf\",\n      onChange: onFileSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [pdfFileData && /*#__PURE__*/_jsxDEV(\"iframe\", {\n        style: {\n          display: \"block\",\n          width: \"100%\",\n          height: \"500px\"\n        },\n        title: \"PdfFrame\",\n        src: pdfFileData,\n        frameBorder: \"0\",\n        type: \"application/pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), pdfFileData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Pages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), Array.from({\n          length: pdfSrcDoc.getPageCount()\n        }, (_, pageIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedPages.includes(pageIndex),\n            onChange: () => handleCheckboxChange(pageIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 17\n          }, this), \"Page \", pageIndex + 1]\n        }, pageIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createNewPdfWithSelectedPages,\n          children: \"Create New PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"4SebTKZCHbOHuA1BvskZk9qJpTQ=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/src/components/pdfViewer/pdfViewer.js"],"names":["React","useState","PDFDocument","Home","pdfFileData","setPdfFileData","errorMessage","setErrorMessage","selectedPages","setSelectedPages","pdfSrcDoc","setPdfSrcDoc","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","renderPdf","uint8array","tempblob","Blob","type","docUrl","URL","createObjectURL","extractPdfPage","arrayBuff","loadedPdfSrcDoc","load","console","log","getPageCount","pdfNewDoc","create","getPages","pageCount","forEach","pageIndex","pageToCopy","copiedPage","copyPages","addPage","error","newPdfData","save","length","onFileSelected","e","fileList","target","files","pdfArrayBuffer","newPdfDoc","handleCheckboxChange","includes","filter","page","createNewPdfWithSelectedPages","document","getElementById","color","display","width","height","Array","from","_"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,SAA5B;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,EAA9C;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMW,aAAa,GAAIC,IAAD,IAAU;AAC9B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpBJ,QAAAA,OAAO,CAACE,MAAM,CAACG,MAAR,CAAP;AACD,OAFD;;AAGAH,MAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AACAC,MAAAA,MAAM,CAACK,iBAAP,CAAyBT,IAAzB;AACD,KAPM,CAAP;AAQD,GATD;;AAWA,QAAMU,SAAS,GAAIC,UAAD,IAAgB;AAChC,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAAS,CAACF,UAAD,CAAT,EAAuB;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAvB,CAAjB;AACA,UAAMC,MAAM,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,QAApB,CAAf;AACApB,IAAAA,cAAc,CAACuB,MAAD,CAAd;AACD,GAJD;;AAMA,QAAMG,cAAc,GAAG,MAAOC,SAAP,IAAqB;AAC1C,QAAI;AACF,YAAMC,eAAe,GAAG,MAAM/B,WAAW,CAACgC,IAAZ,CAAiBF,SAAjB,CAA9B;AACArB,MAAAA,YAAY,CAACsB,eAAD,CAAZ;AAEAE,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCH,eAApC;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDH,eAAe,CAACI,YAAhB,EAAnD;AAEA,YAAMC,SAAS,GAAG,MAAMpC,WAAW,CAACqC,MAAZ,EAAxB;AAEAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,SAAS,CAACE,QAAV,EAA7B;AAEA,YAAMC,SAAS,GAAGR,eAAe,CAACI,YAAhB,EAAlB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCK,SAAxC;AAEAjC,MAAAA,aAAa,CAACkC,OAAd,CAAuBC,SAAD,IAAe;AACnC,YAAIA,SAAS,GAAGF,SAAhB,EAA2B;AACzB,gBAAMG,UAAU,GAAGX,eAAe,CAACO,QAAhB,GAA2BG,SAA3B,CAAnB;AACAR,UAAAA,OAAO,CAACC,GAAR,CAAa,gBAAeO,SAAU,EAAtC;AACA,gBAAME,UAAU,GAAGP,SAAS,CAACQ,SAAV,CAAoBb,eAApB,EAAqC,CAACW,UAAD,CAArC,EAAmD,CAAnD,CAAnB;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAa,oCAAb;AACAE,UAAAA,SAAS,CAACS,OAAV,CAAkBF,UAAlB;AACD,SAND,MAMO;AACLV,UAAAA,OAAO,CAACa,KAAR,CAAe,cAAaL,SAAU,oBAAtC;AACD;AACF,OAVD;AAYA,YAAMM,UAAU,GAAG,MAAMX,SAAS,CAACY,IAAV,EAAzB;AACAf,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCa,UAAU,CAACE,MAA/C;AACA5B,MAAAA,SAAS,CAAC0B,UAAD,CAAT;AACD,KA7BD,CA6BE,OAAOD,KAAP,EAAc;AACdzC,MAAAA,eAAe,CAAC,gDAAD,CAAf;AACA4B,MAAAA,OAAO,CAACa,KAAR,CAAc,gBAAd,EAAgCA,KAAhC;AACD;AACF,GAlCD;;AAoCA,QAAMI,cAAc,GAAG,MAAOC,CAAP,IAAa;AAClC9C,IAAAA,eAAe,CAAC,EAAD,CAAf,CADkC,CACb;;AACrBE,IAAAA,gBAAgB,CAAC,EAAD,CAAhB,CAFkC,CAEZ;;AACtB,UAAM6C,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;;AACA,QAAI,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,MAAV,IAAmB,CAAvB,EAA0B;AACxB,UAAI;AACF,cAAMM,cAAc,GAAG,MAAM7C,aAAa,CAAC0C,QAAQ,CAAC,CAAD,CAAT,CAA1C;AACA,cAAMI,SAAS,GAAG,MAAM3B,cAAc,CAAC0B,cAAD,CAAtC;;AACA,YAAIC,SAAJ,EAAe;AACbnC,UAAAA,SAAS,CAACmC,SAAD,CAAT;AACD;AACF,OAND,CAME,OAAOV,KAAP,EAAc;AACdzC,QAAAA,eAAe,CAAC,oDAAD,CAAf;AACA4B,QAAAA,OAAO,CAACa,KAAR,CAAcA,KAAd;AACD;AACF;AACF,GAhBD;;AAkBA,QAAMW,oBAAoB,GAAIhB,SAAD,IAAe;AAC1C,QAAInC,aAAa,CAACoD,QAAd,CAAuBjB,SAAvB,CAAJ,EAAuC;AACrClC,MAAAA,gBAAgB,CAACD,aAAa,CAACqD,MAAd,CAAsBC,IAAD,IAAUA,IAAI,KAAKnB,SAAxC,CAAD,CAAhB;AACD,KAFD,MAEO;AACLlC,MAAAA,gBAAgB,CAAC,CAAC,GAAGD,aAAJ,EAAmBmC,SAAnB,CAAD,CAAhB;AACD;AACF,GAND;;AAQA,QAAMoB,6BAA6B,GAAG,YAAY;AAChDxD,IAAAA,eAAe,CAAC,EAAD,CAAf,CADgD,CAC3B;;AACrB,QAAIC,aAAa,CAAC2C,MAAd,KAAyB,CAA7B,EAAgC;AAC9B5C,MAAAA,eAAe,CAAC,kCAAD,CAAf;AACA;AACD;;AAED,UAAM+C,QAAQ,GAAGU,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCT,KAA1D;;AACA,QAAI,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEH,MAAV,IAAmB,CAAvB,EAA0B;AACxB,UAAI;AACF,cAAMM,cAAc,GAAG,MAAM7C,aAAa,CAAC0C,QAAQ,CAAC,CAAD,CAAT,CAA1C;AACA,cAAM5C,SAAS,GAAG,MAAMR,WAAW,CAACgC,IAAZ,CAAiBuB,cAAjB,CAAxB;AACAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC1B,SAApC;;AAEA,YAAI,CAACA,SAAL,EAAgB;AACdH,UAAAA,eAAe,CAAC,wCAAD,CAAf;AACA;AACD;;AAED,cAAM+B,SAAS,GAAG,MAAMpC,WAAW,CAACqC,MAAZ,EAAxB;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BE,SAAS,CAACE,QAAV,EAA7B;;AAEA,YAAI,CAACF,SAAL,EAAgB;AACd/B,UAAAA,eAAe,CAAC,sCAAD,CAAf;AACA;AACD;;AAED,cAAMkC,SAAS,GAAG/B,SAAS,CAAC2B,YAAV,EAAlB;AAEA7B,QAAAA,aAAa,CAACkC,OAAd,CAAuBC,SAAD,IAAe;AACnC,cAAIA,SAAS,GAAGF,SAAhB,EAA2B;AACzB,kBAAMG,UAAU,GAAGlC,SAAS,CAAC8B,QAAV,GAAqBG,SAArB,CAAnB;AACA,kBAAME,UAAU,GAAGP,SAAS,CAACQ,SAAV,CAAoBpC,SAApB,EAA+B,CAACkC,UAAD,CAA/B,EAA6C,CAA7C,CAAnB;AACAN,YAAAA,SAAS,CAACS,OAAV,CAAkBF,UAAlB;AACD,WAJD,MAIO;AACLV,YAAAA,OAAO,CAACa,KAAR,CAAe,cAAaL,SAAU,oBAAtC;AACD;AACF,SARD;AAUA,cAAMM,UAAU,GAAG,MAAMX,SAAS,CAACY,IAAV,EAAzB;AACA3B,QAAAA,SAAS,CAAC0B,UAAD,CAAT;AACD,OAhCD,CAgCE,OAAOD,KAAP,EAAc;AACdzC,QAAAA,eAAe,CAAC,kCAAD,CAAf;AACA4B,QAAAA,OAAO,CAACa,KAAR,CAAc,gBAAd,EAAgCA,KAAhC;AACD;AACF;AACF,GA9CD;;AAkDA,sBACE;AAAA,4BAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,eAAtB;AAAsC,MAAA,MAAM,EAAC,MAA7C;AAAoD,MAAA,QAAQ,EAAEI;AAA9D;AAAA;AAAA;AAAA;AAAA,YAFF,EAGG9C,YAAY,iBAAI;AAAG,MAAA,KAAK,EAAE;AAAE4D,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA,gBAA6B5D;AAA7B;AAAA;AAAA;AAAA;AAAA,YAHnB,eAIE;AAAA,iBACGF,WAAW,iBACV;AACE,QAAA,KAAK,EAAE;AAAE+D,UAAAA,OAAO,EAAE,OAAX;AAAoBC,UAAAA,KAAK,EAAE,MAA3B;AAAmCC,UAAAA,MAAM,EAAE;AAA3C,SADT;AAEE,QAAA,KAAK,EAAC,UAFR;AAGE,QAAA,GAAG,EAAEjE,WAHP;AAIE,QAAA,WAAW,EAAC,GAJd;AAKE,QAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,cAFJ,EAUGA,WAAW,iBACV;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEGkE,KAAK,CAACC,IAAN,CAAW;AAAEpB,UAAAA,MAAM,EAAEzC,SAAS,CAAC2B,YAAV;AAAV,SAAX,EAAiD,CAACmC,CAAD,EAAI7B,SAAJ,kBAChD;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,OAAO,EAAEnC,aAAa,CAACoD,QAAd,CAAuBjB,SAAvB,CAFX;AAGE,YAAA,QAAQ,EAAE,MAAMgB,oBAAoB,CAAChB,SAAD;AAHtC;AAAA;AAAA;AAAA;AAAA,kBADF,WAMQA,SAAS,GAAG,CANpB;AAAA,WAAYA,SAAZ;AAAA;AAAA;AAAA;AAAA,gBADD,CAFH,eAYE;AAAQ,UAAA,OAAO,EAAEoB,6BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAkCD,CAzKD;;GAAM5D,I;;KAAAA,I;AA2KN,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PDFDocument } from \"pdf-lib\";\r\n\r\nconst Home = () => {\r\n  const [pdfFileData, setPdfFileData] = useState();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [selectedPages, setSelectedPages] = useState([]);\r\n  const [pdfSrcDoc, setPdfSrcDoc] = useState(null);\r\n\r\n  const readFileAsync = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      let reader = new FileReader();\r\n      reader.onload = () => {\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  };\r\n\r\n  const renderPdf = (uint8array) => {\r\n    const tempblob = new Blob([uint8array], { type: \"application/pdf\" });\r\n    const docUrl = URL.createObjectURL(tempblob);\r\n    setPdfFileData(docUrl);\r\n  };\r\n\r\n  const extractPdfPage = async (arrayBuff) => {\r\n    try {\r\n      const loadedPdfSrcDoc = await PDFDocument.load(arrayBuff);\r\n      setPdfSrcDoc(loadedPdfSrcDoc);\r\n\r\n      console.log(\"Source PDF Document:\", loadedPdfSrcDoc);\r\n      console.log(\"Number of Pages in Source Document:\", loadedPdfSrcDoc.getPageCount());\r\n\r\n      const pdfNewDoc = await PDFDocument.create();\r\n\r\n      console.log(\"Copied Pages:\", pdfNewDoc.getPages());\r\n\r\n      const pageCount = loadedPdfSrcDoc.getPageCount();\r\n      console.log(\"Number of Pages to Copy:\", pageCount);\r\n\r\n      selectedPages.forEach((pageIndex) => {\r\n        if (pageIndex < pageCount) {\r\n          const pageToCopy = loadedPdfSrcDoc.getPages()[pageIndex];\r\n          console.log(`Copying page ${pageIndex}`);\r\n          const copiedPage = pdfNewDoc.copyPages(loadedPdfSrcDoc, [pageToCopy])[0];\r\n          console.log(`Adding copied page to new document`);\r\n          pdfNewDoc.addPage(copiedPage);\r\n        } else {\r\n          console.error(`Page index ${pageIndex} is out of bounds.`);\r\n        }\r\n      });\r\n\r\n      const newPdfData = await pdfNewDoc.save();\r\n      console.log(\"New PDF Data Length:\", newPdfData.length);\r\n      renderPdf(newPdfData);\r\n    } catch (error) {\r\n      setErrorMessage(\"Error extracting or creating the new PDF file.\");\r\n      console.error(\"General error:\", error);\r\n    }\r\n  };\r\n\r\n  const onFileSelected = async (e) => {\r\n    setErrorMessage(\"\"); // Clear any previous error messages\r\n    setSelectedPages([]); // Clear selected pages\r\n    const fileList = e.target.files;\r\n    if (fileList?.length > 0) {\r\n      try {\r\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\r\n        const newPdfDoc = await extractPdfPage(pdfArrayBuffer);\r\n        if (newPdfDoc) {\r\n          renderPdf(newPdfDoc);\r\n        }\r\n      } catch (error) {\r\n        setErrorMessage(\"Error loading or processing the selected PDF file.\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (pageIndex) => {\r\n    if (selectedPages.includes(pageIndex)) {\r\n      setSelectedPages(selectedPages.filter((page) => page !== pageIndex));\r\n    } else {\r\n      setSelectedPages([...selectedPages, pageIndex]);\r\n    }\r\n  };\r\n\r\n  const createNewPdfWithSelectedPages = async () => {\r\n    setErrorMessage(\"\"); // Clear any previous error messages\r\n    if (selectedPages.length === 0) {\r\n      setErrorMessage(\"Please select at least one page.\");\r\n      return;\r\n    }\r\n\r\n    const fileList = document.getElementById(\"file-selector\").files;\r\n    if (fileList?.length > 0) {\r\n      try {\r\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\r\n        const pdfSrcDoc = await PDFDocument.load(pdfArrayBuffer);\r\n        console.log(\"Source PDF Document:\", pdfSrcDoc);\r\n\r\n        if (!pdfSrcDoc) {\r\n          setErrorMessage(\"Error loading the source PDF document.\");\r\n          return;\r\n        }\r\n\r\n        const pdfNewDoc = await PDFDocument.create();\r\n        console.log(\"Copied Pages:\", pdfNewDoc.getPages());\r\n\r\n        if (!pdfNewDoc) {\r\n          setErrorMessage(\"Error creating the new PDF document.\");\r\n          return;\r\n        }\r\n\r\n        const pageCount = pdfSrcDoc.getPageCount();\r\n\r\n        selectedPages.forEach((pageIndex) => {\r\n          if (pageIndex < pageCount) {\r\n            const pageToCopy = pdfSrcDoc.getPages()[pageIndex];\r\n            const copiedPage = pdfNewDoc.copyPages(pdfSrcDoc, [pageToCopy])[0];\r\n            pdfNewDoc.addPage(copiedPage);\r\n          } else {\r\n            console.error(`Page index ${pageIndex} is out of bounds.`);\r\n          }\r\n        });\r\n\r\n        const newPdfData = await pdfNewDoc.save();\r\n        renderPdf(newPdfData);\r\n      } catch (error) {\r\n        setErrorMessage(\"Error creating the new PDF file.\");\r\n        console.error(\"General error:\", error);\r\n      }\r\n    }\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <>\r\n      \r\n      <input type=\"file\" id=\"file-selector\" accept=\".pdf\" onChange={onFileSelected} />\r\n      {errorMessage && <p style={{ color: \"red\" }}>{errorMessage}</p>}\r\n      <div>\r\n        {pdfFileData && (\r\n          <iframe\r\n            style={{ display: \"block\", width: \"100%\", height: \"500px\" }}\r\n            title=\"PdfFrame\"\r\n            src={pdfFileData}\r\n            frameBorder=\"0\"\r\n            type=\"application/pdf\"\r\n          ></iframe>\r\n        )}\r\n        {pdfFileData && (\r\n          <div>\r\n            <h2>Select Pages:</h2>\r\n            {Array.from({ length: pdfSrcDoc.getPageCount() }, (_, pageIndex) => (\r\n              <label key={pageIndex}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedPages.includes(pageIndex)}\r\n                  onChange={() => handleCheckboxChange(pageIndex)}\r\n                />\r\n                Page {pageIndex + 1}\r\n              </label>\r\n            ))}\r\n            <button onClick={createNewPdfWithSelectedPages}>Create New PDF</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}