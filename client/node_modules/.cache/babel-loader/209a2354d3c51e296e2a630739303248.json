{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport pdfjs from '../pdfjs.js';\nimport usePageContext from '../shared/hooks/usePageContext.js';\nimport useResolver from '../shared/hooks/useResolver.js';\nimport { cancelRunningTask, isCancelException, makePageCallback } from '../shared/utils.js';\nexport default function PageSVG() {\n  const pageContext = usePageContext();\n  invariant(pageContext, 'Unable to find Page context.');\n  const {\n    _className,\n    onRenderSuccess: onRenderSuccessProps,\n    onRenderError: onRenderErrorProps,\n    page,\n    rotate,\n    scale\n  } = pageContext;\n  invariant(page, 'Attempted to render page SVG, but no page was specified.');\n  const [svgState, svgDispatch] = useResolver();\n  const {\n    value: svg,\n    error: svgError\n  } = svgState;\n  /**\n   * Called when a page is rendered successfully\n   */\n\n  function onRenderSuccess() {\n    if (!page) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    if (onRenderSuccessProps) {\n      onRenderSuccessProps(makePageCallback(page, scale));\n    }\n  }\n  /**\n   * Called when a page fails to render\n   */\n\n\n  function onRenderError() {\n    if (!svgError) {\n      // Impossible, but TypeScript doesn't know that\n      return;\n    }\n\n    if (isCancelException(svgError)) {\n      return;\n    }\n\n    warning(false, svgError.toString());\n\n    if (onRenderErrorProps) {\n      onRenderErrorProps(svgError);\n    }\n  }\n\n  const viewport = useMemo(() => page.getViewport({\n    scale,\n    rotation: rotate\n  }), [page, rotate, scale]);\n\n  function resetSVG() {\n    svgDispatch({\n      type: 'RESET'\n    });\n  }\n\n  useEffect(resetSVG, [page, svgDispatch, viewport]);\n\n  function renderSVG() {\n    if (!page) {\n      return;\n    }\n\n    const cancellable = makeCancellable(page.getOperatorList());\n    cancellable.promise.then(operatorList => {\n      const svgGfx = new pdfjs.SVGGraphics(page.commonObjs, page.objs);\n      svgGfx.getSVG(operatorList, viewport).then(nextSvg => {\n        // See https://github.com/mozilla/pdf.js/issues/16745\n        if (!(nextSvg instanceof SVGElement)) {\n          throw new Error('getSVG returned unexpected result.');\n        }\n\n        svgDispatch({\n          type: 'RESOLVE',\n          value: nextSvg\n        });\n      }).catch(error => {\n        svgDispatch({\n          type: 'REJECT',\n          error\n        });\n      });\n    }).catch(error => {\n      svgDispatch({\n        type: 'REJECT',\n        error\n      });\n    });\n    return () => cancelRunningTask(cancellable);\n  }\n\n  useEffect(renderSVG, [page, svgDispatch, viewport]);\n  useEffect(() => {\n    if (svg === undefined) {\n      return;\n    }\n\n    if (svg === false) {\n      onRenderError();\n      return;\n    }\n\n    onRenderSuccess();\n  }, // Ommitted callbacks so they are not called every time they change\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [svg]);\n\n  function drawPageOnContainer(element) {\n    if (!element || !svg) {\n      return;\n    } // Append SVG element to the main container, if this hasn't been done already\n\n\n    if (!element.firstElementChild) {\n      element.appendChild(svg);\n    }\n\n    const {\n      width,\n      height\n    } = viewport;\n    svg.setAttribute('width', `${width}`);\n    svg.setAttribute('height', `${height}`);\n  }\n\n  const {\n    width,\n    height\n  } = viewport;\n  return React.createElement(\"div\", {\n    className: `${_className}__svg`,\n    // Note: This cannot be shortened, as we need this function to be called with each render.\n    ref: ref => drawPageOnContainer(ref),\n    style: {\n      display: 'block',\n      backgroundColor: 'white',\n      overflow: 'hidden',\n      width,\n      height,\n      userSelect: 'none'\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/node_modules/react-pdf/dist/esm/Page/PageSVG.js"],"names":["React","useEffect","useMemo","makeCancellable","invariant","warning","pdfjs","usePageContext","useResolver","cancelRunningTask","isCancelException","makePageCallback","PageSVG","pageContext","_className","onRenderSuccess","onRenderSuccessProps","onRenderError","onRenderErrorProps","page","rotate","scale","svgState","svgDispatch","value","svg","error","svgError","toString","viewport","getViewport","rotation","resetSVG","type","renderSVG","cancellable","getOperatorList","promise","then","operatorList","svgGfx","SVGGraphics","commonObjs","objs","getSVG","nextSvg","SVGElement","Error","catch","undefined","drawPageOnContainer","element","firstElementChild","appendChild","width","height","setAttribute","createElement","className","ref","style","display","backgroundColor","overflow","userSelect"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,QAA0C,OAA1C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,gBAA/C,QAAuE,oBAAvE;AACA,eAAe,SAASC,OAAT,GAAmB;AAC9B,QAAMC,WAAW,GAAGN,cAAc,EAAlC;AACAH,EAAAA,SAAS,CAACS,WAAD,EAAc,8BAAd,CAAT;AACA,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,eAAe,EAAEC,oBAA/B;AAAqDC,IAAAA,aAAa,EAAEC,kBAApE;AAAwFC,IAAAA,IAAxF;AAA8FC,IAAAA,MAA9F;AAAsGC,IAAAA;AAAtG,MAAiHR,WAAvH;AACAT,EAAAA,SAAS,CAACe,IAAD,EAAO,0DAAP,CAAT;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0Bf,WAAW,EAA3C;AACA,QAAM;AAAEgB,IAAAA,KAAK,EAAEC,GAAT;AAAcC,IAAAA,KAAK,EAAEC;AAArB,MAAkCL,QAAxC;AACA;AACJ;AACA;;AACI,WAASP,eAAT,GAA2B;AACvB,QAAI,CAACI,IAAL,EAAW;AACP;AACA;AACH;;AACD,QAAIH,oBAAJ,EAA0B;AACtBA,MAAAA,oBAAoB,CAACL,gBAAgB,CAACQ,IAAD,EAAOE,KAAP,CAAjB,CAApB;AACH;AACJ;AACD;AACJ;AACA;;;AACI,WAASJ,aAAT,GAAyB;AACrB,QAAI,CAACU,QAAL,EAAe;AACX;AACA;AACH;;AACD,QAAIjB,iBAAiB,CAACiB,QAAD,CAArB,EAAiC;AAC7B;AACH;;AACDtB,IAAAA,OAAO,CAAC,KAAD,EAAQsB,QAAQ,CAACC,QAAT,EAAR,CAAP;;AACA,QAAIV,kBAAJ,EAAwB;AACpBA,MAAAA,kBAAkB,CAACS,QAAD,CAAlB;AACH;AACJ;;AACD,QAAME,QAAQ,GAAG3B,OAAO,CAAC,MAAMiB,IAAI,CAACW,WAAL,CAAiB;AAAET,IAAAA,KAAF;AAASU,IAAAA,QAAQ,EAAEX;AAAnB,GAAjB,CAAP,EAAsD,CAACD,IAAD,EAAOC,MAAP,EAAeC,KAAf,CAAtD,CAAxB;;AACA,WAASW,QAAT,GAAoB;AAChBT,IAAAA,WAAW,CAAC;AAAEU,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAX;AACH;;AACDhC,EAAAA,SAAS,CAAC+B,QAAD,EAAW,CAACb,IAAD,EAAOI,WAAP,EAAoBM,QAApB,CAAX,CAAT;;AACA,WAASK,SAAT,GAAqB;AACjB,QAAI,CAACf,IAAL,EAAW;AACP;AACH;;AACD,UAAMgB,WAAW,GAAGhC,eAAe,CAACgB,IAAI,CAACiB,eAAL,EAAD,CAAnC;AACAD,IAAAA,WAAW,CAACE,OAAZ,CACKC,IADL,CACWC,YAAD,IAAkB;AACxB,YAAMC,MAAM,GAAG,IAAIlC,KAAK,CAACmC,WAAV,CAAsBtB,IAAI,CAACuB,UAA3B,EAAuCvB,IAAI,CAACwB,IAA5C,CAAf;AACAH,MAAAA,MAAM,CACDI,MADL,CACYL,YADZ,EAC0BV,QAD1B,EAEKS,IAFL,CAEWO,OAAD,IAAa;AACnB;AACA,YAAI,EAAEA,OAAO,YAAYC,UAArB,CAAJ,EAAsC;AAClC,gBAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;AACH;;AACDxB,QAAAA,WAAW,CAAC;AAAEU,UAAAA,IAAI,EAAE,SAAR;AAAmBT,UAAAA,KAAK,EAAEqB;AAA1B,SAAD,CAAX;AACH,OARD,EASKG,KATL,CASYtB,KAAD,IAAW;AAClBH,QAAAA,WAAW,CAAC;AAAEU,UAAAA,IAAI,EAAE,QAAR;AAAkBP,UAAAA;AAAlB,SAAD,CAAX;AACH,OAXD;AAYH,KAfD,EAgBKsB,KAhBL,CAgBYtB,KAAD,IAAW;AAClBH,MAAAA,WAAW,CAAC;AAAEU,QAAAA,IAAI,EAAE,QAAR;AAAkBP,QAAAA;AAAlB,OAAD,CAAX;AACH,KAlBD;AAmBA,WAAO,MAAMjB,iBAAiB,CAAC0B,WAAD,CAA9B;AACH;;AACDlC,EAAAA,SAAS,CAACiC,SAAD,EAAY,CAACf,IAAD,EAAOI,WAAP,EAAoBM,QAApB,CAAZ,CAAT;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwB,GAAG,KAAKwB,SAAZ,EAAuB;AACnB;AACH;;AACD,QAAIxB,GAAG,KAAK,KAAZ,EAAmB;AACfR,MAAAA,aAAa;AACb;AACH;;AACDF,IAAAA,eAAe;AAClB,GATQ,EAUT;AACA;AACA,GAACU,GAAD,CAZS,CAAT;;AAaA,WAASyB,mBAAT,CAA6BC,OAA7B,EAAsC;AAClC,QAAI,CAACA,OAAD,IAAY,CAAC1B,GAAjB,EAAsB;AAClB;AACH,KAHiC,CAIlC;;;AACA,QAAI,CAAC0B,OAAO,CAACC,iBAAb,EAAgC;AAC5BD,MAAAA,OAAO,CAACE,WAAR,CAAoB5B,GAApB;AACH;;AACD,UAAM;AAAE6B,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoB1B,QAA1B;AACAJ,IAAAA,GAAG,CAAC+B,YAAJ,CAAiB,OAAjB,EAA2B,GAAEF,KAAM,EAAnC;AACA7B,IAAAA,GAAG,CAAC+B,YAAJ,CAAiB,QAAjB,EAA4B,GAAED,MAAO,EAArC;AACH;;AACD,QAAM;AAAED,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAoB1B,QAA1B;AACA,SAAQ7B,KAAK,CAACyD,aAAN,CAAoB,KAApB,EAA2B;AAAEC,IAAAA,SAAS,EAAG,GAAE5C,UAAW,OAA3B;AAC/B;AACA6C,IAAAA,GAAG,EAAGA,GAAD,IAAST,mBAAmB,CAACS,GAAD,CAFF;AAESC,IAAAA,KAAK,EAAE;AAC3CC,MAAAA,OAAO,EAAE,OADkC;AAE3CC,MAAAA,eAAe,EAAE,OAF0B;AAG3CC,MAAAA,QAAQ,EAAE,QAHiC;AAI3CT,MAAAA,KAJ2C;AAK3CC,MAAAA,MAL2C;AAM3CS,MAAAA,UAAU,EAAE;AAN+B;AAFhB,GAA3B,CAAR;AAUH","sourcesContent":["import React, { useEffect, useMemo } from 'react';\nimport makeCancellable from 'make-cancellable-promise';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport pdfjs from '../pdfjs.js';\nimport usePageContext from '../shared/hooks/usePageContext.js';\nimport useResolver from '../shared/hooks/useResolver.js';\nimport { cancelRunningTask, isCancelException, makePageCallback } from '../shared/utils.js';\nexport default function PageSVG() {\n    const pageContext = usePageContext();\n    invariant(pageContext, 'Unable to find Page context.');\n    const { _className, onRenderSuccess: onRenderSuccessProps, onRenderError: onRenderErrorProps, page, rotate, scale, } = pageContext;\n    invariant(page, 'Attempted to render page SVG, but no page was specified.');\n    const [svgState, svgDispatch] = useResolver();\n    const { value: svg, error: svgError } = svgState;\n    /**\n     * Called when a page is rendered successfully\n     */\n    function onRenderSuccess() {\n        if (!page) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        if (onRenderSuccessProps) {\n            onRenderSuccessProps(makePageCallback(page, scale));\n        }\n    }\n    /**\n     * Called when a page fails to render\n     */\n    function onRenderError() {\n        if (!svgError) {\n            // Impossible, but TypeScript doesn't know that\n            return;\n        }\n        if (isCancelException(svgError)) {\n            return;\n        }\n        warning(false, svgError.toString());\n        if (onRenderErrorProps) {\n            onRenderErrorProps(svgError);\n        }\n    }\n    const viewport = useMemo(() => page.getViewport({ scale, rotation: rotate }), [page, rotate, scale]);\n    function resetSVG() {\n        svgDispatch({ type: 'RESET' });\n    }\n    useEffect(resetSVG, [page, svgDispatch, viewport]);\n    function renderSVG() {\n        if (!page) {\n            return;\n        }\n        const cancellable = makeCancellable(page.getOperatorList());\n        cancellable.promise\n            .then((operatorList) => {\n            const svgGfx = new pdfjs.SVGGraphics(page.commonObjs, page.objs);\n            svgGfx\n                .getSVG(operatorList, viewport)\n                .then((nextSvg) => {\n                // See https://github.com/mozilla/pdf.js/issues/16745\n                if (!(nextSvg instanceof SVGElement)) {\n                    throw new Error('getSVG returned unexpected result.');\n                }\n                svgDispatch({ type: 'RESOLVE', value: nextSvg });\n            })\n                .catch((error) => {\n                svgDispatch({ type: 'REJECT', error });\n            });\n        })\n            .catch((error) => {\n            svgDispatch({ type: 'REJECT', error });\n        });\n        return () => cancelRunningTask(cancellable);\n    }\n    useEffect(renderSVG, [page, svgDispatch, viewport]);\n    useEffect(() => {\n        if (svg === undefined) {\n            return;\n        }\n        if (svg === false) {\n            onRenderError();\n            return;\n        }\n        onRenderSuccess();\n    }, \n    // Ommitted callbacks so they are not called every time they change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [svg]);\n    function drawPageOnContainer(element) {\n        if (!element || !svg) {\n            return;\n        }\n        // Append SVG element to the main container, if this hasn't been done already\n        if (!element.firstElementChild) {\n            element.appendChild(svg);\n        }\n        const { width, height } = viewport;\n        svg.setAttribute('width', `${width}`);\n        svg.setAttribute('height', `${height}`);\n    }\n    const { width, height } = viewport;\n    return (React.createElement(\"div\", { className: `${_className}__svg`, \n        // Note: This cannot be shortened, as we need this function to be called with each render.\n        ref: (ref) => drawPageOnContainer(ref), style: {\n            display: 'block',\n            backgroundColor: 'white',\n            overflow: 'hidden',\n            width,\n            height,\n            userSelect: 'none',\n        } }));\n}\n"]},"metadata":{},"sourceType":"module"}