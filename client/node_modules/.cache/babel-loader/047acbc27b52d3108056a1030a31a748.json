{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishn\\\\Desktop\\\\AuthInMern\\\\client\\\\src\\\\components\\\\pdfViewer\\\\pdfViewer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { PDFDocument, rgb } from \"pdf-lib\"; // Import the necessary functions from pdf-lib\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [pdfFileData, setPdfFileData] = useState();\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [selectedPages, setSelectedPages] = useState([]);\n\n  const readFileAsync = file => {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n\n      reader.onload = () => {\n        resolve(reader.result);\n      };\n\n      reader.onerror = reject;\n      reader.readAsArrayBuffer(file);\n    });\n  };\n\n  const renderPdf = uint8array => {\n    const tempblob = new Blob([uint8array], {\n      type: \"application/pdf\"\n    });\n    const docUrl = URL.createObjectURL(tempblob);\n    setPdfFileData(docUrl);\n  };\n\n  const extractPdfPage = async arrayBuff => {\n    try {\n      const pdfSrcDoc = await PDFDocument.load(arrayBuff);\n      const pdfNewDoc = await PDFDocument.create(); // Copy all pages instead of a specific range\n\n      const pages = await pdfNewDoc.copyPages(pdfSrcDoc, pdfSrcDoc.getPageIndices());\n      pages.forEach(page => pdfNewDoc.addPage(page));\n      const newpdf = await pdfNewDoc.save();\n      return newpdf;\n    } catch (error) {\n      setErrorMessage(\"Error extracting PDF pages.\");\n      console.error(error);\n      return null;\n    }\n  };\n\n  const onFileSelected = async e => {\n    setErrorMessage(\"\"); // Clear any previous error messages\n\n    setSelectedPages([]); // Clear selected pages\n\n    const fileList = e.target.files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      try {\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\n        const newPdfDoc = await extractPdfPage(pdfArrayBuffer);\n\n        if (newPdfDoc) {\n          renderPdf(newPdfDoc);\n        }\n      } catch (error) {\n        setErrorMessage(\"Error loading or processing the selected PDF file.\");\n        console.error(error);\n      }\n    }\n  };\n\n  const handleCheckboxChange = pageIndex => {\n    if (selectedPages.includes(pageIndex)) {\n      setSelectedPages(selectedPages.filter(page => page !== pageIndex));\n    } else {\n      setSelectedPages([...selectedPages, pageIndex]);\n    }\n  };\n\n  const createNewPdfWithSelectedPages = async () => {\n    setErrorMessage(\"\"); // Clear any previous error messages\n\n    if (selectedPages.length === 0) {\n      setErrorMessage(\"Please select at least one page.\");\n      return;\n    }\n\n    const fileList = document.getElementById(\"file-selector\").files;\n\n    if ((fileList === null || fileList === void 0 ? void 0 : fileList.length) > 0) {\n      try {\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\n        const pdfSrcDoc = await PDFDocument.load(pdfArrayBuffer);\n        const pdfNewDoc = await PDFDocument.create();\n        selectedPages.forEach(pageIndex => {\n          const page = pdfSrcDoc.getPages()[pageIndex];\n          pdfNewDoc.addPage(page);\n        });\n        const newPdfData = await pdfNewDoc.save();\n        renderPdf(newPdfData);\n      } catch (error) {\n        setErrorMessage(\"Error creating the new PDF file.\");\n        console.error(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-selector\",\n      accept: \".pdf\",\n      onChange: onFileSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [pdfFileData && /*#__PURE__*/_jsxDEV(\"iframe\", {\n        style: {\n          display: \"block\",\n          width: \"100%\",\n          height: \"500px\"\n        },\n        title: \"PdfFrame\",\n        src: pdfFileData,\n        frameBorder: \"0\",\n        type: \"application/pdf\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), pdfFileData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select Pages:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), Array.from({\n          length: pdfSrcDoc.getPageCount()\n        }, (_, pageIndex) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: selectedPages.includes(pageIndex),\n            onChange: () => handleCheckboxChange(pageIndex)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this), \"Page \", pageIndex + 1]\n        }, pageIndex, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this)), \",\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: createNewPdfWithSelectedPages,\n          children: \"Create New PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"ppH1gFl6dqANrQf9nBZJOp8LpbI=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/vishn/Desktop/AuthInMern/client/src/components/pdfViewer/pdfViewer.js"],"names":["React","useState","PDFDocument","rgb","Home","pdfFileData","setPdfFileData","errorMessage","setErrorMessage","selectedPages","setSelectedPages","readFileAsync","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsArrayBuffer","renderPdf","uint8array","tempblob","Blob","type","docUrl","URL","createObjectURL","extractPdfPage","arrayBuff","pdfSrcDoc","load","pdfNewDoc","create","pages","copyPages","getPageIndices","forEach","page","addPage","newpdf","save","error","console","onFileSelected","e","fileList","target","files","length","pdfArrayBuffer","newPdfDoc","handleCheckboxChange","pageIndex","includes","filter","createNewPdfWithSelectedPages","document","getElementById","getPages","newPdfData","color","display","width","height","Array","from","getPageCount","_"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,SAAjC,C,CAA4C;;;;;AAE5C,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,QAAQ,EAA9C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAMU,aAAa,GAAIC,IAAD,IAAU;AAC9B,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AACpBJ,QAAAA,OAAO,CAACE,MAAM,CAACG,MAAR,CAAP;AACD,OAFD;;AAGAH,MAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AACAC,MAAAA,MAAM,CAACK,iBAAP,CAAyBT,IAAzB;AACD,KAPM,CAAP;AAQD,GATD;;AAWA,QAAMU,SAAS,GAAIC,UAAD,IAAgB;AAChC,UAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAAS,CAACF,UAAD,CAAT,EAAuB;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAvB,CAAjB;AACA,UAAMC,MAAM,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,QAApB,CAAf;AACAlB,IAAAA,cAAc,CAACqB,MAAD,CAAd;AACD,GAJD;;AAMA,QAAMG,cAAc,GAAG,MAAOC,SAAP,IAAqB;AAC1C,QAAI;AACF,YAAMC,SAAS,GAAG,MAAM9B,WAAW,CAAC+B,IAAZ,CAAiBF,SAAjB,CAAxB;AACA,YAAMG,SAAS,GAAG,MAAMhC,WAAW,CAACiC,MAAZ,EAAxB,CAFE,CAIF;;AACA,YAAMC,KAAK,GAAG,MAAMF,SAAS,CAACG,SAAV,CAAoBL,SAApB,EAA+BA,SAAS,CAACM,cAAV,EAA/B,CAApB;AAEAF,MAAAA,KAAK,CAACG,OAAN,CAAeC,IAAD,IAAUN,SAAS,CAACO,OAAV,CAAkBD,IAAlB,CAAxB;AACA,YAAME,MAAM,GAAG,MAAMR,SAAS,CAACS,IAAV,EAArB;AACA,aAAOD,MAAP;AACD,KAVD,CAUE,OAAOE,KAAP,EAAc;AACdpC,MAAAA,eAAe,CAAC,6BAAD,CAAf;AACAqC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACA,aAAO,IAAP;AACD;AACF,GAhBD;;AAkBA,QAAME,cAAc,GAAG,MAAOC,CAAP,IAAa;AAClCvC,IAAAA,eAAe,CAAC,EAAD,CAAf,CADkC,CACb;;AACrBE,IAAAA,gBAAgB,CAAC,EAAD,CAAhB,CAFkC,CAEZ;;AACtB,UAAMsC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,KAA1B;;AACA,QAAI,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,IAAmB,CAAvB,EAA0B;AACxB,UAAI;AACF,cAAMC,cAAc,GAAG,MAAMzC,aAAa,CAACqC,QAAQ,CAAC,CAAD,CAAT,CAA1C;AACA,cAAMK,SAAS,GAAG,MAAMvB,cAAc,CAACsB,cAAD,CAAtC;;AACA,YAAIC,SAAJ,EAAe;AACb/B,UAAAA,SAAS,CAAC+B,SAAD,CAAT;AACD;AACF,OAND,CAME,OAAOT,KAAP,EAAc;AACdpC,QAAAA,eAAe,CAAC,oDAAD,CAAf;AACAqC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;AACF,GAhBD;;AAkBA,QAAMU,oBAAoB,GAAIC,SAAD,IAAe;AAC1C,QAAI9C,aAAa,CAAC+C,QAAd,CAAuBD,SAAvB,CAAJ,EAAuC;AACrC7C,MAAAA,gBAAgB,CAACD,aAAa,CAACgD,MAAd,CAAsBjB,IAAD,IAAUA,IAAI,KAAKe,SAAxC,CAAD,CAAhB;AACD,KAFD,MAEO;AACL7C,MAAAA,gBAAgB,CAAC,CAAC,GAAGD,aAAJ,EAAmB8C,SAAnB,CAAD,CAAhB;AACD;AACF,GAND;;AAQA,QAAMG,6BAA6B,GAAG,YAAY;AAChDlD,IAAAA,eAAe,CAAC,EAAD,CAAf,CADgD,CAC3B;;AACrB,QAAIC,aAAa,CAAC0C,MAAd,KAAyB,CAA7B,EAAgC;AAC9B3C,MAAAA,eAAe,CAAC,kCAAD,CAAf;AACA;AACD;;AAED,UAAMwC,QAAQ,GAAGW,QAAQ,CAACC,cAAT,CAAwB,eAAxB,EAAyCV,KAA1D;;AACA,QAAI,CAAAF,QAAQ,SAAR,IAAAA,QAAQ,WAAR,YAAAA,QAAQ,CAAEG,MAAV,IAAmB,CAAvB,EAA0B;AACxB,UAAI;AACF,cAAMC,cAAc,GAAG,MAAMzC,aAAa,CAACqC,QAAQ,CAAC,CAAD,CAAT,CAA1C;AACA,cAAMhB,SAAS,GAAG,MAAM9B,WAAW,CAAC+B,IAAZ,CAAiBmB,cAAjB,CAAxB;AACA,cAAMlB,SAAS,GAAG,MAAMhC,WAAW,CAACiC,MAAZ,EAAxB;AAEA1B,QAAAA,aAAa,CAAC8B,OAAd,CAAuBgB,SAAD,IAAe;AACnC,gBAAMf,IAAI,GAAGR,SAAS,CAAC6B,QAAV,GAAqBN,SAArB,CAAb;AACArB,UAAAA,SAAS,CAACO,OAAV,CAAkBD,IAAlB;AACD,SAHD;AAKA,cAAMsB,UAAU,GAAG,MAAM5B,SAAS,CAACS,IAAV,EAAzB;AACArB,QAAAA,SAAS,CAACwC,UAAD,CAAT;AACD,OAZD,CAYE,OAAOlB,KAAP,EAAc;AACdpC,QAAAA,eAAe,CAAC,kCAAD,CAAf;AACAqC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;AACF,GA1BD;;AA4BA,sBACE;AAAA,4BAEE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,EAAE,EAAC,eAAtB;AAAsC,MAAA,MAAM,EAAC,MAA7C;AAAoD,MAAA,QAAQ,EAAEE;AAA9D;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGvC,YAAY,iBAAI;AAAG,MAAA,KAAK,EAAE;AAAEwD,QAAAA,KAAK,EAAE;AAAT,OAAV;AAAA,gBAA6BxD;AAA7B;AAAA;AAAA;AAAA;AAAA,YAHnB,eAIE;AAAA,iBACGF,WAAW,iBACV;AACE,QAAA,KAAK,EAAE;AAAE2D,UAAAA,OAAO,EAAE,OAAX;AAAoBC,UAAAA,KAAK,EAAE,MAA3B;AAAmCC,UAAAA,MAAM,EAAE;AAA3C,SADT;AAEE,QAAA,KAAK,EAAC,UAFR;AAGE,QAAA,GAAG,EAAE7D,WAHP;AAIE,QAAA,WAAW,EAAC,GAJd;AAKE,QAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,cAFJ,EAUGA,WAAW,iBACV;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEG8D,KAAK,CAACC,IAAN,CAAW;AAAEjB,UAAAA,MAAM,EAAEnB,SAAS,CAACqC,YAAV;AAAV,SAAX,EAAiD,CAACC,CAAD,EAAIf,SAAJ,kBAChD;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,OAAO,EAAE9C,aAAa,CAAC+C,QAAd,CAAuBD,SAAvB,CAFX;AAGE,YAAA,QAAQ,EAAE,MAAMD,oBAAoB,CAACC,SAAD;AAHtC;AAAA;AAAA;AAAA;AAAA,kBADF,WAMQA,SAAS,GAAG,CANpB;AAAA,WAAYA,SAAZ;AAAA;AAAA;AAAA;AAAA,gBADD,CAFH,oBAYE;AAAQ,UAAA,OAAO,EAAEG,6BAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAkCD,CAhID;;GAAMtD,I;;KAAAA,I;AAkIN,eAAeA,IAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { PDFDocument, rgb } from \"pdf-lib\"; // Import the necessary functions from pdf-lib\r\n\r\nconst Home = () => {\r\n  const [pdfFileData, setPdfFileData] = useState();\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [selectedPages, setSelectedPages] = useState([]);\r\n  \r\n  const readFileAsync = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      let reader = new FileReader();\r\n      reader.onload = () => {\r\n        resolve(reader.result);\r\n      };\r\n      reader.onerror = reject;\r\n      reader.readAsArrayBuffer(file);\r\n    });\r\n  };\r\n\r\n  const renderPdf = (uint8array) => {\r\n    const tempblob = new Blob([uint8array], { type: \"application/pdf\" });\r\n    const docUrl = URL.createObjectURL(tempblob);\r\n    setPdfFileData(docUrl);\r\n  };\r\n\r\n  const extractPdfPage = async (arrayBuff) => {\r\n    try {\r\n      const pdfSrcDoc = await PDFDocument.load(arrayBuff);\r\n      const pdfNewDoc = await PDFDocument.create();\r\n      \r\n      // Copy all pages instead of a specific range\r\n      const pages = await pdfNewDoc.copyPages(pdfSrcDoc, pdfSrcDoc.getPageIndices());\r\n      \r\n      pages.forEach((page) => pdfNewDoc.addPage(page));\r\n      const newpdf = await pdfNewDoc.save();\r\n      return newpdf;\r\n    } catch (error) {\r\n      setErrorMessage(\"Error extracting PDF pages.\");\r\n      console.error(error);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const onFileSelected = async (e) => {\r\n    setErrorMessage(\"\"); // Clear any previous error messages\r\n    setSelectedPages([]); // Clear selected pages\r\n    const fileList = e.target.files;\r\n    if (fileList?.length > 0) {\r\n      try {\r\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\r\n        const newPdfDoc = await extractPdfPage(pdfArrayBuffer);\r\n        if (newPdfDoc) {\r\n          renderPdf(newPdfDoc);\r\n        }\r\n      } catch (error) {\r\n        setErrorMessage(\"Error loading or processing the selected PDF file.\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCheckboxChange = (pageIndex) => {\r\n    if (selectedPages.includes(pageIndex)) {\r\n      setSelectedPages(selectedPages.filter((page) => page !== pageIndex));\r\n    } else {\r\n      setSelectedPages([...selectedPages, pageIndex]);\r\n    }\r\n  };\r\n\r\n  const createNewPdfWithSelectedPages = async () => {\r\n    setErrorMessage(\"\"); // Clear any previous error messages\r\n    if (selectedPages.length === 0) {\r\n      setErrorMessage(\"Please select at least one page.\");\r\n      return;\r\n    }\r\n\r\n    const fileList = document.getElementById(\"file-selector\").files;\r\n    if (fileList?.length > 0) {\r\n      try {\r\n        const pdfArrayBuffer = await readFileAsync(fileList[0]);\r\n        const pdfSrcDoc = await PDFDocument.load(pdfArrayBuffer);\r\n        const pdfNewDoc = await PDFDocument.create();\r\n\r\n        selectedPages.forEach((pageIndex) => {\r\n          const page = pdfSrcDoc.getPages()[pageIndex];\r\n          pdfNewDoc.addPage(page);\r\n        });\r\n\r\n        const newPdfData = await pdfNewDoc.save();\r\n        renderPdf(newPdfData);\r\n      } catch (error) {\r\n        setErrorMessage(\"Error creating the new PDF file.\");\r\n        console.error(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      \r\n      <input type=\"file\" id=\"file-selector\" accept=\".pdf\" onChange={onFileSelected} />\r\n      {errorMessage && <p style={{ color: \"red\" }}>{errorMessage}</p>}\r\n      <div>\r\n        {pdfFileData && (\r\n          <iframe\r\n            style={{ display: \"block\", width: \"100%\", height: \"500px\" }}\r\n            title=\"PdfFrame\"\r\n            src={pdfFileData}\r\n            frameBorder=\"0\"\r\n            type=\"application/pdf\"\r\n          ></iframe>\r\n        )}\r\n        {pdfFileData && (\r\n          <div>\r\n            <h2>Select Pages:</h2>\r\n            {Array.from({ length: pdfSrcDoc.getPageCount() }, (_, pageIndex) => (\r\n              <label key={pageIndex}>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={selectedPages.includes(pageIndex)}\r\n                  onChange={() => handleCheckboxChange(pageIndex)}\r\n                />\r\n                Page {pageIndex + 1}\r\n              </label>\r\n            ))},\r\n            <button onClick={createNewPdfWithSelectedPages}>Create New PDF</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}