{"ast":null,"code":"/**\n * marked v9.0.3 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\n\nlet _defaults = _getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n/**\n * Helpers\n */\n\n\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nconst getEscapeReplacement = ch => escapeReplacements[ch];\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = typeof val === 'object' && 'source' in val ? val.source : val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nconst noopTest = {\n  exec: () => null\n};\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false;\n    let curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n        cells = row.split(/ \\|/);\n  let i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\n\n\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  let suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n\n    if (matchIndentInNode === null) {\n      return node;\n    }\n\n    const [indentInNode] = matchIndentInNode;\n\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\n\n\nclass _Tokenizer {\n  options; // TODO: Fix this rules type\n\n  rules;\n  lexer;\n\n  constructor(options) {\n    this.options = options || _defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n\n    if (cap) {\n      let text = cap[2].trim(); // remove trailing #s\n\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      } // Get next list item\n\n\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n      let raw = '';\n      let itemContents = '';\n      let endsWithBlankLine = false; // Check if current bullet point can start a new List Item\n\n      while (src) {\n        let endEarly = false;\n\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n        let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, t => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let indent = 0;\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        let blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`); // Check if following lines should be included in List Item\n\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine; // Re-align to follow commonmark nesting rules\n\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            } // End list item if found code fences\n\n\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            } // End list item if found start of new heading\n\n\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            } // End list item if found start of new bullet\n\n\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            } // Horizontal rule found\n\n\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              } // paragraph continuation unless last line was a different block level element\n\n\n              if (line.search(/[^ ]/) >= 4) {\n                // indented code block\n                break;\n              }\n\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask = null;\n        let ischecked; // Check for task list items\n\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: []\n        });\n        list.raw += raw;\n      } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n      list.items[list.items.length - 1].raw = raw.trimEnd();\n      list.items[list.items.length - 1].text = itemContents.trimEnd();\n      list.raw = list.raw.trimEnd(); // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n          list.loose = hasMultipleLineBreaks;\n        }\n      } // Set all items to loose if list is loose\n\n\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0]\n      };\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n\n    if (cap) {\n      if (!/[:|]/.test(cap[2])) {\n        // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n        return;\n      }\n\n      const item = {\n        type: 'table',\n        raw: cap[0],\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c,\n            tokens: []\n          };\n        }),\n        align: cap[2].replace(/^\\||\\| *$/g, '').split('|'),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        let l = item.align.length;\n        let i, j, k, row;\n\n        for (i = 0; i < l; i++) {\n          const align = item.align[i];\n\n          if (align) {\n            if (/^ *-+: *$/.test(align)) {\n              item.align[i] = 'right';\n            } else if (/^ *:-+: *$/.test(align)) {\n              item.align[i] = 'center';\n            } else if (/^ *:-+ *$/.test(align)) {\n              item.align[i] = 'left';\n            } else {\n              item.align[i] = null;\n            }\n          }\n        }\n\n        l = item.rows.length;\n\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c,\n              tokens: []\n            };\n          });\n        } // parse child tokens inside headers and cells\n        // header child tokens\n\n\n        l = item.header.length;\n\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        } // cell child tokens\n\n\n        l = item.rows.length;\n\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        } // ending angle bracket cannot be escaped\n\n\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n\n      let href = cap[2];\n      let title = '';\n\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc) {\n    let prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n      maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n        // Remove extra characters. *a*** -> *a*\n\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = [...src].slice(0, lLength + match.index + rLength + 1).join(''); // Create `em` if smallest delimiter has odd char count. *a***\n\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src) {\n    const cap = this.rules.inline.autolink.exec(src);\n\n    if (cap) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  url(src) {\n    let cap;\n\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n\n        text = escape(cap[0]);\n\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  inlineText(src) {\n    const cap = this.rules.inline.text.exec(src);\n\n    if (cap) {\n      let text;\n\n      if (this.lexer.state.inRawBlock) {\n        text = cap[0];\n      } else {\n        text = escape(cap[0]);\n      }\n\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n}\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\n\n\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.lheading = edit(block.lheading).replace(/bull/g, block.bullet) // lists can interrupt\n.getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block\n};\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = { ...block.normal,\n  table: '^ *([^\\\\n ].*)\\\\n' // Header\n  + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n};\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = { ...block.normal,\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\n\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n    rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n    rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^((?![*_])[\\spunctuation])/\n}; // list of unicode punctuation marks, plus any missing characters from CommonMark spec\n\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = edit(inline._escapes, 'gu').replace(/punct/g, inline._punctuation).getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline\n};\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = { ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n};\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = { ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = { ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n};\n/**\n * Block Lexer\n */\n\nclass _Lexer {\n  tokens;\n  options;\n  state;\n  tokenizer;\n  inlineQueue;\n\n  constructor(options) {\n    // TokenList cannot be created in one go\n    // @ts-expect-error\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n\n\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n\n\n  static lex(src, options) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n\n\n  static lexInline(src, options) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n\n\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    let next;\n\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  blockTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token;\n    let lastToken;\n    let cutSrc;\n    let lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // newline\n\n\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // fences\n\n\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // heading\n\n\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // hr\n\n\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // blockquote\n\n\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // list\n\n\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // html\n\n\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // def\n\n\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n\n        continue;\n      } // table (gfm)\n\n\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // lheading\n\n\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      } // text\n\n\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n\n\n  inlineTokens(src) {\n    let tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar; // Mask out reflinks\n\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    } // Mask out other blocks\n\n\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    } // Mask out escaped characters\n\n\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n\n      keepPrevChar = false; // extensions\n\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // escape\n\n\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // tag\n\n\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // link\n\n\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // reflink, nolink\n\n\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // em & strong\n\n\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // br\n\n\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // del (gfm)\n\n\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // autolink\n\n\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(getStartIndex => {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n}\n/**\n * Renderer\n */\n\n\nclass _Renderer {\n  options;\n\n  constructor(options) {\n    this.options = options || _defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/^\\S*/)?.[0];\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"language-' + escape(lang) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html, block) {\n    return html;\n  }\n\n  heading(text, level, raw) {\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul';\n    const startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(text, task, checked) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n  }\n\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n  /**\n   * span level renderer\n   */\n\n\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return '<br>';\n  }\n\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  link(href, title, text) {\n    const cleanHref = cleanUrl(href);\n\n    if (cleanHref === null) {\n      return text;\n    }\n\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image(href, title, text) {\n    const cleanHref = cleanUrl(href);\n\n    if (cleanHref === null) {\n      return text;\n    }\n\n    href = cleanHref;\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n\n    out += '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n\n}\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\n\nclass _TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n\n}\n/**\n * Parsing & Compiling\n */\n\n\nclass _Parser {\n  options;\n  renderer;\n  textRenderer;\n\n  constructor(options) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  static parse(tokens, options) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n\n\n  static parseInline(tokens, options) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n\n\n  parse(tokens) {\n    let top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        const genericToken = token;\n        const ret = this.options.extensions.renderers[genericToken.type].call({\n          parser: this\n        }, genericToken);\n\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n\n        case 'heading':\n          {\n            const headingToken = token;\n            out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n            continue;\n          }\n\n        case 'code':\n          {\n            const codeToken = token;\n            out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n            continue;\n          }\n\n        case 'table':\n          {\n            const tableToken = token;\n            let header = ''; // header\n\n            let cell = '';\n\n            for (let j = 0; j < tableToken.header.length; j++) {\n              cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), {\n                header: true,\n                align: tableToken.align[j]\n              });\n            }\n\n            header += this.renderer.tablerow(cell);\n            let body = '';\n\n            for (let j = 0; j < tableToken.rows.length; j++) {\n              const row = tableToken.rows[j];\n              cell = '';\n\n              for (let k = 0; k < row.length; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: tableToken.align[k]\n                });\n              }\n\n              body += this.renderer.tablerow(cell);\n            }\n\n            out += this.renderer.table(header, body);\n            continue;\n          }\n\n        case 'blockquote':\n          {\n            const blockquoteToken = token;\n            const body = this.parse(blockquoteToken.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n\n        case 'list':\n          {\n            const listToken = token;\n            const ordered = listToken.ordered;\n            const start = listToken.start;\n            const loose = listToken.loose;\n            let body = '';\n\n            for (let j = 0; j < listToken.items.length; j++) {\n              const item = listToken.items[j];\n              const checked = item.checked;\n              const task = item.task;\n              let itemBody = '';\n\n              if (item.task) {\n                const checkbox = this.renderer.checkbox(!!checked);\n\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox + ' '\n                    });\n                  }\n                } else {\n                  itemBody += checkbox + ' ';\n                }\n              }\n\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, !!checked);\n            }\n\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n\n        case 'html':\n          {\n            const htmlToken = token;\n            out += this.renderer.html(htmlToken.text, htmlToken.block);\n            continue;\n          }\n\n        case 'paragraph':\n          {\n            const paragraphToken = token;\n            out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n            continue;\n          }\n\n        case 'text':\n          {\n            let textToken = token;\n            let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n\n            while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n              textToken = tokens[++i];\n              body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n            }\n\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return '';\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n\n\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        const ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape':\n          {\n            const escapeToken = token;\n            out += renderer.text(escapeToken.text);\n            break;\n          }\n\n        case 'html':\n          {\n            const tagToken = token;\n            out += renderer.html(tagToken.text);\n            break;\n          }\n\n        case 'link':\n          {\n            const linkToken = token;\n            out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n            break;\n          }\n\n        case 'image':\n          {\n            const imageToken = token;\n            out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n            break;\n          }\n\n        case 'strong':\n          {\n            const strongToken = token;\n            out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n            break;\n          }\n\n        case 'em':\n          {\n            const emToken = token;\n            out += renderer.em(this.parseInline(emToken.tokens, renderer));\n            break;\n          }\n\n        case 'codespan':\n          {\n            const codespanToken = token;\n            out += renderer.codespan(codespanToken.text);\n            break;\n          }\n\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n\n        case 'del':\n          {\n            const delToken = token;\n            out += renderer.del(this.parseInline(delToken.tokens, renderer));\n            break;\n          }\n\n        case 'text':\n          {\n            const textToken = token;\n            out += renderer.text(textToken.text);\n            break;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return '';\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n\n}\n\nclass _Hooks {\n  options;\n\n  constructor(options) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set(['preprocess', 'postprocess']);\n  /**\n   * Process markdown before marked\n   */\n\n  preprocess(markdown) {\n    return markdown;\n  }\n  /**\n   * Process HTML after marked is finished\n   */\n\n\n  postprocess(html) {\n    return html;\n  }\n\n}\n\nclass Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n  parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n  parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n  Parser = _Parser;\n  parser = _Parser.parse;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  lexer = _Lexer.lex;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n\n  constructor() {\n    this.use(...arguments);\n  }\n  /**\n   * Run callback for every token\n   */\n\n\n  walkTokens(tokens, callback) {\n    let values = [];\n\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n\n      switch (token.type) {\n        case 'table':\n          {\n            const tableToken = token;\n\n            for (const cell of tableToken.header) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n\n            for (const row of tableToken.rows) {\n              for (const cell of row) {\n                values = values.concat(this.walkTokens(cell.tokens, callback));\n              }\n            }\n\n            break;\n          }\n\n        case 'list':\n          {\n            const listToken = token;\n            values = values.concat(this.walkTokens(listToken.items, callback));\n            break;\n          }\n\n        default:\n          {\n            const genericToken = token;\n\n            if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n              this.defaults.extensions.childTokens[genericToken.type].forEach(childTokens => {\n                values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n              });\n            } else if (genericToken.tokens) {\n              values = values.concat(this.walkTokens(genericToken.tokens, callback));\n            }\n          }\n      }\n    }\n\n    return values;\n  }\n\n  use() {\n    const extensions = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.forEach(pack => {\n      // copy options to new object\n      const opts = { ...pack\n      }; // set async to true if it was set to true before\n\n      opts.async = this.defaults.async || opts.async || false; // ==-- Parse \"addon\" extensions --== //\n\n      if (pack.extensions) {\n        pack.extensions.forEach(ext => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n\n          if ('renderer' in ext) {\n            // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function () {\n                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = arguments[_key2];\n                }\n\n                let ret = ext.renderer.apply(this, args);\n\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n\n          if ('tokenizer' in ext) {\n            // Tokenizer Extensions\n            if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n\n            const extLevel = extensions[ext.level];\n\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n\n            if (ext.start) {\n              // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n\n          if ('childTokens' in ext && ext.childTokens) {\n            // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      } // ==-- Parse \"overwrite\" extensions --== //\n\n\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n\n        for (const prop in pack.renderer) {\n          const rendererFunc = pack.renderer[prop];\n          const rendererKey = prop;\n          const prevRenderer = renderer[rendererKey]; // Replace renderer with func to run extension, but fall back if false\n\n          renderer[rendererKey] = function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n\n            let ret = rendererFunc.apply(renderer, args);\n\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n\n            return ret || '';\n          };\n        }\n\n        opts.renderer = renderer;\n      }\n\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n\n        for (const prop in pack.tokenizer) {\n          const tokenizerFunc = pack.tokenizer[prop];\n          const tokenizerKey = prop;\n          const prevTokenizer = tokenizer[tokenizerKey]; // Replace tokenizer with func to run extension, but fall back if false\n\n          tokenizer[tokenizerKey] = function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n\n            let ret = tokenizerFunc.apply(tokenizer, args);\n\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n\n            return ret;\n          };\n        }\n\n        opts.tokenizer = tokenizer;\n      } // ==-- Parse Hooks extensions --== //\n\n\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n\n        for (const prop in pack.hooks) {\n          const hooksFunc = pack.hooks[prop];\n          const hooksKey = prop;\n          const prevHook = hooks[hooksKey];\n\n          if (_Hooks.passThroughHooks.has(prop)) {\n            hooks[hooksKey] = arg => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            hooks[hooksKey] = function () {\n              for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                args[_key5] = arguments[_key5];\n              }\n\n              let ret = hooksFunc.apply(hooks, args);\n\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n\n              return ret;\n            };\n          }\n        }\n\n        opts.hooks = hooks;\n      } // ==-- Parse WalkTokens extensions --== //\n\n\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n\n        opts.walkTokens = function (token) {\n          let values = [];\n          values.push(packWalktokens.call(this, token));\n\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults,\n        ...opts\n      };\n    });\n    return this;\n  }\n\n  setOptions(opt) {\n    this.defaults = { ...this.defaults,\n      ...opt\n    };\n    return this;\n  }\n\n  #parseMarkdown(lexer, parser) {\n    return (src, options) => {\n      const origOpt = { ...options\n      };\n      const opt = { ...this.defaults,\n        ...origOpt\n      }; // Show warning if an extension set async to true but the parse was called with async: false\n\n      if (this.defaults.async === true && origOpt.async === false) {\n        if (!opt.silent) {\n          console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n        }\n\n        opt.async = true;\n      }\n\n      const throwError = this.#onError(!!opt.silent, !!opt.async); // throw error in case of non string input\n\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n      }\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(src => lexer(src, opt)).then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then(tokens => parser(tokens, opt)).then(html => opt.hooks ? opt.hooks.postprocess(html) : html).catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n\n        const tokens = lexer(src, opt);\n\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n\n        let html = parser(tokens, opt);\n\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n\n        return html;\n      } catch (e) {\n        return throwError(e);\n      }\n    };\n  }\n\n  #onError(silent, async) {\n    return e => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n\n        if (async) {\n          return Promise.resolve(msg);\n        }\n\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n\n      throw e;\n    };\n  }\n\n}\n\nconst markedInstance = new Marked();\n\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\n\n\nmarked.options = marked.setOptions = function (options) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Gets the original marked default options.\n */\n\n\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  markedInstance.use(...arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Run callback for every token\n */\n\n\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\n\n\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\n\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"sources":["C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\defaults.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\helpers.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\Tokenizer.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\rules.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\Lexer.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\Renderer.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\TextRenderer.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\Parser.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\Hooks.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\Instance.ts","C:\\Users\\vishn\\Desktop\\AuthInMern\\client\\node_modules\\marked\\src\\marked.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nexport function edit(regex, opt) {\n    regex = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            val = typeof val === 'object' && 'source' in val ? val.source : val;\n            val = val.replace(caret, '$1');\n            regex = regex.replace(name, val);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(regex, opt);\n        }\n    };\n    return obj;\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nexport const noopTest = { exec: () => null };\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, escape, findClosingBracket } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    // TODO: Fix this rules type\n    rules;\n    lexer;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            list.items[list.items.length - 1].text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (cap) {\n            if (!/[:|]/.test(cap[2])) {\n                // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n                return;\n            }\n            const item = {\n                type: 'table',\n                raw: cap[0],\n                header: splitCells(cap[1]).map(c => {\n                    return { text: c, tokens: [] };\n                }),\n                align: cap[2].replace(/^\\||\\| *$/g, '').split('|'),\n                rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n            };\n            if (item.header.length === item.align.length) {\n                let l = item.align.length;\n                let i, j, k, row;\n                for (i = 0; i < l; i++) {\n                    const align = item.align[i];\n                    if (align) {\n                        if (/^ *-+: *$/.test(align)) {\n                            item.align[i] = 'right';\n                        }\n                        else if (/^ *:-+: *$/.test(align)) {\n                            item.align[i] = 'center';\n                        }\n                        else if (/^ *:-+ *$/.test(align)) {\n                            item.align[i] = 'left';\n                        }\n                        else {\n                            item.align[i] = null;\n                        }\n                    }\n                }\n                l = item.rows.length;\n                for (i = 0; i < l; i++) {\n                    item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n                        return { text: c, tokens: [] };\n                    });\n                }\n                // parse child tokens inside headers and cells\n                // header child tokens\n                l = item.header.length;\n                for (j = 0; j < l; j++) {\n                    item.header[j].tokens = this.lexer.inline(item.header[j].text);\n                }\n                // cell child tokens\n                l = item.rows.length;\n                for (j = 0; j < l; j++) {\n                    row = item.rows[j];\n                    for (k = 0; k < row.length; k++) {\n                        row[k].tokens = this.lexer.inline(row[k].text);\n                    }\n                }\n                return item;\n            }\n        }\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n                title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            link = links[link.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrong.lDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + match[0].length - 1);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                const raw = [...src].slice(0, lLength + match.index + rLength + 1).join('');\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n","import { noopTest, edit } from './helpers.ts';\n/**\n * Block-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const block = {\n    newline: /^(?: *(?:\\n|$))+/,\n    code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n    fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n    hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n    heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n    blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n    list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n    html: '^ {0,3}(?:' // optional indentation\n        + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n        + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n        + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n        + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n        + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n        + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n        + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n        + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n        + ')',\n    def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n    table: noopTest,\n    lheading: /^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    // regex template, placeholders will be replaced according to different paragraph\n    // interruption rules of commonmark and the original markdown spec:\n    _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n    text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n    .replace('label', block._label)\n    .replace('title', block._title)\n    .getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n    .replace('bull', block.bullet)\n    .getRegex();\nblock.list = edit(block.list)\n    .replace(/bull/g, block.bullet)\n    .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n    .replace('def', '\\\\n+(?=' + block.def.source + ')')\n    .getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n    .replace('comment', block._comment)\n    .replace('tag', block._tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nblock.lheading = edit(block.lheading)\n    .replace(/bull/g, block.bullet) // lists can interrupt\n    .getRegex();\nblock.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nblock.blockquote = edit(block.blockquote)\n    .replace('paragraph', block.paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nblock.normal = { ...block };\n/**\n * GFM Block Grammar\n */\nblock.gfm = {\n    ...block.normal,\n    table: '^ *([^\\\\n ].*)\\\\n' // Header\n        + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n        + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\nblock.gfm.table = edit(block.gfm.table)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nblock.gfm.paragraph = edit(block._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' {0,3}#{1,6} ')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('table', block.gfm.table) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nblock.pedantic = {\n    ...block.normal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', block._comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(block.normal._paragraph)\n        .replace('hr', block.hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', block.lheading)\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\n// Not all rules are defined in the object literal\n// @ts-expect-error\nexport const inline = {\n    escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n    autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n    url: noopTest,\n    tag: '^comment'\n        + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n        + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n        + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n        + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n        + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n    link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n    reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n    nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n    reflinkSearch: 'reflink|nolink(?!\\\\()',\n    emStrong: {\n        lDelim: /^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/,\n        //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n        //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a\n        rDelimAst: /^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)[punct](\\*+)(?=[\\s]|$)|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])|[\\s](\\*+)(?!\\*)(?=[punct])|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])|[^punct\\s](\\*+)(?=[^punct\\s])/,\n        rDelimUnd: /^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\\s]|$)|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)|(?!_)[punct\\s](_+)(?=[^punct\\s])|[\\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/ // ^- Not allowed for _\n    },\n    code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n    br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n    del: noopTest,\n    text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n    punctuation: /^((?![*_])[\\spunctuation])/\n};\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\ninline._punctuation = '\\\\p{P}$+<=>`^|~';\ninline.punctuation = edit(inline.punctuation, 'u').replace(/punctuation/g, inline._punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\ninline.anyPunctuation = /\\\\[punct]/g;\ninline._escapes = /\\\\([punct])/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim, 'u')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline.anyPunctuation = edit(inline.anyPunctuation, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._escapes = edit(inline._escapes, 'gu')\n    .replace(/punct/g, inline._punctuation)\n    .getRegex();\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n    .replace('scheme', inline._scheme)\n    .replace('email', inline._email)\n    .getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag)\n    .replace('comment', inline._comment)\n    .replace('attribute', inline._attribute)\n    .getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link)\n    .replace('label', inline._label)\n    .replace('href', inline._href)\n    .replace('title', inline._title)\n    .getRegex();\ninline.reflink = edit(inline.reflink)\n    .replace('label', inline._label)\n    .replace('ref', block._label)\n    .getRegex();\ninline.nolink = edit(inline.nolink)\n    .replace('ref', block._label)\n    .getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n    .replace('reflink', inline.reflink)\n    .replace('nolink', inline.nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\ninline.normal = { ...inline };\n/**\n * Pedantic Inline Grammar\n */\ninline.pedantic = {\n    ...inline.normal,\n    strong: {\n        start: /^__|\\*\\*/,\n        middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n        endAst: /\\*\\*(?!\\*)/g,\n        endUnd: /__(?!_)/g\n    },\n    em: {\n        start: /^_|\\*/,\n        middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n        endAst: /\\*(?!\\*)/g,\n        endUnd: /_(?!_)/g\n    },\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', inline._label)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', inline._label)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\ninline.gfm = {\n    ...inline.normal,\n    escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n    url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\ninline.gfm.url = edit(inline.gfm.url, 'i')\n    .replace('email', inline.gfm._extended_email)\n    .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\ninline.breaks = {\n    ...inline.gfm,\n    br: edit(inline.br).replace('{2,}', '*').getRegex(),\n    text: edit(inline.gfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        // @ts-expect-error\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        let next;\n        while (next = this.inlineQueue.shift()) {\n            this.inlineTokens(next.src, next.tokens);\n        }\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape } from './helpers.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport { unescape } from './helpers.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nexport class _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    parser = _Parser.parse;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    lexer = _Lexer.lex;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            values = values.concat(this.walkTokens(genericToken[childTokens], callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    const rendererFunc = pack.renderer[prop];\n                    const rendererKey = prop;\n                    const prevRenderer = renderer[rendererKey];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererKey] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    const tokenizerFunc = pack.tokenizer[prop];\n                    const tokenizerKey = prop;\n                    const prevTokenizer = tokenizer[tokenizerKey];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    tokenizer[tokenizerKey] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    const hooksFunc = pack.hooks[prop];\n                    const hooksKey = prop;\n                    const prevHook = hooks[hooksKey];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        hooks[hooksKey] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        hooks[hooksKey] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                const tokens = lexer(src, opt);\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"]},"metadata":{},"sourceType":"module"}