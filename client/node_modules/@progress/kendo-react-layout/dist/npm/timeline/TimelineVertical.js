"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimelineVertical = void 0;
var React = require("react");
var PropTypes = require("prop-types");
var TimelineCard_1 = require("./TimelineCard");
var utils_1 = require("./utils");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var TimelineVertical = function (props) {
    var intl = (0, kendo_react_intl_1.useInternationalization)();
    var _a = React.useState(), eventsList = _a[0], setEventsList = _a[1];
    var collapsibleEvents = props.collapsibleEvents, transitionDuration = props.transitionDuration, eventsData = props.eventsData, dateFormat = props.dateFormat, alterMode = props.alterMode, navigatable = props.navigatable, onChange = props.onChange, onActionClick = props.onActionClick;
    var eventAxisRef = React.useRef(null);
    var navigation = React.useRef(new kendo_react_common_1.Navigation({
        tabIndex: 0,
        root: eventAxisRef,
        selectors: ['.k-card-vertical']
    }));
    React.useEffect(function () {
        if (eventAxisRef.current) {
            if (props.navigatable) {
                setTimeout(function () {
                    var firstCell = navigation.current.first;
                    if (firstCell) {
                        firstCell.setAttribute('tabindex', String(0));
                    }
                }, 0);
                navigation.current.keyboardEvents = {
                    keydown: {
                        'Space': onEnter,
                        'Enter': onEnter
                    }
                };
            }
        }
    }, [props.navigatable]);
    React.useEffect(function () {
        setEventsList((0, utils_1.addYearsFlags)(eventsData));
    }, []);
    React.useEffect(function () {
        navigation.current.update();
    });
    var handleKeyDown = function (e) {
        if (navigatable && navigation.current) {
            navigation.current.triggerKeyboardEvent(e);
        }
    };
    var onEnter = function (target, _nav, ev) {
        ev.preventDefault();
        var element = target.querySelector('.k-card-title .k-event-collapse');
        if (element) {
            element.click();
        }
    };
    var _alterIncreaser = 0;
    return (React.createElement("ul", { ref: eventAxisRef, onKeyDown: handleKeyDown }, eventsList && eventsList.map(function (event, index) {
        var cardId = (0, kendo_react_common_1.guid)();
        var oddIndex = (index + _alterIncreaser) % 2 === 0;
        if (event.yearFlag) {
            _alterIncreaser += 1;
        }
        return (React.createElement(React.Fragment, { key: index }, event.yearFlag
            ? (React.createElement("li", { className: "k-timeline-flag-wrap" },
                React.createElement("span", { className: "k-timeline-flag" }, event.yearFlag)))
            : (React.createElement("li", { className: (0, kendo_react_common_1.classNames)('k-timeline-event', { 'k-reverse': oddIndex }) },
                React.createElement("div", { className: "k-timeline-date-wrap" },
                    React.createElement("span", { className: "k-timeline-date", id: cardId }, intl.formatDate(event.date, dateFormat))),
                React.createElement("a", { className: "k-timeline-circle" }),
                React.createElement(TimelineCard_1.TimelineCard, { id: cardId, tabindex: navigatable ? 0 : -1, eventData: event, alternated: alterMode && oddIndex, collapsible: collapsibleEvents, transitionDuration: transitionDuration, onChange: onChange, onActionClick: onActionClick })))));
    })));
};
exports.TimelineVertical = TimelineVertical;
exports.TimelineVertical.propTypes = {
    onActionClick: PropTypes.func
};
