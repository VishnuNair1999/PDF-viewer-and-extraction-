import * as React from 'react';
import * as PropTypes from 'prop-types';
import { validatePackage } from '@progress/kendo-licensing';
import { classNames, getTabIndex, useDir, dispatchEvent } from '@progress/kendo-react-common';
import { packageMetadata } from '../package-metadata';
/**
 * Represents the [BreadcrumbLink](% slug api_layout_breadcrumblink %) component.
 *
 * @example
 * ```jsx
 * import { Breadcrumb, BreadcrumbLink } from '@progress/kendo-react-layout';
 * const items = [
 *   {
 *     id: 'home',
 *     text: 'Home',
 *     iconClass: 'k-i-home',
 *   },
 *   {
 *     id: 'products',
 *     text: 'Products',
 *   },
 *   {
 *     id: 'computer',
 *     text: 'Computer',
 *   }
 * ];
 *
 * const App = () => {
 * const [data,setData] = React.useState(items);
 * const handleItemSelect = (event, id) => {
 *   const itemIndex = data.findIndex((curValue) => curValue.id === id);
 *   const newData = data.slice(0, itemIndex + 1);
 *   setData(newData);
 * };
 *
 * const CustomLink = (data) => {
 *  return (
 *     <BreadcrumbLink
 *       id={data.id}
 *       text={data.text}
 *       onItemSelect={(event) => handleItemSelect(event, data.id)}
 *     />
 *   );
 * };
 *
 * return (
 *   <Breadcrumb
 *     data={data}
 *     breadcrumbLink={(items) => CustomLink(items)}
 *   />
 * )}
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export var BreadcrumbLink = React.forwardRef(function (props, ref) {
    validatePackage(packageMetadata);
    var target = React.useRef(null);
    var linkRef = React.useRef(null);
    var focus = React.useCallback(function () {
        if (linkRef.current) {
            linkRef.current.focus();
        }
    }, [linkRef]);
    React.useImperativeHandle(target, function () { return ({
        element: linkRef.current,
        focus: focus,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleItemSelect = React.useCallback(function (event) {
        if (props.id) {
            dispatchEvent(props.onItemSelect, event, event.target, { id: props.id });
        }
    }, [props.onItemSelect]);
    var handleKeyDown = React.useCallback(function (event) {
        if (props.id) {
            dispatchEvent(props.onKeyDown, event, event.target, { id: props.id });
        }
    }, [props.onKeyDown]);
    return (React.createElement("span", { "aria-current": props.ariaCurrent ? props.ariaCurrent : props.isLast, role: 'link', id: props.id, ref: linkRef, style: props.style, dir: useDir(linkRef, props.dir), tabIndex: getTabIndex(props.tabIndex, props.disabled), className: classNames({
            'k-breadcrumb-root-link': props.isFirst,
            'k-breadcrumb-link': !props.isFirst,
            'k-breadcrumb-icontext-link': props.iconClass !== undefined && props.text,
            'k-breadcrumb-icon-link': props.iconClass !== undefined && !props.text,
            'k-disabled': props.disabled
        }), onClick: handleItemSelect, onKeyDown: handleKeyDown },
        props.iconClass
            ?
                React.createElement("span", { className: classNames('k-icon', props.iconClass) })
            : props.icon ? props.icon : '',
        props.text &&
            React.createElement("span", { className: "k-breadcrumb-item-text" }, props.text)));
});
var propTypes = {
    id: PropTypes.string,
    className: PropTypes.string,
    tabIndex: PropTypes.number,
    style: PropTypes.object,
    dir: PropTypes.string,
    disabled: PropTypes.bool,
    text: PropTypes.string,
    icon: PropTypes.node,
    iconClass: PropTypes.string,
    onClick: PropTypes.func,
    ariaCurrent: PropTypes.bool
};
BreadcrumbLink.displayName = 'KendoReactBreadcrumbLink';
// TODO: delete casting when @types/react is updated!
BreadcrumbLink.propTypes = propTypes;
