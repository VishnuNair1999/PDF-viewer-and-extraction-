"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Navigation = exports.FOCUSABLE_ELEMENTS = void 0;
/**
 * @hidden
 */
exports.FOCUSABLE_ELEMENTS = [
    'input:not([disabled]):not([type=hidden])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    'button:not([disabled])',
    'a[href]',
    'area[href]',
    'summary',
    'iframe',
    'object',
    'embed',
    'audio[controls]',
    'video[controls]',
    '[contenteditable]'
];
/**
 * Represents the [KendoReact Navigation functionality]({% slug overview_navigation %}).
 * It handles the navigation through a collection of DOM elements.
 */
var Navigation = /** @class */ (function () {
    function Navigation(options) {
        var _this = this;
        /**
         * @hidden
         */
        this.rovingTabIndex = true;
        /**
         * @hidden
         */
        this.update = function () { };
        this.focusNextIndex = function (target, indexDiff) {
            var all = _this.elements;
            var index = all.indexOf(target) + indexDiff;
            index = index < 0 ? all.length - 1 : index;
            var next = all[index % all.length];
            _this.focusElement(next, target);
            return next;
        };
        this.tabIndex = options.tabIndex || 0;
        this.root = options.root;
        this.selectors = options.selectors;
        this.rovingTabIndex = options.rovingTabIndex !== undefined ? options.rovingTabIndex : true;
        this.mouseEvents = options.mouseEvents || {};
        this.keyboardEvents = options.keyboardEvents || {};
    }
    Object.defineProperty(Navigation.prototype, "elements", {
        /**
         * Returns the collection of DOM elements which the module will navigate in.
         */
        get: function () {
            return this.root.current ? Array.from(this.root.current.querySelectorAll(this.selectors.join(','))) : [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Navigation.prototype, "first", {
        /**
         * Returns the first navigation DOM element.
         */
        get: function () {
            return (this.root.current && this.root.current.querySelector(this.selectors.join(','))) || null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Navigation.prototype, "last", {
        /**
         * Returns the last navigation DOM element.
         */
        get: function () {
            var all = this.elements;
            return all[all.length - 1] || null;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Navigation.prototype, "current", {
        /**
         * Returns the focused DOM element from the navigation collection of DOM elements.
         */
        get: function () {
            return this.elements.find(function (el) { return el.matches(':focus'); }) || null;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Focuses the next element from the navigation collection of DOM elements.
     */
    Navigation.prototype.focusNext = function (target) {
        return this.focusNextIndex(target, 1);
    };
    /**
     * Focuses the previous element from the navigation collection of DOM elements.
     */
    Navigation.prototype.focusPrevious = function (target) {
        return this.focusNextIndex(target, -1);
    };
    /**
     * The keyboard events handler.
     */
    Navigation.prototype.triggerKeyboardEvent = function (ev) {
        var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));
        var key = ev.key === ' ' ? 'Space' : ev.key;
        var eventType = ev.nativeEvent.type;
        if (target && this.keyboardEvents[eventType][key]) {
            this.keyboardEvents[eventType][key].call(undefined, target, this, ev);
        }
    };
    /**
     * The mouse events handler.
     */
    Navigation.prototype.triggerMouseEvent = function (ev) {
        var target = ev.target instanceof Element && ev.target.closest(this.selectors.join(','));
        var eventType = ev.nativeEvent.type;
        if (target) {
            this.mouseEvents[eventType].call(undefined, target, this, ev);
        }
    };
    /**
     * Focuses the passed element from the navigation collection of DOM elements.
     */
    Navigation.prototype.focusElement = function (element, previous) {
        if (element) {
            if (previous) {
                if (this.rovingTabIndex) {
                    previous.removeAttribute('tabindex');
                }
                previous.classList.remove('k-focus');
            }
            if (this.rovingTabIndex) {
                element.setAttribute('tabindex', String(this.tabIndex));
            }
            element.focus({ preventScroll: true });
        }
    };
    return Navigation;
}());
exports.Navigation = Navigation;
;
